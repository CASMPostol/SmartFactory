//<summary>
//  Title   : partial class TimeSlotTimeSlot
//  System  : Microsoft Visual C# .NET 2012
//  $LastChangedDate:$
//  $Rev:$
//  $LastChangedBy:$
//  $URL:$
//  $Id:$
//
//  Copyright (C) 2013, CAS LODZ POLAND.
//  TEL: +48 (42) 686 25 47
//  mailto://techsupp@cas.eu
//  http://www.cas.eu
//</summary>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.SharePoint.Linq;

namespace CAS.SmartFactory.Shepherd.DataModel.Entities
{
  /// <summary>
  ///  Extend the TimeSlotTimeSlot autogenerated class
  /// </summary>
  public partial class TimeSlotTimeSlot
  {
    /// <summary>
    /// The name of is double
    /// </summary>
    public const string NameOfIsDouble = "IsDouble";
    /// <summary>
    /// The span15min
    /// </summary>
    public static TimeSpan Span15min = new TimeSpan( 0, 15, 0 );
    /// <summary>
    /// Gets the warehouse.
    /// </summary>
    /// <returns></returns>
    /// <exception cref="System.ApplicationException">
    /// Warehouse not found
    /// </exception>
    public Warehouse GetWarehouse()
    {
      if ( this.TimeSlot2ShippingPointLookup == null )
        throw new ApplicationException( m_ShippingNotFpundMessage );
      if ( this.TimeSlot2ShippingPointLookup.WarehouseTitle == null )
        throw new ApplicationException( "Warehouse not found" );
      return this.TimeSlot2ShippingPointLookup.WarehouseTitle;
    }
    internal TimeSlotTimeSlot FindAdjacent( List<TimeSlotTimeSlot> _avlblTmslts )
    {
      for ( int _i = 0; _i < _avlblTmslts.Count; _i++ )
      {
        if ( ( _avlblTmslts[ _i ].StartTime.Value - this.EndTime.Value ).Duration() <= Span15min )
          return _avlblTmslts[ _i ];
      }
      throw new ApplicationException( "Cannot find the time slot to make the couple." );
    }
    /// <summary>
    /// Makes the booking.
    /// </summary>
    /// <param name="shipping">The _SP.</param>
    /// <param name="isDouble">if set to <c>true</c> [_is double].</param>
    /// <returns></returns>
    /// <exception cref="System.ApplicationException">Time slot has been aleady reserved</exception>
    public List<TimeSlotTimeSlot> MakeBooking( Shipping shipping, bool isDouble )
    {
      if ( this.Occupied.Value == Entities.Occupied.Occupied0 )
        throw new ApplicationException( "Time slot has been aleady reserved" );
      List<TimeSlotTimeSlot> _ret = new List<TimeSlotTimeSlot>();
      _ret.Add( this );
      this.Occupied = Entities.Occupied.Occupied0;
      this.TimeSlot2ShippingIndex = shipping;
      shipping.StartTime = this.StartTime;
      shipping.TSStartTime = this.StartTime;
      shipping.Shipping2WarehouseTitle = this.GetWarehouse();
      TimeSlotTimeSlot _next = this;
      this.IsDouble = isDouble;
      if ( isDouble )
      {
        EntitySet<TimeSlot> _tslots = this.TimeSlot2ShippingPointLookup.TimeSlot;
        DateTime _tdy = this.StartTime.Value.Date;
        List<TimeSlotTimeSlot> _avlblTmslts = ( from _tsidx in _tslots
                                                let _idx = _tsidx.StartTime.Value.Date
                                                where _tsidx.Occupied.Value == Entities.Occupied.Free && _idx >= _tdy && _idx <= _tdy.AddDays( 1 )
                                                orderby _tsidx.StartTime ascending
                                                select _tsidx ).Cast<TimeSlotTimeSlot>().ToList<TimeSlotTimeSlot>();
        _next = this.FindAdjacent( _avlblTmslts );
        _ret.Add( _next );
        _next.Occupied = Entities.Occupied.Occupied0;
        _next.TimeSlot2ShippingIndex = shipping;
        _next.IsDouble = true;
      }
      shipping.EndTime = _next.EndTime;
      shipping.TSEndTime = _next.EndTime;
      shipping.ShippingDuration = Convert.ToDouble( ( _next.EndTime.Value - this.StartTime.Value ).TotalMinutes );
      shipping.LoadingType = isDouble ? Entities.LoadingType.Manual : Entities.LoadingType.Pallet;
      return _ret;
    }
    /// <summary>
    /// Durations this instance.
    /// </summary>
    /// <returns></returns>
    public double? Duration()
    {
      if ( !EndTime.HasValue || !StartTime.HasValue )
        return null;
      return ( EndTime.Value - StartTime.Value ).TotalMinutes;
    }
    /// <summary>
    /// The m_ shipping not fpund message
    /// </summary>
    private const string m_ShippingNotFpundMessage = "Shipping slot is not selected";
  }//TimeSlotTimeSlot
}

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CAS.SmartFactory.Shepherd.Client.DataManagement.Linq2SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class SHRARCHIVE : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArchivingLogs(ArchivingLogs instance);
    partial void UpdateArchivingLogs(ArchivingLogs instance);
    partial void DeleteArchivingLogs(ArchivingLogs instance);
    partial void InsertArchivingOperationLogs(ArchivingOperationLogs instance);
    partial void UpdateArchivingOperationLogs(ArchivingOperationLogs instance);
    partial void DeleteArchivingOperationLogs(ArchivingOperationLogs instance);
    partial void InsertBusinessDescription(BusinessDescription instance);
    partial void UpdateBusinessDescription(BusinessDescription instance);
    partial void DeleteBusinessDescription(BusinessDescription instance);
    partial void InsertCarrier(Carrier instance);
    partial void UpdateCarrier(Carrier instance);
    partial void DeleteCarrier(Carrier instance);
    partial void InsertCarrierPerformanceReport(CarrierPerformanceReport instance);
    partial void UpdateCarrierPerformanceReport(CarrierPerformanceReport instance);
    partial void DeleteCarrierPerformanceReport(CarrierPerformanceReport instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCommodity(Commodity instance);
    partial void UpdateCommodity(Commodity instance);
    partial void DeleteCommodity(Commodity instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertDestinationMarket(DestinationMarket instance);
    partial void UpdateDestinationMarket(DestinationMarket instance);
    partial void DeleteDestinationMarket(DestinationMarket instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void InsertDriversTeam(DriversTeam instance);
    partial void UpdateDriversTeam(DriversTeam instance);
    partial void DeleteDriversTeam(DriversTeam instance);
    partial void InsertEscortPOLibrary(EscortPOLibrary instance);
    partial void UpdateEscortPOLibrary(EscortPOLibrary instance);
    partial void DeleteEscortPOLibrary(EscortPOLibrary instance);
    partial void InsertFreightPayer(FreightPayer instance);
    partial void UpdateFreightPayer(FreightPayer instance);
    partial void DeleteFreightPayer(FreightPayer instance);
    partial void InsertFreightPOLibrary(FreightPOLibrary instance);
    partial void UpdateFreightPOLibrary(FreightPOLibrary instance);
    partial void DeleteFreightPOLibrary(FreightPOLibrary instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertLoadDescription(LoadDescription instance);
    partial void UpdateLoadDescription(LoadDescription instance);
    partial void DeleteLoadDescription(LoadDescription instance);
    partial void InsertMarket(Market instance);
    partial void UpdateMarket(Market instance);
    partial void DeleteMarket(Market instance);
    partial void InsertPartner(Partner instance);
    partial void UpdatePartner(Partner instance);
    partial void DeletePartner(Partner instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertSAPDestinationPlant(SAPDestinationPlant instance);
    partial void UpdateSAPDestinationPlant(SAPDestinationPlant instance);
    partial void DeleteSAPDestinationPlant(SAPDestinationPlant instance);
    partial void InsertScheduleTemplate(ScheduleTemplate instance);
    partial void UpdateScheduleTemplate(ScheduleTemplate instance);
    partial void DeleteScheduleTemplate(ScheduleTemplate instance);
    partial void InsertSealProtocolLibrary(SealProtocolLibrary instance);
    partial void UpdateSealProtocolLibrary(SealProtocolLibrary instance);
    partial void DeleteSealProtocolLibrary(SealProtocolLibrary instance);
    partial void InsertSecurityEscortRoute(SecurityEscortRoute instance);
    partial void UpdateSecurityEscortRoute(SecurityEscortRoute instance);
    partial void DeleteSecurityEscortRoute(SecurityEscortRoute instance);
    partial void InsertShipmentType(ShipmentType instance);
    partial void UpdateShipmentType(ShipmentType instance);
    partial void DeleteShipmentType(ShipmentType instance);
    partial void InsertShipping(Shipping instance);
    partial void UpdateShipping(Shipping instance);
    partial void DeleteShipping(Shipping instance);
    partial void InsertShippingPoint(ShippingPoint instance);
    partial void UpdateShippingPoint(ShippingPoint instance);
    partial void DeleteShippingPoint(ShippingPoint instance);
    partial void InsertTimeSlotsTemplate(TimeSlotsTemplate instance);
    partial void UpdateTimeSlotsTemplate(TimeSlotsTemplate instance);
    partial void DeleteTimeSlotsTemplate(TimeSlotsTemplate instance);
    partial void InsertTrailer(Trailer instance);
    partial void UpdateTrailer(Trailer instance);
    partial void DeleteTrailer(Trailer instance);
    partial void InsertTransportUnitType(TransportUnitType instance);
    partial void UpdateTransportUnitType(TransportUnitType instance);
    partial void DeleteTransportUnitType(TransportUnitType instance);
    partial void InsertTruck(Truck instance);
    partial void UpdateTruck(Truck instance);
    partial void DeleteTruck(Truck instance);
    partial void InsertWarehouse(Warehouse instance);
    partial void UpdateWarehouse(Warehouse instance);
    partial void DeleteWarehouse(Warehouse instance);
    #endregion
		
		public SHRARCHIVE(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SHRARCHIVE(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SHRARCHIVE(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SHRARCHIVE(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ArchivingLogs> ArchivingLogs
		{
			get
			{
				return this.GetTable<ArchivingLogs>();
			}
		}
		
		public System.Data.Linq.Table<ArchivingOperationLogs> ArchivingOperationLogs
		{
			get
			{
				return this.GetTable<ArchivingOperationLogs>();
			}
		}
		
		public System.Data.Linq.Table<BusinessDescription> BusinessDescription
		{
			get
			{
				return this.GetTable<BusinessDescription>();
			}
		}
		
		public System.Data.Linq.Table<Carrier> Carrier
		{
			get
			{
				return this.GetTable<Carrier>();
			}
		}
		
		public System.Data.Linq.Table<CarrierPerformanceReport> CarrierPerformanceReport
		{
			get
			{
				return this.GetTable<CarrierPerformanceReport>();
			}
		}
		
		public System.Data.Linq.Table<City> City
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Commodity> Commodity
		{
			get
			{
				return this.GetTable<Commodity>();
			}
		}
		
		public System.Data.Linq.Table<Country> Country
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currency
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<DestinationMarket> DestinationMarket
		{
			get
			{
				return this.GetTable<DestinationMarket>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Driver
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<DriversTeam> DriversTeam
		{
			get
			{
				return this.GetTable<DriversTeam>();
			}
		}
		
		public System.Data.Linq.Table<EscortPOLibrary> EscortPOLibrary
		{
			get
			{
				return this.GetTable<EscortPOLibrary>();
			}
		}
		
		public System.Data.Linq.Table<FreightPayer> FreightPayer
		{
			get
			{
				return this.GetTable<FreightPayer>();
			}
		}
		
		public System.Data.Linq.Table<FreightPOLibrary> FreightPOLibrary
		{
			get
			{
				return this.GetTable<FreightPOLibrary>();
			}
		}
		
		public System.Data.Linq.Table<History> History
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<LoadDescription> LoadDescription
		{
			get
			{
				return this.GetTable<LoadDescription>();
			}
		}
		
		public System.Data.Linq.Table<Market> Market
		{
			get
			{
				return this.GetTable<Market>();
			}
		}
		
		public System.Data.Linq.Table<Partner> Partner
		{
			get
			{
				return this.GetTable<Partner>();
			}
		}
		
		public System.Data.Linq.Table<Route> Route
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<SAPDestinationPlant> SAPDestinationPlant
		{
			get
			{
				return this.GetTable<SAPDestinationPlant>();
			}
		}
		
		public System.Data.Linq.Table<ScheduleTemplate> ScheduleTemplate
		{
			get
			{
				return this.GetTable<ScheduleTemplate>();
			}
		}
		
		public System.Data.Linq.Table<SealProtocolLibrary> SealProtocolLibrary
		{
			get
			{
				return this.GetTable<SealProtocolLibrary>();
			}
		}
		
		public System.Data.Linq.Table<SecurityEscortRoute> SecurityEscortRoute
		{
			get
			{
				return this.GetTable<SecurityEscortRoute>();
			}
		}
		
		public System.Data.Linq.Table<ShipmentType> ShipmentType
		{
			get
			{
				return this.GetTable<ShipmentType>();
			}
		}
		
		public System.Data.Linq.Table<Shipping> Shipping
		{
			get
			{
				return this.GetTable<Shipping>();
			}
		}
		
		public System.Data.Linq.Table<ShippingPoint> ShippingPoint
		{
			get
			{
				return this.GetTable<ShippingPoint>();
			}
		}
		
		public System.Data.Linq.Table<TimeSlotsTemplate> TimeSlotsTemplate
		{
			get
			{
				return this.GetTable<TimeSlotsTemplate>();
			}
		}
		
		public System.Data.Linq.Table<Trailer> Trailer
		{
			get
			{
				return this.GetTable<Trailer>();
			}
		}
		
		public System.Data.Linq.Table<TransportUnitType> TransportUnitType
		{
			get
			{
				return this.GetTable<TransportUnitType>();
			}
		}
		
		public System.Data.Linq.Table<Truck> Truck
		{
			get
			{
				return this.GetTable<Truck>();
			}
		}
		
		public System.Data.Linq.Table<Warehouse> Warehouse
		{
			get
			{
				return this.GetTable<Warehouse>();
			}
		}
	}
	
	[Table(Name="dbo.ArchivingLogs")]
	public partial class ArchivingLogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ListName;
		
		private int _ItemID;
		
		private System.DateTime _Date;
		
		private string _UserName;
		
		private bool _OnlySQL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnListNameChanging(string value);
    partial void OnListNameChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public ArchivingLogs()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ListName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ListName
		{
			get
			{
				return this._ListName;
			}
			set
			{
				if ((this._ListName != value))
				{
					this.OnListNameChanging(value);
					this.SendPropertyChanging();
					this._ListName = value;
					this.SendPropertyChanged("ListName");
					this.OnListNameChanged();
				}
			}
		}
		
		[Column(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ArchivingOperationLogs")]
	public partial class ArchivingOperationLogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Operation;
		
		private System.DateTime _Date;
		
		private string _UserName;
		
		private bool _OnlySQL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public ArchivingOperationLogs()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Operation", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BusinessDescription")]
	public partial class BusinessDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AdditionalComments;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Route> _Route;
		
		private EntitySet<SecurityEscortRoute> _SecurityEscortRoute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdditionalCommentsChanging(string value);
    partial void OnAdditionalCommentsChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public BusinessDescription()
		{
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			this._SecurityEscortRoute = new EntitySet<SecurityEscortRoute>(new Action<SecurityEscortRoute>(this.attach_SecurityEscortRoute), new Action<SecurityEscortRoute>(this.detach_SecurityEscortRoute));
			OnCreated();
		}
		
		[Column(Storage="_AdditionalComments", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AdditionalComments
		{
			get
			{
				return this._AdditionalComments;
			}
			set
			{
				if ((this._AdditionalComments != value))
				{
					this.OnAdditionalCommentsChanging(value);
					this.SendPropertyChanging();
					this._AdditionalComments = value;
					this.SendPropertyChanged("AdditionalComments");
					this.OnAdditionalCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Route_BusinessDescription", Storage="_Route", ThisKey="ID", OtherKey="BusinessDescriptionID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		[Association(Name="FK_SecurityEscortRoute_BusinessDescription", Storage="_SecurityEscortRoute", ThisKey="ID", OtherKey="BusinessDescriptionID", DeleteRule="NO ACTION")]
		public EntitySet<SecurityEscortRoute> SecurityEscortRoute
		{
			get
			{
				return this._SecurityEscortRoute;
			}
			set
			{
				this._SecurityEscortRoute.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.BusinessDescription = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.BusinessDescription = null;
		}
		
		private void attach_SecurityEscortRoute(SecurityEscortRoute entity)
		{
			this.SendPropertyChanging();
			entity.BusinessDescription = this;
		}
		
		private void detach_SecurityEscortRoute(SecurityEscortRoute entity)
		{
			this.SendPropertyChanging();
			entity.BusinessDescription = null;
		}
	}
	
	[Table(Name="dbo.Carrier")]
	public partial class Carrier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Carrier()
		{
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Route_Carrier", Storage="_Route", ThisKey="ID", OtherKey="CarrierID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Carrier = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Carrier = null;
		}
	}
	
	[Table(Name="dbo.CarrierPerformanceReport")]
	public partial class CarrierPerformanceReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<int> _PartnerID;
		
		private System.Nullable<System.DateTime> _CPRDate;
		
		private System.Nullable<double> _CPRNumberDelayed;
		
		private System.Nullable<double> _CPRNumberDelayed1h;
		
		private System.Nullable<double> _CPRNumberNotShowingUp;
		
		private System.Nullable<double> _CPRNumberOnTime;
		
		private System.Nullable<double> _CPRNumberOrdered;
		
		private System.Nullable<double> _CPRNumberRejectedBadQuality;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ReportPeriod;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<Partner> _Partner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnPartnerIDChanging(System.Nullable<int> value);
    partial void OnPartnerIDChanged();
    partial void OnCPRDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCPRDateChanged();
    partial void OnCPRNumberDelayedChanging(System.Nullable<double> value);
    partial void OnCPRNumberDelayedChanged();
    partial void OnCPRNumberDelayed1hChanging(System.Nullable<double> value);
    partial void OnCPRNumberDelayed1hChanged();
    partial void OnCPRNumberNotShowingUpChanging(System.Nullable<double> value);
    partial void OnCPRNumberNotShowingUpChanged();
    partial void OnCPRNumberOnTimeChanging(System.Nullable<double> value);
    partial void OnCPRNumberOnTimeChanged();
    partial void OnCPRNumberOrderedChanging(System.Nullable<double> value);
    partial void OnCPRNumberOrderedChanged();
    partial void OnCPRNumberRejectedBadQualityChanging(System.Nullable<double> value);
    partial void OnCPRNumberRejectedBadQualityChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnReportPeriodChanging(string value);
    partial void OnReportPeriodChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public CarrierPerformanceReport()
		{
			this._Partner = default(EntityRef<Partner>);
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int")]
		public System.Nullable<int> PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_CPRDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CPRDate
		{
			get
			{
				return this._CPRDate;
			}
			set
			{
				if ((this._CPRDate != value))
				{
					this.OnCPRDateChanging(value);
					this.SendPropertyChanging();
					this._CPRDate = value;
					this.SendPropertyChanged("CPRDate");
					this.OnCPRDateChanged();
				}
			}
		}
		
		[Column(Storage="_CPRNumberDelayed", DbType="Float")]
		public System.Nullable<double> CPRNumberDelayed
		{
			get
			{
				return this._CPRNumberDelayed;
			}
			set
			{
				if ((this._CPRNumberDelayed != value))
				{
					this.OnCPRNumberDelayedChanging(value);
					this.SendPropertyChanging();
					this._CPRNumberDelayed = value;
					this.SendPropertyChanged("CPRNumberDelayed");
					this.OnCPRNumberDelayedChanged();
				}
			}
		}
		
		[Column(Storage="_CPRNumberDelayed1h", DbType="Float")]
		public System.Nullable<double> CPRNumberDelayed1h
		{
			get
			{
				return this._CPRNumberDelayed1h;
			}
			set
			{
				if ((this._CPRNumberDelayed1h != value))
				{
					this.OnCPRNumberDelayed1hChanging(value);
					this.SendPropertyChanging();
					this._CPRNumberDelayed1h = value;
					this.SendPropertyChanged("CPRNumberDelayed1h");
					this.OnCPRNumberDelayed1hChanged();
				}
			}
		}
		
		[Column(Storage="_CPRNumberNotShowingUp", DbType="Float")]
		public System.Nullable<double> CPRNumberNotShowingUp
		{
			get
			{
				return this._CPRNumberNotShowingUp;
			}
			set
			{
				if ((this._CPRNumberNotShowingUp != value))
				{
					this.OnCPRNumberNotShowingUpChanging(value);
					this.SendPropertyChanging();
					this._CPRNumberNotShowingUp = value;
					this.SendPropertyChanged("CPRNumberNotShowingUp");
					this.OnCPRNumberNotShowingUpChanged();
				}
			}
		}
		
		[Column(Storage="_CPRNumberOnTime", DbType="Float")]
		public System.Nullable<double> CPRNumberOnTime
		{
			get
			{
				return this._CPRNumberOnTime;
			}
			set
			{
				if ((this._CPRNumberOnTime != value))
				{
					this.OnCPRNumberOnTimeChanging(value);
					this.SendPropertyChanging();
					this._CPRNumberOnTime = value;
					this.SendPropertyChanged("CPRNumberOnTime");
					this.OnCPRNumberOnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CPRNumberOrdered", DbType="Float")]
		public System.Nullable<double> CPRNumberOrdered
		{
			get
			{
				return this._CPRNumberOrdered;
			}
			set
			{
				if ((this._CPRNumberOrdered != value))
				{
					this.OnCPRNumberOrderedChanging(value);
					this.SendPropertyChanging();
					this._CPRNumberOrdered = value;
					this.SendPropertyChanged("CPRNumberOrdered");
					this.OnCPRNumberOrderedChanged();
				}
			}
		}
		
		[Column(Storage="_CPRNumberRejectedBadQuality", DbType="Float")]
		public System.Nullable<double> CPRNumberRejectedBadQuality
		{
			get
			{
				return this._CPRNumberRejectedBadQuality;
			}
			set
			{
				if ((this._CPRNumberRejectedBadQuality != value))
				{
					this.OnCPRNumberRejectedBadQualityChanging(value);
					this.SendPropertyChanging();
					this._CPRNumberRejectedBadQuality = value;
					this.SendPropertyChanged("CPRNumberRejectedBadQuality");
					this.OnCPRNumberRejectedBadQualityChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ReportPeriod", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ReportPeriod
		{
			get
			{
				return this._ReportPeriod;
			}
			set
			{
				if ((this._ReportPeriod != value))
				{
					this.OnReportPeriodChanging(value);
					this.SendPropertyChanging();
					this._ReportPeriod = value;
					this.SendPropertyChanged("ReportPeriod");
					this.OnReportPeriodChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_CarrierPerformanceReport_Partner", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.CarrierPerformanceReport.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.CarrierPerformanceReport.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<int> _CountryID;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<Country> _Country;
		
		private EntitySet<DestinationMarket> _DestinationMarket;
		
		private EntitySet<Route> _Route;
		
		private EntitySet<Shipping> _Shipping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public City()
		{
			this._Country = default(EntityRef<Country>);
			this._DestinationMarket = new EntitySet<DestinationMarket>(new Action<DestinationMarket>(this.attach_DestinationMarket), new Action<DestinationMarket>(this.detach_DestinationMarket));
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_City_Country", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.City.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.City.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="FK_DestinationMarket_City", Storage="_DestinationMarket", ThisKey="ID", OtherKey="CityID", DeleteRule="NO ACTION")]
		public EntitySet<DestinationMarket> DestinationMarket
		{
			get
			{
				return this._DestinationMarket;
			}
			set
			{
				this._DestinationMarket.Assign(value);
			}
		}
		
		[Association(Name="FK_Route_City", Storage="_Route", ThisKey="ID", OtherKey="CityID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_City", Storage="_Shipping", ThisKey="ID", OtherKey="CityID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DestinationMarket(DestinationMarket entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_DestinationMarket(DestinationMarket entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[Table(Name="dbo.Commodity")]
	public partial class Commodity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<LoadDescription> _LoadDescription;
		
		private EntitySet<Route> _Route;
		
		private EntitySet<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Commodity()
		{
			this._LoadDescription = new EntitySet<LoadDescription>(new Action<LoadDescription>(this.attach_LoadDescription), new Action<LoadDescription>(this.detach_LoadDescription));
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			this._Warehouse = new EntitySet<Warehouse>(new Action<Warehouse>(this.attach_Warehouse), new Action<Warehouse>(this.detach_Warehouse));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_LoadDescription_Commodity", Storage="_LoadDescription", ThisKey="ID", OtherKey="CommodityID", DeleteRule="NO ACTION")]
		public EntitySet<LoadDescription> LoadDescription
		{
			get
			{
				return this._LoadDescription;
			}
			set
			{
				this._LoadDescription.Assign(value);
			}
		}
		
		[Association(Name="FK_Route_Commodity", Storage="_Route", ThisKey="ID", OtherKey="CommodityID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		[Association(Name="FK_Warehouse_Commodity", Storage="_Warehouse", ThisKey="ID", OtherKey="CommodityID", DeleteRule="NO ACTION")]
		public EntitySet<Warehouse> Warehouse
		{
			get
			{
				return this._Warehouse;
			}
			set
			{
				this._Warehouse.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoadDescription(LoadDescription entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = this;
		}
		
		private void detach_LoadDescription(LoadDescription entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = null;
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = null;
		}
		
		private void attach_Warehouse(Warehouse entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = this;
		}
		
		private void detach_Warehouse(Warehouse entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = null;
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private string _CountryGroup;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCountryGroupChanging(string value);
    partial void OnCountryGroupChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Country()
		{
			this._City = new EntitySet<City>(new Action<City>(this.attach_City), new Action<City>(this.detach_City));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CountryGroup", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CountryGroup
		{
			get
			{
				return this._CountryGroup;
			}
			set
			{
				if ((this._CountryGroup != value))
				{
					this.OnCountryGroupChanging(value);
					this.SendPropertyChanging();
					this._CountryGroup = value;
					this.SendPropertyChanged("CountryGroup");
					this.OnCountryGroupChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_City_Country", Storage="_City", ThisKey="ID", OtherKey="CountryID", DeleteRule="NO ACTION")]
		public EntitySet<City> City
		{
			get
			{
				return this._City;
			}
			set
			{
				this._City.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private System.Nullable<double> _ExchangeRate;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Route> _Route;
		
		private EntitySet<SecurityEscortRoute> _SecurityEscortRoute;
		
		private EntitySet<Shipping> _Shipping;
		
		private EntitySet<Shipping> _Shipping_Currency4CostsPerKU;
		
		private EntitySet<Shipping> _Shipping_CurrencyForEscort;
		
		private EntitySet<Shipping> _Shipping_CurrencyForFreight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnExchangeRateChanging(System.Nullable<double> value);
    partial void OnExchangeRateChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Currency()
		{
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			this._SecurityEscortRoute = new EntitySet<SecurityEscortRoute>(new Action<SecurityEscortRoute>(this.attach_SecurityEscortRoute), new Action<SecurityEscortRoute>(this.detach_SecurityEscortRoute));
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			this._Shipping_Currency4CostsPerKU = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping_Currency4CostsPerKU), new Action<Shipping>(this.detach_Shipping_Currency4CostsPerKU));
			this._Shipping_CurrencyForEscort = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping_CurrencyForEscort), new Action<Shipping>(this.detach_Shipping_CurrencyForEscort));
			this._Shipping_CurrencyForFreight = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping_CurrencyForFreight), new Action<Shipping>(this.detach_Shipping_CurrencyForFreight));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ExchangeRate", DbType="Float")]
		public System.Nullable<double> ExchangeRate
		{
			get
			{
				return this._ExchangeRate;
			}
			set
			{
				if ((this._ExchangeRate != value))
				{
					this.OnExchangeRateChanging(value);
					this.SendPropertyChanging();
					this._ExchangeRate = value;
					this.SendPropertyChanged("ExchangeRate");
					this.OnExchangeRateChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Route_Currency", Storage="_Route", ThisKey="ID", OtherKey="CurrencyID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		[Association(Name="FK_SecurityEscortRoute_Currency", Storage="_SecurityEscortRoute", ThisKey="ID", OtherKey="CurrencyID", DeleteRule="NO ACTION")]
		public EntitySet<SecurityEscortRoute> SecurityEscortRoute
		{
			get
			{
				return this._SecurityEscortRoute;
			}
			set
			{
				this._SecurityEscortRoute.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_Currency4AddCosts", Storage="_Shipping", ThisKey="ID", OtherKey="Currency4AddCostsID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_Currency4CostsPerKU", Storage="_Shipping_Currency4CostsPerKU", ThisKey="ID", OtherKey="Currency4CostsPerKUID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping_Currency4CostsPerKU
		{
			get
			{
				return this._Shipping_Currency4CostsPerKU;
			}
			set
			{
				this._Shipping_Currency4CostsPerKU.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_CurrencyForEscort", Storage="_Shipping_CurrencyForEscort", ThisKey="ID", OtherKey="CurrencyForEscortID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping_CurrencyForEscort
		{
			get
			{
				return this._Shipping_CurrencyForEscort;
			}
			set
			{
				this._Shipping_CurrencyForEscort.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_CurrencyForFreight", Storage="_Shipping_CurrencyForFreight", ThisKey="ID", OtherKey="CurrencyForFreightID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping_CurrencyForFreight
		{
			get
			{
				return this._Shipping_CurrencyForFreight;
			}
			set
			{
				this._Shipping_CurrencyForFreight.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_SecurityEscortRoute(SecurityEscortRoute entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_SecurityEscortRoute(SecurityEscortRoute entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_Shipping_Currency4CostsPerKU(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Currency4CostsPerKU = this;
		}
		
		private void detach_Shipping_Currency4CostsPerKU(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Currency4CostsPerKU = null;
		}
		
		private void attach_Shipping_CurrencyForEscort(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyForEscort = this;
		}
		
		private void detach_Shipping_CurrencyForEscort(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyForEscort = null;
		}
		
		private void attach_Shipping_CurrencyForFreight(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyForFreight = this;
		}
		
		private void detach_Shipping_CurrencyForFreight(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyForFreight = null;
		}
	}
	
	[Table(Name="dbo.DestinationMarket")]
	public partial class DestinationMarket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<int> _CityID;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<int> _MarketID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private bool _OnlySQL;
		
		private EntityRef<City> _City;
		
		private EntityRef<Market> _Market;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMarketIDChanging(System.Nullable<int> value);
    partial void OnMarketIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public DestinationMarket()
		{
			this._City = default(EntityRef<City>);
			this._Market = default(EntityRef<Market>);
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CityID", DbType="Int")]
		public System.Nullable<int> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MarketID", DbType="Int")]
		public System.Nullable<int> MarketID
		{
			get
			{
				return this._MarketID;
			}
			set
			{
				if ((this._MarketID != value))
				{
					if (this._Market.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarketIDChanging(value);
					this.SendPropertyChanging();
					this._MarketID = value;
					this.SendPropertyChanged("MarketID");
					this.OnMarketIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_DestinationMarket_City", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.DestinationMarket.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.DestinationMarket.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="FK_DestinationMarket_Market", Storage="_Market", ThisKey="MarketID", OtherKey="ID", IsForeignKey=true)]
		public Market Market
		{
			get
			{
				return this._Market.Entity;
			}
			set
			{
				Market previousValue = this._Market.Entity;
				if (((previousValue != value) 
							|| (this._Market.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Market.Entity = null;
						previousValue.DestinationMarket.Remove(this);
					}
					this._Market.Entity = value;
					if ((value != null))
					{
						value.DestinationMarket.Add(this);
						this._MarketID = value.ID;
					}
					else
					{
						this._MarketID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Market");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Driver")]
	public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private string _CellPhone;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<int> _PartnerID;
		
		private string _Editor;
		
		private int _ID;
		
		private string _IdentityDocumentNumber;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private System.Nullable<bool> _ToBeDeleted;
		
		private bool _OnlySQL;
		
		private EntityRef<Partner> _Partner;
		
		private EntitySet<DriversTeam> _DriversTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnPartnerIDChanging(System.Nullable<int> value);
    partial void OnPartnerIDChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIdentityDocumentNumberChanging(string value);
    partial void OnIdentityDocumentNumberChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnToBeDeletedChanging(System.Nullable<bool> value);
    partial void OnToBeDeletedChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Driver()
		{
			this._Partner = default(EntityRef<Partner>);
			this._DriversTeam = new EntitySet<DriversTeam>(new Action<DriversTeam>(this.attach_DriversTeam), new Action<DriversTeam>(this.detach_DriversTeam));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CellPhone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int")]
		public System.Nullable<int> PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IdentityDocumentNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string IdentityDocumentNumber
		{
			get
			{
				return this._IdentityDocumentNumber;
			}
			set
			{
				if ((this._IdentityDocumentNumber != value))
				{
					this.OnIdentityDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._IdentityDocumentNumber = value;
					this.SendPropertyChanged("IdentityDocumentNumber");
					this.OnIdentityDocumentNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ToBeDeleted", DbType="Bit")]
		public System.Nullable<bool> ToBeDeleted
		{
			get
			{
				return this._ToBeDeleted;
			}
			set
			{
				if ((this._ToBeDeleted != value))
				{
					this.OnToBeDeletedChanging(value);
					this.SendPropertyChanging();
					this._ToBeDeleted = value;
					this.SendPropertyChanged("ToBeDeleted");
					this.OnToBeDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Driver_Partner", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.Driver.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.Driver.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		[Association(Name="FK_DriversTeam_Driver", Storage="_DriversTeam", ThisKey="ID", OtherKey="DriverID", DeleteRule="NO ACTION")]
		public EntitySet<DriversTeam> DriversTeam
		{
			get
			{
				return this._DriversTeam;
			}
			set
			{
				this._DriversTeam.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DriversTeam(DriversTeam entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_DriversTeam(DriversTeam entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
	}
	
	[Table(Name="dbo.DriversTeam")]
	public partial class DriversTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<int> _DriverID;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<int> _ShippingID;
		
		private bool _OnlySQL;
		
		private EntityRef<Driver> _Driver;
		
		private EntityRef<Shipping> _Shipping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnDriverIDChanging(System.Nullable<int> value);
    partial void OnDriverIDChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnShippingIDChanging(System.Nullable<int> value);
    partial void OnShippingIDChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public DriversTeam()
		{
			this._Driver = default(EntityRef<Driver>);
			this._Shipping = default(EntityRef<Shipping>);
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_DriverID", DbType="Int")]
		public System.Nullable<int> DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingID", DbType="Int")]
		public System.Nullable<int> ShippingID
		{
			get
			{
				return this._ShippingID;
			}
			set
			{
				if ((this._ShippingID != value))
				{
					if (this._Shipping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShippingIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingID = value;
					this.SendPropertyChanged("ShippingID");
					this.OnShippingIDChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_DriversTeam_Driver", Storage="_Driver", ThisKey="DriverID", OtherKey="ID", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.DriversTeam.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.DriversTeam.Add(this);
						this._DriverID = value.ID;
					}
					else
					{
						this._DriverID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		[Association(Name="FK_DriversTeam_Shipping", Storage="_Shipping", ThisKey="ShippingID", OtherKey="ID", IsForeignKey=true)]
		public Shipping Shipping
		{
			get
			{
				return this._Shipping.Entity;
			}
			set
			{
				Shipping previousValue = this._Shipping.Entity;
				if (((previousValue != value) 
							|| (this._Shipping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shipping.Entity = null;
						previousValue.DriversTeam.Remove(this);
					}
					this._Shipping.Entity = value;
					if ((value != null))
					{
						value.DriversTeam.Add(this);
						this._ShippingID = value.ID;
					}
					else
					{
						this._ShippingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Shipping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EscortPOLibrary")]
	public partial class EscortPOLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _DocumentCreatedBy;
		
		private string _Editor;
		
		private string _EmailAddress;
		
		private string _FileName;
		
		private string _FPOWarehouseAddress;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _DocumentModifiedBy;
		
		private string _SecurityPOCity;
		
		private string _SecurityPOCommodity;
		
		private string _SecurityPOCountry;
		
		private System.Nullable<double> _SecurityPOEscortCosts;
		
		private string _SecurityPOEscortCurrency;
		
		private string _SecurityPOEscortPayerAddress;
		
		private string _SecurityPOEscortPayerCity;
		
		private string _SecurityPOEscortPayerName;
		
		private string _SecurityPOEscortPayerNIP;
		
		private string _SecurityPOEscortPayerZip;
		
		private string _SecurityPOEscortProvider;
		
		private string _SecurityPOSentInvoiceToMultiline;
		
		private System.Nullable<System.DateTime> _SPODispatchDate;
		
		private string _SPOFreightPO;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Shipping> _Shipping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnDocumentCreatedByChanging(string value);
    partial void OnDocumentCreatedByChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFPOWarehouseAddressChanging(string value);
    partial void OnFPOWarehouseAddressChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnDocumentModifiedByChanging(string value);
    partial void OnDocumentModifiedByChanged();
    partial void OnSecurityPOCityChanging(string value);
    partial void OnSecurityPOCityChanged();
    partial void OnSecurityPOCommodityChanging(string value);
    partial void OnSecurityPOCommodityChanged();
    partial void OnSecurityPOCountryChanging(string value);
    partial void OnSecurityPOCountryChanged();
    partial void OnSecurityPOEscortCostsChanging(System.Nullable<double> value);
    partial void OnSecurityPOEscortCostsChanged();
    partial void OnSecurityPOEscortCurrencyChanging(string value);
    partial void OnSecurityPOEscortCurrencyChanged();
    partial void OnSecurityPOEscortPayerAddressChanging(string value);
    partial void OnSecurityPOEscortPayerAddressChanged();
    partial void OnSecurityPOEscortPayerCityChanging(string value);
    partial void OnSecurityPOEscortPayerCityChanged();
    partial void OnSecurityPOEscortPayerNameChanging(string value);
    partial void OnSecurityPOEscortPayerNameChanged();
    partial void OnSecurityPOEscortPayerNIPChanging(string value);
    partial void OnSecurityPOEscortPayerNIPChanged();
    partial void OnSecurityPOEscortPayerZipChanging(string value);
    partial void OnSecurityPOEscortPayerZipChanged();
    partial void OnSecurityPOEscortProviderChanging(string value);
    partial void OnSecurityPOEscortProviderChanged();
    partial void OnSecurityPOSentInvoiceToMultilineChanging(string value);
    partial void OnSecurityPOSentInvoiceToMultilineChanged();
    partial void OnSPODispatchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSPODispatchDateChanged();
    partial void OnSPOFreightPOChanging(string value);
    partial void OnSPOFreightPOChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public EscortPOLibrary()
		{
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentCreatedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentCreatedBy
		{
			get
			{
				return this._DocumentCreatedBy;
			}
			set
			{
				if ((this._DocumentCreatedBy != value))
				{
					this.OnDocumentCreatedByChanging(value);
					this.SendPropertyChanging();
					this._DocumentCreatedBy = value;
					this.SendPropertyChanged("DocumentCreatedBy");
					this.OnDocumentCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FPOWarehouseAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FPOWarehouseAddress
		{
			get
			{
				return this._FPOWarehouseAddress;
			}
			set
			{
				if ((this._FPOWarehouseAddress != value))
				{
					this.OnFPOWarehouseAddressChanging(value);
					this.SendPropertyChanging();
					this._FPOWarehouseAddress = value;
					this.SendPropertyChanged("FPOWarehouseAddress");
					this.OnFPOWarehouseAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentModifiedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentModifiedBy
		{
			get
			{
				return this._DocumentModifiedBy;
			}
			set
			{
				if ((this._DocumentModifiedBy != value))
				{
					this.OnDocumentModifiedByChanging(value);
					this.SendPropertyChanging();
					this._DocumentModifiedBy = value;
					this.SendPropertyChanged("DocumentModifiedBy");
					this.OnDocumentModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOCity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOCity
		{
			get
			{
				return this._SecurityPOCity;
			}
			set
			{
				if ((this._SecurityPOCity != value))
				{
					this.OnSecurityPOCityChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOCity = value;
					this.SendPropertyChanged("SecurityPOCity");
					this.OnSecurityPOCityChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOCommodity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOCommodity
		{
			get
			{
				return this._SecurityPOCommodity;
			}
			set
			{
				if ((this._SecurityPOCommodity != value))
				{
					this.OnSecurityPOCommodityChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOCommodity = value;
					this.SendPropertyChanged("SecurityPOCommodity");
					this.OnSecurityPOCommodityChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOCountry", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOCountry
		{
			get
			{
				return this._SecurityPOCountry;
			}
			set
			{
				if ((this._SecurityPOCountry != value))
				{
					this.OnSecurityPOCountryChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOCountry = value;
					this.SendPropertyChanged("SecurityPOCountry");
					this.OnSecurityPOCountryChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOEscortCosts", DbType="Float")]
		public System.Nullable<double> SecurityPOEscortCosts
		{
			get
			{
				return this._SecurityPOEscortCosts;
			}
			set
			{
				if ((this._SecurityPOEscortCosts != value))
				{
					this.OnSecurityPOEscortCostsChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOEscortCosts = value;
					this.SendPropertyChanged("SecurityPOEscortCosts");
					this.OnSecurityPOEscortCostsChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOEscortCurrency", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOEscortCurrency
		{
			get
			{
				return this._SecurityPOEscortCurrency;
			}
			set
			{
				if ((this._SecurityPOEscortCurrency != value))
				{
					this.OnSecurityPOEscortCurrencyChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOEscortCurrency = value;
					this.SendPropertyChanged("SecurityPOEscortCurrency");
					this.OnSecurityPOEscortCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOEscortPayerAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOEscortPayerAddress
		{
			get
			{
				return this._SecurityPOEscortPayerAddress;
			}
			set
			{
				if ((this._SecurityPOEscortPayerAddress != value))
				{
					this.OnSecurityPOEscortPayerAddressChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOEscortPayerAddress = value;
					this.SendPropertyChanged("SecurityPOEscortPayerAddress");
					this.OnSecurityPOEscortPayerAddressChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOEscortPayerCity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOEscortPayerCity
		{
			get
			{
				return this._SecurityPOEscortPayerCity;
			}
			set
			{
				if ((this._SecurityPOEscortPayerCity != value))
				{
					this.OnSecurityPOEscortPayerCityChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOEscortPayerCity = value;
					this.SendPropertyChanged("SecurityPOEscortPayerCity");
					this.OnSecurityPOEscortPayerCityChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOEscortPayerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOEscortPayerName
		{
			get
			{
				return this._SecurityPOEscortPayerName;
			}
			set
			{
				if ((this._SecurityPOEscortPayerName != value))
				{
					this.OnSecurityPOEscortPayerNameChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOEscortPayerName = value;
					this.SendPropertyChanged("SecurityPOEscortPayerName");
					this.OnSecurityPOEscortPayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOEscortPayerNIP", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOEscortPayerNIP
		{
			get
			{
				return this._SecurityPOEscortPayerNIP;
			}
			set
			{
				if ((this._SecurityPOEscortPayerNIP != value))
				{
					this.OnSecurityPOEscortPayerNIPChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOEscortPayerNIP = value;
					this.SendPropertyChanged("SecurityPOEscortPayerNIP");
					this.OnSecurityPOEscortPayerNIPChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOEscortPayerZip", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOEscortPayerZip
		{
			get
			{
				return this._SecurityPOEscortPayerZip;
			}
			set
			{
				if ((this._SecurityPOEscortPayerZip != value))
				{
					this.OnSecurityPOEscortPayerZipChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOEscortPayerZip = value;
					this.SendPropertyChanged("SecurityPOEscortPayerZip");
					this.OnSecurityPOEscortPayerZipChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOEscortProvider", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOEscortProvider
		{
			get
			{
				return this._SecurityPOEscortProvider;
			}
			set
			{
				if ((this._SecurityPOEscortProvider != value))
				{
					this.OnSecurityPOEscortProviderChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOEscortProvider = value;
					this.SendPropertyChanged("SecurityPOEscortProvider");
					this.OnSecurityPOEscortProviderChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityPOSentInvoiceToMultiline", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityPOSentInvoiceToMultiline
		{
			get
			{
				return this._SecurityPOSentInvoiceToMultiline;
			}
			set
			{
				if ((this._SecurityPOSentInvoiceToMultiline != value))
				{
					this.OnSecurityPOSentInvoiceToMultilineChanging(value);
					this.SendPropertyChanging();
					this._SecurityPOSentInvoiceToMultiline = value;
					this.SendPropertyChanged("SecurityPOSentInvoiceToMultiline");
					this.OnSecurityPOSentInvoiceToMultilineChanged();
				}
			}
		}
		
		[Column(Storage="_SPODispatchDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SPODispatchDate
		{
			get
			{
				return this._SPODispatchDate;
			}
			set
			{
				if ((this._SPODispatchDate != value))
				{
					this.OnSPODispatchDateChanging(value);
					this.SendPropertyChanging();
					this._SPODispatchDate = value;
					this.SendPropertyChanged("SPODispatchDate");
					this.OnSPODispatchDateChanged();
				}
			}
		}
		
		[Column(Storage="_SPOFreightPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SPOFreightPO
		{
			get
			{
				return this._SPOFreightPO;
			}
			set
			{
				if ((this._SPOFreightPO != value))
				{
					this.OnSPOFreightPOChanging(value);
					this.SendPropertyChanging();
					this._SPOFreightPO = value;
					this.SendPropertyChanged("SPOFreightPO");
					this.OnSPOFreightPOChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Shipping_EscortPOLibrary", Storage="_Shipping", ThisKey="ID", OtherKey="EscortPOID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.EscortPOLibrary = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.EscortPOLibrary = null;
		}
	}
	
	[Table(Name="dbo.FreightPayer")]
	public partial class FreightPayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private string _CompanyAddress;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _NIP;
		
		private string _PayerName;
		
		private string _SendInvoiceToMultiline;
		
		private string _Title;
		
		private string _WorkCity;
		
		private string _WorkCountry;
		
		private string _WorkZip;
		
		private bool _OnlySQL;
		
		private EntitySet<Route> _Route;
		
		private EntitySet<SecurityEscortRoute> _SecurityEscortRoute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCompanyAddressChanging(string value);
    partial void OnCompanyAddressChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnNIPChanging(string value);
    partial void OnNIPChanged();
    partial void OnPayerNameChanging(string value);
    partial void OnPayerNameChanged();
    partial void OnSendInvoiceToMultilineChanging(string value);
    partial void OnSendInvoiceToMultilineChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnWorkCityChanging(string value);
    partial void OnWorkCityChanged();
    partial void OnWorkCountryChanging(string value);
    partial void OnWorkCountryChanged();
    partial void OnWorkZipChanging(string value);
    partial void OnWorkZipChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public FreightPayer()
		{
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			this._SecurityEscortRoute = new EntitySet<SecurityEscortRoute>(new Action<SecurityEscortRoute>(this.attach_SecurityEscortRoute), new Action<SecurityEscortRoute>(this.detach_SecurityEscortRoute));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CompanyAddress
		{
			get
			{
				return this._CompanyAddress;
			}
			set
			{
				if ((this._CompanyAddress != value))
				{
					this.OnCompanyAddressChanging(value);
					this.SendPropertyChanging();
					this._CompanyAddress = value;
					this.SendPropertyChanged("CompanyAddress");
					this.OnCompanyAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_NIP", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string NIP
		{
			get
			{
				return this._NIP;
			}
			set
			{
				if ((this._NIP != value))
				{
					this.OnNIPChanging(value);
					this.SendPropertyChanging();
					this._NIP = value;
					this.SendPropertyChanged("NIP");
					this.OnNIPChanged();
				}
			}
		}
		
		[Column(Storage="_PayerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PayerName
		{
			get
			{
				return this._PayerName;
			}
			set
			{
				if ((this._PayerName != value))
				{
					this.OnPayerNameChanging(value);
					this.SendPropertyChanging();
					this._PayerName = value;
					this.SendPropertyChanged("PayerName");
					this.OnPayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_SendInvoiceToMultiline", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SendInvoiceToMultiline
		{
			get
			{
				return this._SendInvoiceToMultiline;
			}
			set
			{
				if ((this._SendInvoiceToMultiline != value))
				{
					this.OnSendInvoiceToMultilineChanging(value);
					this.SendPropertyChanging();
					this._SendInvoiceToMultiline = value;
					this.SendPropertyChanged("SendInvoiceToMultiline");
					this.OnSendInvoiceToMultilineChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_WorkCity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkCity
		{
			get
			{
				return this._WorkCity;
			}
			set
			{
				if ((this._WorkCity != value))
				{
					this.OnWorkCityChanging(value);
					this.SendPropertyChanging();
					this._WorkCity = value;
					this.SendPropertyChanged("WorkCity");
					this.OnWorkCityChanged();
				}
			}
		}
		
		[Column(Storage="_WorkCountry", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkCountry
		{
			get
			{
				return this._WorkCountry;
			}
			set
			{
				if ((this._WorkCountry != value))
				{
					this.OnWorkCountryChanging(value);
					this.SendPropertyChanging();
					this._WorkCountry = value;
					this.SendPropertyChanged("WorkCountry");
					this.OnWorkCountryChanged();
				}
			}
		}
		
		[Column(Storage="_WorkZip", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkZip
		{
			get
			{
				return this._WorkZip;
			}
			set
			{
				if ((this._WorkZip != value))
				{
					this.OnWorkZipChanging(value);
					this.SendPropertyChanging();
					this._WorkZip = value;
					this.SendPropertyChanged("WorkZip");
					this.OnWorkZipChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Route_FreightPayer", Storage="_Route", ThisKey="ID", OtherKey="FreightPayerID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		[Association(Name="FK_SecurityEscortRoute_FreightPayer", Storage="_SecurityEscortRoute", ThisKey="ID", OtherKey="FreightPayerID", DeleteRule="NO ACTION")]
		public EntitySet<SecurityEscortRoute> SecurityEscortRoute
		{
			get
			{
				return this._SecurityEscortRoute;
			}
			set
			{
				this._SecurityEscortRoute.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.FreightPayer = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.FreightPayer = null;
		}
		
		private void attach_SecurityEscortRoute(SecurityEscortRoute entity)
		{
			this.SendPropertyChanging();
			entity.FreightPayer = this;
		}
		
		private void detach_SecurityEscortRoute(SecurityEscortRoute entity)
		{
			this.SendPropertyChanging();
			entity.FreightPayer = null;
		}
	}
	
	[Table(Name="dbo.FreightPOLibrary")]
	public partial class FreightPOLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _DocumentCreatedBy;
		
		private string _Editor;
		
		private string _EmailAddress;
		
		private string _FileName;
		
		private System.Nullable<System.DateTime> _FPODispatchDate;
		
		private string _FPOFreightPO;
		
		private System.Nullable<System.DateTime> _FPOLoadingDate;
		
		private string _FPOWarehouseAddress;
		
		private string _FreightPOCity;
		
		private string _FreightPOCommodity;
		
		private string _FreightPOCountry;
		
		private string _FreightPOCurrency;
		
		private string _FreightPOForwarder;
		
		private string _FreightPOPayerAddress;
		
		private string _FreightPOPayerCity;
		
		private string _FreightPOPayerName;
		
		private string _FreightPOPayerNIP;
		
		private string _FreightPOPayerZip;
		
		private string _FreightPOSendInvoiceToMultiline;
		
		private System.Nullable<double> _FreightPOTransportCosts;
		
		private string _FreightPOTransportUnitType;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _DocumentModifiedBy;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Shipping> _Shipping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnDocumentCreatedByChanging(string value);
    partial void OnDocumentCreatedByChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFPODispatchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFPODispatchDateChanged();
    partial void OnFPOFreightPOChanging(string value);
    partial void OnFPOFreightPOChanged();
    partial void OnFPOLoadingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFPOLoadingDateChanged();
    partial void OnFPOWarehouseAddressChanging(string value);
    partial void OnFPOWarehouseAddressChanged();
    partial void OnFreightPOCityChanging(string value);
    partial void OnFreightPOCityChanged();
    partial void OnFreightPOCommodityChanging(string value);
    partial void OnFreightPOCommodityChanged();
    partial void OnFreightPOCountryChanging(string value);
    partial void OnFreightPOCountryChanged();
    partial void OnFreightPOCurrencyChanging(string value);
    partial void OnFreightPOCurrencyChanged();
    partial void OnFreightPOForwarderChanging(string value);
    partial void OnFreightPOForwarderChanged();
    partial void OnFreightPOPayerAddressChanging(string value);
    partial void OnFreightPOPayerAddressChanged();
    partial void OnFreightPOPayerCityChanging(string value);
    partial void OnFreightPOPayerCityChanged();
    partial void OnFreightPOPayerNameChanging(string value);
    partial void OnFreightPOPayerNameChanged();
    partial void OnFreightPOPayerNIPChanging(string value);
    partial void OnFreightPOPayerNIPChanged();
    partial void OnFreightPOPayerZipChanging(string value);
    partial void OnFreightPOPayerZipChanged();
    partial void OnFreightPOSendInvoiceToMultilineChanging(string value);
    partial void OnFreightPOSendInvoiceToMultilineChanged();
    partial void OnFreightPOTransportCostsChanging(System.Nullable<double> value);
    partial void OnFreightPOTransportCostsChanged();
    partial void OnFreightPOTransportUnitTypeChanging(string value);
    partial void OnFreightPOTransportUnitTypeChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnDocumentModifiedByChanging(string value);
    partial void OnDocumentModifiedByChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public FreightPOLibrary()
		{
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentCreatedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentCreatedBy
		{
			get
			{
				return this._DocumentCreatedBy;
			}
			set
			{
				if ((this._DocumentCreatedBy != value))
				{
					this.OnDocumentCreatedByChanging(value);
					this.SendPropertyChanging();
					this._DocumentCreatedBy = value;
					this.SendPropertyChanged("DocumentCreatedBy");
					this.OnDocumentCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FPODispatchDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FPODispatchDate
		{
			get
			{
				return this._FPODispatchDate;
			}
			set
			{
				if ((this._FPODispatchDate != value))
				{
					this.OnFPODispatchDateChanging(value);
					this.SendPropertyChanging();
					this._FPODispatchDate = value;
					this.SendPropertyChanged("FPODispatchDate");
					this.OnFPODispatchDateChanged();
				}
			}
		}
		
		[Column(Storage="_FPOFreightPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FPOFreightPO
		{
			get
			{
				return this._FPOFreightPO;
			}
			set
			{
				if ((this._FPOFreightPO != value))
				{
					this.OnFPOFreightPOChanging(value);
					this.SendPropertyChanging();
					this._FPOFreightPO = value;
					this.SendPropertyChanged("FPOFreightPO");
					this.OnFPOFreightPOChanged();
				}
			}
		}
		
		[Column(Storage="_FPOLoadingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FPOLoadingDate
		{
			get
			{
				return this._FPOLoadingDate;
			}
			set
			{
				if ((this._FPOLoadingDate != value))
				{
					this.OnFPOLoadingDateChanging(value);
					this.SendPropertyChanging();
					this._FPOLoadingDate = value;
					this.SendPropertyChanged("FPOLoadingDate");
					this.OnFPOLoadingDateChanged();
				}
			}
		}
		
		[Column(Storage="_FPOWarehouseAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FPOWarehouseAddress
		{
			get
			{
				return this._FPOWarehouseAddress;
			}
			set
			{
				if ((this._FPOWarehouseAddress != value))
				{
					this.OnFPOWarehouseAddressChanging(value);
					this.SendPropertyChanging();
					this._FPOWarehouseAddress = value;
					this.SendPropertyChanged("FPOWarehouseAddress");
					this.OnFPOWarehouseAddressChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOCity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOCity
		{
			get
			{
				return this._FreightPOCity;
			}
			set
			{
				if ((this._FreightPOCity != value))
				{
					this.OnFreightPOCityChanging(value);
					this.SendPropertyChanging();
					this._FreightPOCity = value;
					this.SendPropertyChanged("FreightPOCity");
					this.OnFreightPOCityChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOCommodity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOCommodity
		{
			get
			{
				return this._FreightPOCommodity;
			}
			set
			{
				if ((this._FreightPOCommodity != value))
				{
					this.OnFreightPOCommodityChanging(value);
					this.SendPropertyChanging();
					this._FreightPOCommodity = value;
					this.SendPropertyChanged("FreightPOCommodity");
					this.OnFreightPOCommodityChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOCountry", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOCountry
		{
			get
			{
				return this._FreightPOCountry;
			}
			set
			{
				if ((this._FreightPOCountry != value))
				{
					this.OnFreightPOCountryChanging(value);
					this.SendPropertyChanging();
					this._FreightPOCountry = value;
					this.SendPropertyChanged("FreightPOCountry");
					this.OnFreightPOCountryChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOCurrency", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOCurrency
		{
			get
			{
				return this._FreightPOCurrency;
			}
			set
			{
				if ((this._FreightPOCurrency != value))
				{
					this.OnFreightPOCurrencyChanging(value);
					this.SendPropertyChanging();
					this._FreightPOCurrency = value;
					this.SendPropertyChanged("FreightPOCurrency");
					this.OnFreightPOCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOForwarder", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOForwarder
		{
			get
			{
				return this._FreightPOForwarder;
			}
			set
			{
				if ((this._FreightPOForwarder != value))
				{
					this.OnFreightPOForwarderChanging(value);
					this.SendPropertyChanging();
					this._FreightPOForwarder = value;
					this.SendPropertyChanged("FreightPOForwarder");
					this.OnFreightPOForwarderChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOPayerAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOPayerAddress
		{
			get
			{
				return this._FreightPOPayerAddress;
			}
			set
			{
				if ((this._FreightPOPayerAddress != value))
				{
					this.OnFreightPOPayerAddressChanging(value);
					this.SendPropertyChanging();
					this._FreightPOPayerAddress = value;
					this.SendPropertyChanged("FreightPOPayerAddress");
					this.OnFreightPOPayerAddressChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOPayerCity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOPayerCity
		{
			get
			{
				return this._FreightPOPayerCity;
			}
			set
			{
				if ((this._FreightPOPayerCity != value))
				{
					this.OnFreightPOPayerCityChanging(value);
					this.SendPropertyChanging();
					this._FreightPOPayerCity = value;
					this.SendPropertyChanged("FreightPOPayerCity");
					this.OnFreightPOPayerCityChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOPayerName", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOPayerName
		{
			get
			{
				return this._FreightPOPayerName;
			}
			set
			{
				if ((this._FreightPOPayerName != value))
				{
					this.OnFreightPOPayerNameChanging(value);
					this.SendPropertyChanging();
					this._FreightPOPayerName = value;
					this.SendPropertyChanged("FreightPOPayerName");
					this.OnFreightPOPayerNameChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOPayerNIP", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOPayerNIP
		{
			get
			{
				return this._FreightPOPayerNIP;
			}
			set
			{
				if ((this._FreightPOPayerNIP != value))
				{
					this.OnFreightPOPayerNIPChanging(value);
					this.SendPropertyChanging();
					this._FreightPOPayerNIP = value;
					this.SendPropertyChanged("FreightPOPayerNIP");
					this.OnFreightPOPayerNIPChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOPayerZip", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOPayerZip
		{
			get
			{
				return this._FreightPOPayerZip;
			}
			set
			{
				if ((this._FreightPOPayerZip != value))
				{
					this.OnFreightPOPayerZipChanging(value);
					this.SendPropertyChanging();
					this._FreightPOPayerZip = value;
					this.SendPropertyChanged("FreightPOPayerZip");
					this.OnFreightPOPayerZipChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOSendInvoiceToMultiline", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOSendInvoiceToMultiline
		{
			get
			{
				return this._FreightPOSendInvoiceToMultiline;
			}
			set
			{
				if ((this._FreightPOSendInvoiceToMultiline != value))
				{
					this.OnFreightPOSendInvoiceToMultilineChanging(value);
					this.SendPropertyChanging();
					this._FreightPOSendInvoiceToMultiline = value;
					this.SendPropertyChanged("FreightPOSendInvoiceToMultiline");
					this.OnFreightPOSendInvoiceToMultilineChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOTransportCosts", DbType="Float")]
		public System.Nullable<double> FreightPOTransportCosts
		{
			get
			{
				return this._FreightPOTransportCosts;
			}
			set
			{
				if ((this._FreightPOTransportCosts != value))
				{
					this.OnFreightPOTransportCostsChanging(value);
					this.SendPropertyChanging();
					this._FreightPOTransportCosts = value;
					this.SendPropertyChanged("FreightPOTransportCosts");
					this.OnFreightPOTransportCostsChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOTransportUnitType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string FreightPOTransportUnitType
		{
			get
			{
				return this._FreightPOTransportUnitType;
			}
			set
			{
				if ((this._FreightPOTransportUnitType != value))
				{
					this.OnFreightPOTransportUnitTypeChanging(value);
					this.SendPropertyChanging();
					this._FreightPOTransportUnitType = value;
					this.SendPropertyChanged("FreightPOTransportUnitType");
					this.OnFreightPOTransportUnitTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentModifiedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentModifiedBy
		{
			get
			{
				return this._DocumentModifiedBy;
			}
			set
			{
				if ((this._DocumentModifiedBy != value))
				{
					this.OnDocumentModifiedByChanging(value);
					this.SendPropertyChanging();
					this._DocumentModifiedBy = value;
					this.SendPropertyChanged("DocumentModifiedBy");
					this.OnDocumentModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Shipping_FreightPOLibrary", Storage="_Shipping", ThisKey="ID", OtherKey="FreightPOID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.FreightPOLibrary = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.FreightPOLibrary = null;
		}
	}
	
	[Table(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ListName;
		
		private int _ItemID;
		
		private string _FieldName;
		
		private string _FieldValue;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private bool _OnlySQL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnListNameChanging(string value);
    partial void OnListNameChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnFieldValueChanging(string value);
    partial void OnFieldValueChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public History()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ListName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ListName
		{
			get
			{
				return this._ListName;
			}
			set
			{
				if ((this._ListName != value))
				{
					this.OnListNameChanging(value);
					this.SendPropertyChanging();
					this._ListName = value;
					this.SendPropertyChanged("ListName");
					this.OnListNameChanged();
				}
			}
		}
		
		[Column(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_FieldValue", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FieldValue
		{
			get
			{
				return this._FieldValue;
			}
			set
			{
				if ((this._FieldValue != value))
				{
					this.OnFieldValueChanging(value);
					this.SendPropertyChanging();
					this._FieldValue = value;
					this.SendPropertyChanged("FieldValue");
					this.OnFieldValueChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LoadDescription")]
	public partial class LoadDescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private string _CMRNumber;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _DeliveryNumber;
		
		private string _Editor;
		
		private System.Nullable<double> _GoodsQuantity;
		
		private int _ID;
		
		private string _InvoiceNumber;
		
		private System.Nullable<int> _CommodityID;
		
		private System.Nullable<int> _PartnerID;
		
		private System.Nullable<int> _ShippingID;
		
		private System.Nullable<int> _MarketID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<double> _NumberOfPallets;
		
		private string _PalletType;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<Commodity> _Commodity;
		
		private EntityRef<Market> _Market;
		
		private EntityRef<Partner> _Partner;
		
		private EntityRef<Shipping> _Shipping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCMRNumberChanging(string value);
    partial void OnCMRNumberChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnDeliveryNumberChanging(string value);
    partial void OnDeliveryNumberChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnGoodsQuantityChanging(System.Nullable<double> value);
    partial void OnGoodsQuantityChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceNumberChanging(string value);
    partial void OnInvoiceNumberChanged();
    partial void OnCommodityIDChanging(System.Nullable<int> value);
    partial void OnCommodityIDChanged();
    partial void OnPartnerIDChanging(System.Nullable<int> value);
    partial void OnPartnerIDChanged();
    partial void OnShippingIDChanging(System.Nullable<int> value);
    partial void OnShippingIDChanged();
    partial void OnMarketIDChanging(System.Nullable<int> value);
    partial void OnMarketIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnNumberOfPalletsChanging(System.Nullable<double> value);
    partial void OnNumberOfPalletsChanged();
    partial void OnPalletTypeChanging(string value);
    partial void OnPalletTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public LoadDescription()
		{
			this._Commodity = default(EntityRef<Commodity>);
			this._Market = default(EntityRef<Market>);
			this._Partner = default(EntityRef<Partner>);
			this._Shipping = default(EntityRef<Shipping>);
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CMRNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CMRNumber
		{
			get
			{
				return this._CMRNumber;
			}
			set
			{
				if ((this._CMRNumber != value))
				{
					this.OnCMRNumberChanging(value);
					this.SendPropertyChanging();
					this._CMRNumber = value;
					this.SendPropertyChanged("CMRNumber");
					this.OnCMRNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DeliveryNumber
		{
			get
			{
				return this._DeliveryNumber;
			}
			set
			{
				if ((this._DeliveryNumber != value))
				{
					this.OnDeliveryNumberChanging(value);
					this.SendPropertyChanging();
					this._DeliveryNumber = value;
					this.SendPropertyChanged("DeliveryNumber");
					this.OnDeliveryNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsQuantity", DbType="Float")]
		public System.Nullable<double> GoodsQuantity
		{
			get
			{
				return this._GoodsQuantity;
			}
			set
			{
				if ((this._GoodsQuantity != value))
				{
					this.OnGoodsQuantityChanging(value);
					this.SendPropertyChanging();
					this._GoodsQuantity = value;
					this.SendPropertyChanged("GoodsQuantity");
					this.OnGoodsQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this.OnInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNumber = value;
					this.SendPropertyChanged("InvoiceNumber");
					this.OnInvoiceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CommodityID", DbType="Int")]
		public System.Nullable<int> CommodityID
		{
			get
			{
				return this._CommodityID;
			}
			set
			{
				if ((this._CommodityID != value))
				{
					if (this._Commodity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommodityIDChanging(value);
					this.SendPropertyChanging();
					this._CommodityID = value;
					this.SendPropertyChanged("CommodityID");
					this.OnCommodityIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int")]
		public System.Nullable<int> PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingID", DbType="Int")]
		public System.Nullable<int> ShippingID
		{
			get
			{
				return this._ShippingID;
			}
			set
			{
				if ((this._ShippingID != value))
				{
					if (this._Shipping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShippingIDChanging(value);
					this.SendPropertyChanging();
					this._ShippingID = value;
					this.SendPropertyChanged("ShippingID");
					this.OnShippingIDChanged();
				}
			}
		}
		
		[Column(Storage="_MarketID", DbType="Int")]
		public System.Nullable<int> MarketID
		{
			get
			{
				return this._MarketID;
			}
			set
			{
				if ((this._MarketID != value))
				{
					if (this._Market.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarketIDChanging(value);
					this.SendPropertyChanging();
					this._MarketID = value;
					this.SendPropertyChanged("MarketID");
					this.OnMarketIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_NumberOfPallets", DbType="Float")]
		public System.Nullable<double> NumberOfPallets
		{
			get
			{
				return this._NumberOfPallets;
			}
			set
			{
				if ((this._NumberOfPallets != value))
				{
					this.OnNumberOfPalletsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPallets = value;
					this.SendPropertyChanged("NumberOfPallets");
					this.OnNumberOfPalletsChanged();
				}
			}
		}
		
		[Column(Storage="_PalletType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PalletType
		{
			get
			{
				return this._PalletType;
			}
			set
			{
				if ((this._PalletType != value))
				{
					this.OnPalletTypeChanging(value);
					this.SendPropertyChanging();
					this._PalletType = value;
					this.SendPropertyChanged("PalletType");
					this.OnPalletTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_LoadDescription_Commodity", Storage="_Commodity", ThisKey="CommodityID", OtherKey="ID", IsForeignKey=true)]
		public Commodity Commodity
		{
			get
			{
				return this._Commodity.Entity;
			}
			set
			{
				Commodity previousValue = this._Commodity.Entity;
				if (((previousValue != value) 
							|| (this._Commodity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commodity.Entity = null;
						previousValue.LoadDescription.Remove(this);
					}
					this._Commodity.Entity = value;
					if ((value != null))
					{
						value.LoadDescription.Add(this);
						this._CommodityID = value.ID;
					}
					else
					{
						this._CommodityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Commodity");
				}
			}
		}
		
		[Association(Name="FK_LoadDescription_Market", Storage="_Market", ThisKey="MarketID", OtherKey="ID", IsForeignKey=true)]
		public Market Market
		{
			get
			{
				return this._Market.Entity;
			}
			set
			{
				Market previousValue = this._Market.Entity;
				if (((previousValue != value) 
							|| (this._Market.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Market.Entity = null;
						previousValue.LoadDescription.Remove(this);
					}
					this._Market.Entity = value;
					if ((value != null))
					{
						value.LoadDescription.Add(this);
						this._MarketID = value.ID;
					}
					else
					{
						this._MarketID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Market");
				}
			}
		}
		
		[Association(Name="FK_LoadDescription_Partner", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.LoadDescription.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.LoadDescription.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		[Association(Name="FK_LoadDescription_Shipping", Storage="_Shipping", ThisKey="ShippingID", OtherKey="ID", IsForeignKey=true)]
		public Shipping Shipping
		{
			get
			{
				return this._Shipping.Entity;
			}
			set
			{
				Shipping previousValue = this._Shipping.Entity;
				if (((previousValue != value) 
							|| (this._Shipping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shipping.Entity = null;
						previousValue.LoadDescription.Remove(this);
					}
					this._Shipping.Entity = value;
					if ((value != null))
					{
						value.LoadDescription.Add(this);
						this._ShippingID = value.ID;
					}
					else
					{
						this._ShippingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Shipping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Market")]
	public partial class Market : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<DestinationMarket> _DestinationMarket;
		
		private EntitySet<LoadDescription> _LoadDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Market()
		{
			this._DestinationMarket = new EntitySet<DestinationMarket>(new Action<DestinationMarket>(this.attach_DestinationMarket), new Action<DestinationMarket>(this.detach_DestinationMarket));
			this._LoadDescription = new EntitySet<LoadDescription>(new Action<LoadDescription>(this.attach_LoadDescription), new Action<LoadDescription>(this.detach_LoadDescription));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_DestinationMarket_Market", Storage="_DestinationMarket", ThisKey="ID", OtherKey="MarketID", DeleteRule="NO ACTION")]
		public EntitySet<DestinationMarket> DestinationMarket
		{
			get
			{
				return this._DestinationMarket;
			}
			set
			{
				this._DestinationMarket.Assign(value);
			}
		}
		
		[Association(Name="FK_LoadDescription_Market", Storage="_LoadDescription", ThisKey="ID", OtherKey="MarketID", DeleteRule="NO ACTION")]
		public EntitySet<LoadDescription> LoadDescription
		{
			get
			{
				return this._LoadDescription;
			}
			set
			{
				this._LoadDescription.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DestinationMarket(DestinationMarket entity)
		{
			this.SendPropertyChanging();
			entity.Market = this;
		}
		
		private void detach_DestinationMarket(DestinationMarket entity)
		{
			this.SendPropertyChanging();
			entity.Market = null;
		}
		
		private void attach_LoadDescription(LoadDescription entity)
		{
			this.SendPropertyChanging();
			entity.Market = this;
		}
		
		private void detach_LoadDescription(LoadDescription entity)
		{
			this.SendPropertyChanging();
			entity.Market = null;
		}
	}
	
	[Table(Name="dbo.Partner")]
	public partial class Partner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private string _CellPhone;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private string _EmailAddress;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<int> _WarehouseID;
		
		private string _ServiceType;
		
		private string _ShepherdUser;
		
		private string _Title;
		
		private string _VendorNumber;
		
		private string _WorkPhone;
		
		private bool _OnlySQL;
		
		private EntitySet<CarrierPerformanceReport> _CarrierPerformanceReport;
		
		private EntitySet<Driver> _Driver;
		
		private EntitySet<LoadDescription> _LoadDescription;
		
		private EntityRef<Warehouse> _Warehouse;
		
		private EntitySet<Route> _Route;
		
		private EntitySet<SecurityEscortRoute> _SecurityEscortRoute;
		
		private EntitySet<Shipping> _Shipping;
		
		private EntitySet<Shipping> _Shipping_PartnerEscort;
		
		private EntitySet<Trailer> _Trailer;
		
		private EntitySet<Truck> _Truck;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnWarehouseIDChanging(System.Nullable<int> value);
    partial void OnWarehouseIDChanged();
    partial void OnServiceTypeChanging(string value);
    partial void OnServiceTypeChanged();
    partial void OnShepherdUserChanging(string value);
    partial void OnShepherdUserChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnVendorNumberChanging(string value);
    partial void OnVendorNumberChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Partner()
		{
			this._CarrierPerformanceReport = new EntitySet<CarrierPerformanceReport>(new Action<CarrierPerformanceReport>(this.attach_CarrierPerformanceReport), new Action<CarrierPerformanceReport>(this.detach_CarrierPerformanceReport));
			this._Driver = new EntitySet<Driver>(new Action<Driver>(this.attach_Driver), new Action<Driver>(this.detach_Driver));
			this._LoadDescription = new EntitySet<LoadDescription>(new Action<LoadDescription>(this.attach_LoadDescription), new Action<LoadDescription>(this.detach_LoadDescription));
			this._Warehouse = default(EntityRef<Warehouse>);
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			this._SecurityEscortRoute = new EntitySet<SecurityEscortRoute>(new Action<SecurityEscortRoute>(this.attach_SecurityEscortRoute), new Action<SecurityEscortRoute>(this.detach_SecurityEscortRoute));
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			this._Shipping_PartnerEscort = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping_PartnerEscort), new Action<Shipping>(this.detach_Shipping_PartnerEscort));
			this._Trailer = new EntitySet<Trailer>(new Action<Trailer>(this.attach_Trailer), new Action<Trailer>(this.detach_Trailer));
			this._Truck = new EntitySet<Truck>(new Action<Truck>(this.attach_Truck), new Action<Truck>(this.detach_Truck));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CellPhone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseID", DbType="Int")]
		public System.Nullable<int> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ServiceType
		{
			get
			{
				return this._ServiceType;
			}
			set
			{
				if ((this._ServiceType != value))
				{
					this.OnServiceTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceType = value;
					this.SendPropertyChanged("ServiceType");
					this.OnServiceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ShepherdUser", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShepherdUser
		{
			get
			{
				return this._ShepherdUser;
			}
			set
			{
				if ((this._ShepherdUser != value))
				{
					this.OnShepherdUserChanging(value);
					this.SendPropertyChanging();
					this._ShepherdUser = value;
					this.SendPropertyChanged("ShepherdUser");
					this.OnShepherdUserChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_VendorNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string VendorNumber
		{
			get
			{
				return this._VendorNumber;
			}
			set
			{
				if ((this._VendorNumber != value))
				{
					this.OnVendorNumberChanging(value);
					this.SendPropertyChanging();
					this._VendorNumber = value;
					this.SendPropertyChanged("VendorNumber");
					this.OnVendorNumberChanged();
				}
			}
		}
		
		[Column(Storage="_WorkPhone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_CarrierPerformanceReport_Partner", Storage="_CarrierPerformanceReport", ThisKey="ID", OtherKey="PartnerID", DeleteRule="NO ACTION")]
		public EntitySet<CarrierPerformanceReport> CarrierPerformanceReport
		{
			get
			{
				return this._CarrierPerformanceReport;
			}
			set
			{
				this._CarrierPerformanceReport.Assign(value);
			}
		}
		
		[Association(Name="FK_Driver_Partner", Storage="_Driver", ThisKey="ID", OtherKey="PartnerID", DeleteRule="NO ACTION")]
		public EntitySet<Driver> Driver
		{
			get
			{
				return this._Driver;
			}
			set
			{
				this._Driver.Assign(value);
			}
		}
		
		[Association(Name="FK_LoadDescription_Partner", Storage="_LoadDescription", ThisKey="ID", OtherKey="PartnerID", DeleteRule="NO ACTION")]
		public EntitySet<LoadDescription> LoadDescription
		{
			get
			{
				return this._LoadDescription;
			}
			set
			{
				this._LoadDescription.Assign(value);
			}
		}
		
		[Association(Name="FK_Partner_Warehouse", Storage="_Warehouse", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.Partner.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.Partner.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		[Association(Name="FK_Route_Partner", Storage="_Route", ThisKey="ID", OtherKey="PartnerID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		[Association(Name="FK_SecurityEscortRoute_Partner", Storage="_SecurityEscortRoute", ThisKey="ID", OtherKey="PartnerID", DeleteRule="NO ACTION")]
		public EntitySet<SecurityEscortRoute> SecurityEscortRoute
		{
			get
			{
				return this._SecurityEscortRoute;
			}
			set
			{
				this._SecurityEscortRoute.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_Partner", Storage="_Shipping", ThisKey="ID", OtherKey="PartnerID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_PartnerEscort", Storage="_Shipping_PartnerEscort", ThisKey="ID", OtherKey="EscortPartnerID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping_PartnerEscort
		{
			get
			{
				return this._Shipping_PartnerEscort;
			}
			set
			{
				this._Shipping_PartnerEscort.Assign(value);
			}
		}
		
		[Association(Name="FK_Trailer_Partner", Storage="_Trailer", ThisKey="ID", OtherKey="PartnerID", DeleteRule="NO ACTION")]
		public EntitySet<Trailer> Trailer
		{
			get
			{
				return this._Trailer;
			}
			set
			{
				this._Trailer.Assign(value);
			}
		}
		
		[Association(Name="FK_Truck_Partner", Storage="_Truck", ThisKey="ID", OtherKey="PartnerID", DeleteRule="NO ACTION")]
		public EntitySet<Truck> Truck
		{
			get
			{
				return this._Truck;
			}
			set
			{
				this._Truck.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarrierPerformanceReport(CarrierPerformanceReport entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_CarrierPerformanceReport(CarrierPerformanceReport entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
		
		private void attach_Driver(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_Driver(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
		
		private void attach_LoadDescription(LoadDescription entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_LoadDescription(LoadDescription entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
		
		private void attach_SecurityEscortRoute(SecurityEscortRoute entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_SecurityEscortRoute(SecurityEscortRoute entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
		
		private void attach_Shipping_PartnerEscort(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.EscortPartner = this;
		}
		
		private void detach_Shipping_PartnerEscort(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.EscortPartner = null;
		}
		
		private void attach_Trailer(Trailer entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_Trailer(Trailer entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
		
		private void attach_Truck(Truck entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_Truck(Truck entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
	}
	
	[Table(Name="dbo.Route")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<int> _CarrierID;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<int> _CurrencyID;
		
		private string _DepartureCity;
		
		private string _DeparturePort;
		
		private string _Editor;
		
		private System.Nullable<int> _FreightPayerID;
		
		private string _GoodsHandlingPO;
		
		private int _ID;
		
		private string _Incoterm;
		
		private string _MaterialMaster;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<int> _PartnerID;
		
		private string _RemarkMM;
		
		private System.Nullable<int> _BusinessDescriptionID;
		
		private System.Nullable<int> _CityID;
		
		private System.Nullable<int> _CommodityID;
		
		private System.Nullable<int> _SAPDestinationPlantID;
		
		private System.Nullable<int> _ShipmentTypeID;
		
		private string _Title;
		
		private System.Nullable<double> _TransportCosts;
		
		private System.Nullable<int> _TransportUnitTypeID;
		
		private bool _OnlySQL;
		
		private EntityRef<BusinessDescription> _BusinessDescription;
		
		private EntityRef<Carrier> _Carrier;
		
		private EntityRef<City> _City;
		
		private EntityRef<Commodity> _Commodity;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<FreightPayer> _FreightPayer;
		
		private EntityRef<Partner> _Partner;
		
		private EntityRef<SAPDestinationPlant> _SAPDestinationPlant;
		
		private EntityRef<ShipmentType> _ShipmentType;
		
		private EntityRef<TransportUnitType> _TransportUnitType;
		
		private EntitySet<Shipping> _Shipping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCarrierIDChanging(System.Nullable<int> value);
    partial void OnCarrierIDChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    partial void OnDepartureCityChanging(string value);
    partial void OnDepartureCityChanged();
    partial void OnDeparturePortChanging(string value);
    partial void OnDeparturePortChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnFreightPayerIDChanging(System.Nullable<int> value);
    partial void OnFreightPayerIDChanged();
    partial void OnGoodsHandlingPOChanging(string value);
    partial void OnGoodsHandlingPOChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIncotermChanging(string value);
    partial void OnIncotermChanged();
    partial void OnMaterialMasterChanging(string value);
    partial void OnMaterialMasterChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnPartnerIDChanging(System.Nullable<int> value);
    partial void OnPartnerIDChanged();
    partial void OnRemarkMMChanging(string value);
    partial void OnRemarkMMChanged();
    partial void OnBusinessDescriptionIDChanging(System.Nullable<int> value);
    partial void OnBusinessDescriptionIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnCommodityIDChanging(System.Nullable<int> value);
    partial void OnCommodityIDChanged();
    partial void OnSAPDestinationPlantIDChanging(System.Nullable<int> value);
    partial void OnSAPDestinationPlantIDChanged();
    partial void OnShipmentTypeIDChanging(System.Nullable<int> value);
    partial void OnShipmentTypeIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTransportCostsChanging(System.Nullable<double> value);
    partial void OnTransportCostsChanged();
    partial void OnTransportUnitTypeIDChanging(System.Nullable<int> value);
    partial void OnTransportUnitTypeIDChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Route()
		{
			this._BusinessDescription = default(EntityRef<BusinessDescription>);
			this._Carrier = default(EntityRef<Carrier>);
			this._City = default(EntityRef<City>);
			this._Commodity = default(EntityRef<Commodity>);
			this._Currency = default(EntityRef<Currency>);
			this._FreightPayer = default(EntityRef<FreightPayer>);
			this._Partner = default(EntityRef<Partner>);
			this._SAPDestinationPlant = default(EntityRef<SAPDestinationPlant>);
			this._ShipmentType = default(EntityRef<ShipmentType>);
			this._TransportUnitType = default(EntityRef<TransportUnitType>);
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CarrierID", DbType="Int")]
		public System.Nullable<int> CarrierID
		{
			get
			{
				return this._CarrierID;
			}
			set
			{
				if ((this._CarrierID != value))
				{
					if (this._Carrier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarrierIDChanging(value);
					this.SendPropertyChanging();
					this._CarrierID = value;
					this.SendPropertyChanged("CarrierID");
					this.OnCarrierIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyID", DbType="Int")]
		public System.Nullable<int> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartureCity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DepartureCity
		{
			get
			{
				return this._DepartureCity;
			}
			set
			{
				if ((this._DepartureCity != value))
				{
					this.OnDepartureCityChanging(value);
					this.SendPropertyChanging();
					this._DepartureCity = value;
					this.SendPropertyChanged("DepartureCity");
					this.OnDepartureCityChanged();
				}
			}
		}
		
		[Column(Storage="_DeparturePort", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DeparturePort
		{
			get
			{
				return this._DeparturePort;
			}
			set
			{
				if ((this._DeparturePort != value))
				{
					this.OnDeparturePortChanging(value);
					this.SendPropertyChanging();
					this._DeparturePort = value;
					this.SendPropertyChanged("DeparturePort");
					this.OnDeparturePortChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPayerID", DbType="Int")]
		public System.Nullable<int> FreightPayerID
		{
			get
			{
				return this._FreightPayerID;
			}
			set
			{
				if ((this._FreightPayerID != value))
				{
					if (this._FreightPayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFreightPayerIDChanging(value);
					this.SendPropertyChanging();
					this._FreightPayerID = value;
					this.SendPropertyChanged("FreightPayerID");
					this.OnFreightPayerIDChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsHandlingPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string GoodsHandlingPO
		{
			get
			{
				return this._GoodsHandlingPO;
			}
			set
			{
				if ((this._GoodsHandlingPO != value))
				{
					this.OnGoodsHandlingPOChanging(value);
					this.SendPropertyChanging();
					this._GoodsHandlingPO = value;
					this.SendPropertyChanged("GoodsHandlingPO");
					this.OnGoodsHandlingPOChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Incoterm", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Incoterm
		{
			get
			{
				return this._Incoterm;
			}
			set
			{
				if ((this._Incoterm != value))
				{
					this.OnIncotermChanging(value);
					this.SendPropertyChanging();
					this._Incoterm = value;
					this.SendPropertyChanged("Incoterm");
					this.OnIncotermChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialMaster", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string MaterialMaster
		{
			get
			{
				return this._MaterialMaster;
			}
			set
			{
				if ((this._MaterialMaster != value))
				{
					this.OnMaterialMasterChanging(value);
					this.SendPropertyChanging();
					this._MaterialMaster = value;
					this.SendPropertyChanged("MaterialMaster");
					this.OnMaterialMasterChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int")]
		public System.Nullable<int> PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_RemarkMM", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RemarkMM
		{
			get
			{
				return this._RemarkMM;
			}
			set
			{
				if ((this._RemarkMM != value))
				{
					this.OnRemarkMMChanging(value);
					this.SendPropertyChanging();
					this._RemarkMM = value;
					this.SendPropertyChanged("RemarkMM");
					this.OnRemarkMMChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessDescriptionID", DbType="Int")]
		public System.Nullable<int> BusinessDescriptionID
		{
			get
			{
				return this._BusinessDescriptionID;
			}
			set
			{
				if ((this._BusinessDescriptionID != value))
				{
					if (this._BusinessDescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessDescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessDescriptionID = value;
					this.SendPropertyChanged("BusinessDescriptionID");
					this.OnBusinessDescriptionIDChanged();
				}
			}
		}
		
		[Column(Storage="_CityID", DbType="Int")]
		public System.Nullable<int> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[Column(Storage="_CommodityID", DbType="Int")]
		public System.Nullable<int> CommodityID
		{
			get
			{
				return this._CommodityID;
			}
			set
			{
				if ((this._CommodityID != value))
				{
					if (this._Commodity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommodityIDChanging(value);
					this.SendPropertyChanging();
					this._CommodityID = value;
					this.SendPropertyChanged("CommodityID");
					this.OnCommodityIDChanged();
				}
			}
		}
		
		[Column(Storage="_SAPDestinationPlantID", DbType="Int")]
		public System.Nullable<int> SAPDestinationPlantID
		{
			get
			{
				return this._SAPDestinationPlantID;
			}
			set
			{
				if ((this._SAPDestinationPlantID != value))
				{
					if (this._SAPDestinationPlant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSAPDestinationPlantIDChanging(value);
					this.SendPropertyChanging();
					this._SAPDestinationPlantID = value;
					this.SendPropertyChanged("SAPDestinationPlantID");
					this.OnSAPDestinationPlantIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShipmentTypeID", DbType="Int")]
		public System.Nullable<int> ShipmentTypeID
		{
			get
			{
				return this._ShipmentTypeID;
			}
			set
			{
				if ((this._ShipmentTypeID != value))
				{
					if (this._ShipmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShipmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ShipmentTypeID = value;
					this.SendPropertyChanged("ShipmentTypeID");
					this.OnShipmentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TransportCosts", DbType="Float")]
		public System.Nullable<double> TransportCosts
		{
			get
			{
				return this._TransportCosts;
			}
			set
			{
				if ((this._TransportCosts != value))
				{
					this.OnTransportCostsChanging(value);
					this.SendPropertyChanging();
					this._TransportCosts = value;
					this.SendPropertyChanged("TransportCosts");
					this.OnTransportCostsChanged();
				}
			}
		}
		
		[Column(Storage="_TransportUnitTypeID", DbType="Int")]
		public System.Nullable<int> TransportUnitTypeID
		{
			get
			{
				return this._TransportUnitTypeID;
			}
			set
			{
				if ((this._TransportUnitTypeID != value))
				{
					if (this._TransportUnitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransportUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TransportUnitTypeID = value;
					this.SendPropertyChanged("TransportUnitTypeID");
					this.OnTransportUnitTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Route_BusinessDescription", Storage="_BusinessDescription", ThisKey="BusinessDescriptionID", OtherKey="ID", IsForeignKey=true)]
		public BusinessDescription BusinessDescription
		{
			get
			{
				return this._BusinessDescription.Entity;
			}
			set
			{
				BusinessDescription previousValue = this._BusinessDescription.Entity;
				if (((previousValue != value) 
							|| (this._BusinessDescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessDescription.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._BusinessDescription.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._BusinessDescriptionID = value.ID;
					}
					else
					{
						this._BusinessDescriptionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BusinessDescription");
				}
			}
		}
		
		[Association(Name="FK_Route_Carrier", Storage="_Carrier", ThisKey="CarrierID", OtherKey="ID", IsForeignKey=true)]
		public Carrier Carrier
		{
			get
			{
				return this._Carrier.Entity;
			}
			set
			{
				Carrier previousValue = this._Carrier.Entity;
				if (((previousValue != value) 
							|| (this._Carrier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Carrier.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._Carrier.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._CarrierID = value.ID;
					}
					else
					{
						this._CarrierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Carrier");
				}
			}
		}
		
		[Association(Name="FK_Route_City", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="FK_Route_Commodity", Storage="_Commodity", ThisKey="CommodityID", OtherKey="ID", IsForeignKey=true)]
		public Commodity Commodity
		{
			get
			{
				return this._Commodity.Entity;
			}
			set
			{
				Commodity previousValue = this._Commodity.Entity;
				if (((previousValue != value) 
							|| (this._Commodity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commodity.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._Commodity.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._CommodityID = value.ID;
					}
					else
					{
						this._CommodityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Commodity");
				}
			}
		}
		
		[Association(Name="FK_Route_Currency", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[Association(Name="FK_Route_FreightPayer", Storage="_FreightPayer", ThisKey="FreightPayerID", OtherKey="ID", IsForeignKey=true)]
		public FreightPayer FreightPayer
		{
			get
			{
				return this._FreightPayer.Entity;
			}
			set
			{
				FreightPayer previousValue = this._FreightPayer.Entity;
				if (((previousValue != value) 
							|| (this._FreightPayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FreightPayer.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._FreightPayer.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._FreightPayerID = value.ID;
					}
					else
					{
						this._FreightPayerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FreightPayer");
				}
			}
		}
		
		[Association(Name="FK_Route_Partner", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		[Association(Name="FK_Route_SAPDestinationPlant", Storage="_SAPDestinationPlant", ThisKey="SAPDestinationPlantID", OtherKey="ID", IsForeignKey=true)]
		public SAPDestinationPlant SAPDestinationPlant
		{
			get
			{
				return this._SAPDestinationPlant.Entity;
			}
			set
			{
				SAPDestinationPlant previousValue = this._SAPDestinationPlant.Entity;
				if (((previousValue != value) 
							|| (this._SAPDestinationPlant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SAPDestinationPlant.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._SAPDestinationPlant.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._SAPDestinationPlantID = value.ID;
					}
					else
					{
						this._SAPDestinationPlantID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SAPDestinationPlant");
				}
			}
		}
		
		[Association(Name="FK_Route_ShipmentType", Storage="_ShipmentType", ThisKey="ShipmentTypeID", OtherKey="ID", IsForeignKey=true)]
		public ShipmentType ShipmentType
		{
			get
			{
				return this._ShipmentType.Entity;
			}
			set
			{
				ShipmentType previousValue = this._ShipmentType.Entity;
				if (((previousValue != value) 
							|| (this._ShipmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShipmentType.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._ShipmentType.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._ShipmentTypeID = value.ID;
					}
					else
					{
						this._ShipmentTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ShipmentType");
				}
			}
		}
		
		[Association(Name="FK_Route_TransportUnitType", Storage="_TransportUnitType", ThisKey="TransportUnitTypeID", OtherKey="ID", IsForeignKey=true)]
		public TransportUnitType TransportUnitType
		{
			get
			{
				return this._TransportUnitType.Entity;
			}
			set
			{
				TransportUnitType previousValue = this._TransportUnitType.Entity;
				if (((previousValue != value) 
							|| (this._TransportUnitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransportUnitType.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._TransportUnitType.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._TransportUnitTypeID = value.ID;
					}
					else
					{
						this._TransportUnitTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransportUnitType");
				}
			}
		}
		
		[Association(Name="FK_Shipping_Route", Storage="_Shipping", ThisKey="ID", OtherKey="RouteID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[Table(Name="dbo.SAPDestinationPlant")]
	public partial class SAPDestinationPlant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public SAPDestinationPlant()
		{
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Route_SAPDestinationPlant", Storage="_Route", ThisKey="ID", OtherKey="SAPDestinationPlantID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.SAPDestinationPlant = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.SAPDestinationPlant = null;
		}
	}
	
	[Table(Name="dbo.ScheduleTemplate")]
	public partial class ScheduleTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<int> _ShippingPointLookupTitle;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<ShippingPoint> _ShippingPoint;
		
		private EntitySet<TimeSlotsTemplate> _TimeSlotsTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnShippingPointLookupTitleChanging(System.Nullable<int> value);
    partial void OnShippingPointLookupTitleChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public ScheduleTemplate()
		{
			this._ShippingPoint = default(EntityRef<ShippingPoint>);
			this._TimeSlotsTemplate = new EntitySet<TimeSlotsTemplate>(new Action<TimeSlotsTemplate>(this.attach_TimeSlotsTemplate), new Action<TimeSlotsTemplate>(this.detach_TimeSlotsTemplate));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingPointLookupTitle", DbType="Int")]
		public System.Nullable<int> ShippingPointLookupTitle
		{
			get
			{
				return this._ShippingPointLookupTitle;
			}
			set
			{
				if ((this._ShippingPointLookupTitle != value))
				{
					if (this._ShippingPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShippingPointLookupTitleChanging(value);
					this.SendPropertyChanging();
					this._ShippingPointLookupTitle = value;
					this.SendPropertyChanged("ShippingPointLookupTitle");
					this.OnShippingPointLookupTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_ScheduleTemplate_ShippingPoint", Storage="_ShippingPoint", ThisKey="ShippingPointLookupTitle", OtherKey="ID", IsForeignKey=true)]
		public ShippingPoint ShippingPoint
		{
			get
			{
				return this._ShippingPoint.Entity;
			}
			set
			{
				ShippingPoint previousValue = this._ShippingPoint.Entity;
				if (((previousValue != value) 
							|| (this._ShippingPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShippingPoint.Entity = null;
						previousValue.ScheduleTemplate.Remove(this);
					}
					this._ShippingPoint.Entity = value;
					if ((value != null))
					{
						value.ScheduleTemplate.Add(this);
						this._ShippingPointLookupTitle = value.ID;
					}
					else
					{
						this._ShippingPointLookupTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("ShippingPoint");
				}
			}
		}
		
		[Association(Name="FK_TimeSlotsTemplate_ScheduleTemplate", Storage="_TimeSlotsTemplate", ThisKey="ID", OtherKey="ScheduleTemplateID", DeleteRule="NO ACTION")]
		public EntitySet<TimeSlotsTemplate> TimeSlotsTemplate
		{
			get
			{
				return this._TimeSlotsTemplate;
			}
			set
			{
				this._TimeSlotsTemplate.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeSlotsTemplate(TimeSlotsTemplate entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleTemplate = this;
		}
		
		private void detach_TimeSlotsTemplate(TimeSlotsTemplate entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleTemplate = null;
		}
	}
	
	[Table(Name="dbo.SealProtocolLibrary")]
	public partial class SealProtocolLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _DocumentCreatedBy;
		
		private string _Editor;
		
		private string _FileName;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _DocumentModifiedBy;
		
		private string _SealProtocol1stDriver;
		
		private string _SealProtocol1stEscort;
		
		private string _SealProtocol2ndDriver;
		
		private string _SealProtocol2ndEscort;
		
		private string _SealProtocolCity;
		
		private string _SealProtocolContainersNo;
		
		private string _SealProtocolCountry;
		
		private System.Nullable<System.DateTime> _SealProtocolDispatchDate;
		
		private System.Nullable<System.DateTime> _SealProtocolDispatchDateActual;
		
		private string _SealProtocolDriverPhone;
		
		private string _SealProtocolEscortCarNo;
		
		private string _SealProtocolEscortPhone;
		
		private string _SealProtocolForwarder;
		
		private string _SealProtocolSecurityEscortProvider;
		
		private string _SealProtocolTrailerNo;
		
		private string _SealProtocolTruckNo;
		
		private string _SealProtocolWarehouse;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Shipping> _Shipping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnDocumentCreatedByChanging(string value);
    partial void OnDocumentCreatedByChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnDocumentModifiedByChanging(string value);
    partial void OnDocumentModifiedByChanged();
    partial void OnSealProtocol1stDriverChanging(string value);
    partial void OnSealProtocol1stDriverChanged();
    partial void OnSealProtocol1stEscortChanging(string value);
    partial void OnSealProtocol1stEscortChanged();
    partial void OnSealProtocol2ndDriverChanging(string value);
    partial void OnSealProtocol2ndDriverChanged();
    partial void OnSealProtocol2ndEscortChanging(string value);
    partial void OnSealProtocol2ndEscortChanged();
    partial void OnSealProtocolCityChanging(string value);
    partial void OnSealProtocolCityChanged();
    partial void OnSealProtocolContainersNoChanging(string value);
    partial void OnSealProtocolContainersNoChanged();
    partial void OnSealProtocolCountryChanging(string value);
    partial void OnSealProtocolCountryChanged();
    partial void OnSealProtocolDispatchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSealProtocolDispatchDateChanged();
    partial void OnSealProtocolDispatchDateActualChanging(System.Nullable<System.DateTime> value);
    partial void OnSealProtocolDispatchDateActualChanged();
    partial void OnSealProtocolDriverPhoneChanging(string value);
    partial void OnSealProtocolDriverPhoneChanged();
    partial void OnSealProtocolEscortCarNoChanging(string value);
    partial void OnSealProtocolEscortCarNoChanged();
    partial void OnSealProtocolEscortPhoneChanging(string value);
    partial void OnSealProtocolEscortPhoneChanged();
    partial void OnSealProtocolForwarderChanging(string value);
    partial void OnSealProtocolForwarderChanged();
    partial void OnSealProtocolSecurityEscortProviderChanging(string value);
    partial void OnSealProtocolSecurityEscortProviderChanged();
    partial void OnSealProtocolTrailerNoChanging(string value);
    partial void OnSealProtocolTrailerNoChanged();
    partial void OnSealProtocolTruckNoChanging(string value);
    partial void OnSealProtocolTruckNoChanged();
    partial void OnSealProtocolWarehouseChanging(string value);
    partial void OnSealProtocolWarehouseChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public SealProtocolLibrary()
		{
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentCreatedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentCreatedBy
		{
			get
			{
				return this._DocumentCreatedBy;
			}
			set
			{
				if ((this._DocumentCreatedBy != value))
				{
					this.OnDocumentCreatedByChanging(value);
					this.SendPropertyChanging();
					this._DocumentCreatedBy = value;
					this.SendPropertyChanged("DocumentCreatedBy");
					this.OnDocumentCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentModifiedBy", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentModifiedBy
		{
			get
			{
				return this._DocumentModifiedBy;
			}
			set
			{
				if ((this._DocumentModifiedBy != value))
				{
					this.OnDocumentModifiedByChanging(value);
					this.SendPropertyChanging();
					this._DocumentModifiedBy = value;
					this.SendPropertyChanged("DocumentModifiedBy");
					this.OnDocumentModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocol1stDriver", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocol1stDriver
		{
			get
			{
				return this._SealProtocol1stDriver;
			}
			set
			{
				if ((this._SealProtocol1stDriver != value))
				{
					this.OnSealProtocol1stDriverChanging(value);
					this.SendPropertyChanging();
					this._SealProtocol1stDriver = value;
					this.SendPropertyChanged("SealProtocol1stDriver");
					this.OnSealProtocol1stDriverChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocol1stEscort", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocol1stEscort
		{
			get
			{
				return this._SealProtocol1stEscort;
			}
			set
			{
				if ((this._SealProtocol1stEscort != value))
				{
					this.OnSealProtocol1stEscortChanging(value);
					this.SendPropertyChanging();
					this._SealProtocol1stEscort = value;
					this.SendPropertyChanged("SealProtocol1stEscort");
					this.OnSealProtocol1stEscortChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocol2ndDriver", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocol2ndDriver
		{
			get
			{
				return this._SealProtocol2ndDriver;
			}
			set
			{
				if ((this._SealProtocol2ndDriver != value))
				{
					this.OnSealProtocol2ndDriverChanging(value);
					this.SendPropertyChanging();
					this._SealProtocol2ndDriver = value;
					this.SendPropertyChanged("SealProtocol2ndDriver");
					this.OnSealProtocol2ndDriverChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocol2ndEscort", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocol2ndEscort
		{
			get
			{
				return this._SealProtocol2ndEscort;
			}
			set
			{
				if ((this._SealProtocol2ndEscort != value))
				{
					this.OnSealProtocol2ndEscortChanging(value);
					this.SendPropertyChanging();
					this._SealProtocol2ndEscort = value;
					this.SendPropertyChanged("SealProtocol2ndEscort");
					this.OnSealProtocol2ndEscortChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolCity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolCity
		{
			get
			{
				return this._SealProtocolCity;
			}
			set
			{
				if ((this._SealProtocolCity != value))
				{
					this.OnSealProtocolCityChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolCity = value;
					this.SendPropertyChanged("SealProtocolCity");
					this.OnSealProtocolCityChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolContainersNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolContainersNo
		{
			get
			{
				return this._SealProtocolContainersNo;
			}
			set
			{
				if ((this._SealProtocolContainersNo != value))
				{
					this.OnSealProtocolContainersNoChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolContainersNo = value;
					this.SendPropertyChanged("SealProtocolContainersNo");
					this.OnSealProtocolContainersNoChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolCountry", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolCountry
		{
			get
			{
				return this._SealProtocolCountry;
			}
			set
			{
				if ((this._SealProtocolCountry != value))
				{
					this.OnSealProtocolCountryChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolCountry = value;
					this.SendPropertyChanged("SealProtocolCountry");
					this.OnSealProtocolCountryChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolDispatchDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SealProtocolDispatchDate
		{
			get
			{
				return this._SealProtocolDispatchDate;
			}
			set
			{
				if ((this._SealProtocolDispatchDate != value))
				{
					this.OnSealProtocolDispatchDateChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolDispatchDate = value;
					this.SendPropertyChanged("SealProtocolDispatchDate");
					this.OnSealProtocolDispatchDateChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolDispatchDateActual", DbType="DateTime")]
		public System.Nullable<System.DateTime> SealProtocolDispatchDateActual
		{
			get
			{
				return this._SealProtocolDispatchDateActual;
			}
			set
			{
				if ((this._SealProtocolDispatchDateActual != value))
				{
					this.OnSealProtocolDispatchDateActualChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolDispatchDateActual = value;
					this.SendPropertyChanged("SealProtocolDispatchDateActual");
					this.OnSealProtocolDispatchDateActualChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolDriverPhone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolDriverPhone
		{
			get
			{
				return this._SealProtocolDriverPhone;
			}
			set
			{
				if ((this._SealProtocolDriverPhone != value))
				{
					this.OnSealProtocolDriverPhoneChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolDriverPhone = value;
					this.SendPropertyChanged("SealProtocolDriverPhone");
					this.OnSealProtocolDriverPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolEscortCarNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolEscortCarNo
		{
			get
			{
				return this._SealProtocolEscortCarNo;
			}
			set
			{
				if ((this._SealProtocolEscortCarNo != value))
				{
					this.OnSealProtocolEscortCarNoChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolEscortCarNo = value;
					this.SendPropertyChanged("SealProtocolEscortCarNo");
					this.OnSealProtocolEscortCarNoChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolEscortPhone", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolEscortPhone
		{
			get
			{
				return this._SealProtocolEscortPhone;
			}
			set
			{
				if ((this._SealProtocolEscortPhone != value))
				{
					this.OnSealProtocolEscortPhoneChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolEscortPhone = value;
					this.SendPropertyChanged("SealProtocolEscortPhone");
					this.OnSealProtocolEscortPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolForwarder", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolForwarder
		{
			get
			{
				return this._SealProtocolForwarder;
			}
			set
			{
				if ((this._SealProtocolForwarder != value))
				{
					this.OnSealProtocolForwarderChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolForwarder = value;
					this.SendPropertyChanged("SealProtocolForwarder");
					this.OnSealProtocolForwarderChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolSecurityEscortProvider", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolSecurityEscortProvider
		{
			get
			{
				return this._SealProtocolSecurityEscortProvider;
			}
			set
			{
				if ((this._SealProtocolSecurityEscortProvider != value))
				{
					this.OnSealProtocolSecurityEscortProviderChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolSecurityEscortProvider = value;
					this.SendPropertyChanged("SealProtocolSecurityEscortProvider");
					this.OnSealProtocolSecurityEscortProviderChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolTrailerNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolTrailerNo
		{
			get
			{
				return this._SealProtocolTrailerNo;
			}
			set
			{
				if ((this._SealProtocolTrailerNo != value))
				{
					this.OnSealProtocolTrailerNoChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolTrailerNo = value;
					this.SendPropertyChanged("SealProtocolTrailerNo");
					this.OnSealProtocolTrailerNoChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolTruckNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolTruckNo
		{
			get
			{
				return this._SealProtocolTruckNo;
			}
			set
			{
				if ((this._SealProtocolTruckNo != value))
				{
					this.OnSealProtocolTruckNoChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolTruckNo = value;
					this.SendPropertyChanged("SealProtocolTruckNo");
					this.OnSealProtocolTruckNoChanged();
				}
			}
		}
		
		[Column(Storage="_SealProtocolWarehouse", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SealProtocolWarehouse
		{
			get
			{
				return this._SealProtocolWarehouse;
			}
			set
			{
				if ((this._SealProtocolWarehouse != value))
				{
					this.OnSealProtocolWarehouseChanging(value);
					this.SendPropertyChanging();
					this._SealProtocolWarehouse = value;
					this.SendPropertyChanged("SealProtocolWarehouse");
					this.OnSealProtocolWarehouseChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Shipping_SealProtocolLibrary", Storage="_Shipping", ThisKey="ID", OtherKey="SecuritySealProtocolID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.SealProtocolLibrary = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.SealProtocolLibrary = null;
		}
	}
	
	[Table(Name="dbo.SecurityEscortRoute")]
	public partial class SecurityEscortRoute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<int> _CurrencyID;
		
		private string _Editor;
		
		private string _EscortDestination;
		
		private System.Nullable<int> _FreightPayerID;
		
		private int _ID;
		
		private string _MaterialMaster;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<int> _PartnerID;
		
		private string _RemarkMM;
		
		private System.Nullable<double> _SecurityCost;
		
		private System.Nullable<int> _BusinessDescriptionID;
		
		private string _SecurityEscrotPO;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntityRef<BusinessDescription> _BusinessDescription;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<FreightPayer> _FreightPayer;
		
		private EntityRef<Partner> _Partner;
		
		private EntitySet<Shipping> _Shipping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEscortDestinationChanging(string value);
    partial void OnEscortDestinationChanged();
    partial void OnFreightPayerIDChanging(System.Nullable<int> value);
    partial void OnFreightPayerIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMaterialMasterChanging(string value);
    partial void OnMaterialMasterChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnPartnerIDChanging(System.Nullable<int> value);
    partial void OnPartnerIDChanged();
    partial void OnRemarkMMChanging(string value);
    partial void OnRemarkMMChanged();
    partial void OnSecurityCostChanging(System.Nullable<double> value);
    partial void OnSecurityCostChanged();
    partial void OnBusinessDescriptionIDChanging(System.Nullable<int> value);
    partial void OnBusinessDescriptionIDChanged();
    partial void OnSecurityEscrotPOChanging(string value);
    partial void OnSecurityEscrotPOChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public SecurityEscortRoute()
		{
			this._BusinessDescription = default(EntityRef<BusinessDescription>);
			this._Currency = default(EntityRef<Currency>);
			this._FreightPayer = default(EntityRef<FreightPayer>);
			this._Partner = default(EntityRef<Partner>);
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyID", DbType="Int")]
		public System.Nullable<int> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EscortDestination", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EscortDestination
		{
			get
			{
				return this._EscortDestination;
			}
			set
			{
				if ((this._EscortDestination != value))
				{
					this.OnEscortDestinationChanging(value);
					this.SendPropertyChanging();
					this._EscortDestination = value;
					this.SendPropertyChanged("EscortDestination");
					this.OnEscortDestinationChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPayerID", DbType="Int")]
		public System.Nullable<int> FreightPayerID
		{
			get
			{
				return this._FreightPayerID;
			}
			set
			{
				if ((this._FreightPayerID != value))
				{
					if (this._FreightPayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFreightPayerIDChanging(value);
					this.SendPropertyChanging();
					this._FreightPayerID = value;
					this.SendPropertyChanged("FreightPayerID");
					this.OnFreightPayerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialMaster", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string MaterialMaster
		{
			get
			{
				return this._MaterialMaster;
			}
			set
			{
				if ((this._MaterialMaster != value))
				{
					this.OnMaterialMasterChanging(value);
					this.SendPropertyChanging();
					this._MaterialMaster = value;
					this.SendPropertyChanged("MaterialMaster");
					this.OnMaterialMasterChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int")]
		public System.Nullable<int> PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_RemarkMM", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RemarkMM
		{
			get
			{
				return this._RemarkMM;
			}
			set
			{
				if ((this._RemarkMM != value))
				{
					this.OnRemarkMMChanging(value);
					this.SendPropertyChanging();
					this._RemarkMM = value;
					this.SendPropertyChanged("RemarkMM");
					this.OnRemarkMMChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityCost", DbType="Float")]
		public System.Nullable<double> SecurityCost
		{
			get
			{
				return this._SecurityCost;
			}
			set
			{
				if ((this._SecurityCost != value))
				{
					this.OnSecurityCostChanging(value);
					this.SendPropertyChanging();
					this._SecurityCost = value;
					this.SendPropertyChanged("SecurityCost");
					this.OnSecurityCostChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessDescriptionID", DbType="Int")]
		public System.Nullable<int> BusinessDescriptionID
		{
			get
			{
				return this._BusinessDescriptionID;
			}
			set
			{
				if ((this._BusinessDescriptionID != value))
				{
					if (this._BusinessDescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessDescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessDescriptionID = value;
					this.SendPropertyChanged("BusinessDescriptionID");
					this.OnBusinessDescriptionIDChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityEscrotPO", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityEscrotPO
		{
			get
			{
				return this._SecurityEscrotPO;
			}
			set
			{
				if ((this._SecurityEscrotPO != value))
				{
					this.OnSecurityEscrotPOChanging(value);
					this.SendPropertyChanging();
					this._SecurityEscrotPO = value;
					this.SendPropertyChanged("SecurityEscrotPO");
					this.OnSecurityEscrotPOChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_SecurityEscortRoute_BusinessDescription", Storage="_BusinessDescription", ThisKey="BusinessDescriptionID", OtherKey="ID", IsForeignKey=true)]
		public BusinessDescription BusinessDescription
		{
			get
			{
				return this._BusinessDescription.Entity;
			}
			set
			{
				BusinessDescription previousValue = this._BusinessDescription.Entity;
				if (((previousValue != value) 
							|| (this._BusinessDescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessDescription.Entity = null;
						previousValue.SecurityEscortRoute.Remove(this);
					}
					this._BusinessDescription.Entity = value;
					if ((value != null))
					{
						value.SecurityEscortRoute.Add(this);
						this._BusinessDescriptionID = value.ID;
					}
					else
					{
						this._BusinessDescriptionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BusinessDescription");
				}
			}
		}
		
		[Association(Name="FK_SecurityEscortRoute_Currency", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.SecurityEscortRoute.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.SecurityEscortRoute.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[Association(Name="FK_SecurityEscortRoute_FreightPayer", Storage="_FreightPayer", ThisKey="FreightPayerID", OtherKey="ID", IsForeignKey=true)]
		public FreightPayer FreightPayer
		{
			get
			{
				return this._FreightPayer.Entity;
			}
			set
			{
				FreightPayer previousValue = this._FreightPayer.Entity;
				if (((previousValue != value) 
							|| (this._FreightPayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FreightPayer.Entity = null;
						previousValue.SecurityEscortRoute.Remove(this);
					}
					this._FreightPayer.Entity = value;
					if ((value != null))
					{
						value.SecurityEscortRoute.Add(this);
						this._FreightPayerID = value.ID;
					}
					else
					{
						this._FreightPayerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FreightPayer");
				}
			}
		}
		
		[Association(Name="FK_SecurityEscortRoute_Partner", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.SecurityEscortRoute.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.SecurityEscortRoute.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		[Association(Name="FK_Shipping_SecurityEscortRoute", Storage="_Shipping", ThisKey="ID", OtherKey="SecurityEscortCatalogID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.SecurityEscortRoute = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.SecurityEscortRoute = null;
		}
	}
	
	[Table(Name="dbo.ShipmentType")]
	public partial class ShipmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public ShipmentType()
		{
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Route_ShipmentType", Storage="_Route", ThisKey="ID", OtherKey="ShipmentTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.ShipmentType = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.ShipmentType = null;
		}
	}
	
	[Table(Name="dbo.Shipping")]
	public partial class Shipping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<double> _AdditionalCosts;
		
		private System.Nullable<System.DateTime> _ArrivalTime;
		
		private string _Author;
		
		private string _BusinessDescription;
		
		private string _Comments;
		
		private string _ContainerNo;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _DockNumber;
		
		private string _Editor;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.Nullable<System.DateTime> _EstimateDeliveryTime;
		
		private System.Nullable<double> _EuroPalletsQuantity;
		
		private int _ID;
		
		private System.Nullable<double> _InduPalletsQuantity;
		
		private System.Nullable<bool> _IsOutbound;
		
		private string _LoadingType;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<int> _EscortPartnerID;
		
		private System.Nullable<System.DateTime> _PoLastModification;
		
		private string _PoNumberMultiline;
		
		private string _ReportPeriod;
		
		private System.Nullable<int> _SecurityEscortCatalogID;
		
		private System.Nullable<int> _SecuritySealProtocolID;
		
		private System.Nullable<int> _CityID;
		
		private System.Nullable<int> _Currency4AddCostsID;
		
		private System.Nullable<int> _Currency4CostsPerKUID;
		
		private System.Nullable<int> _CurrencyForEscortID;
		
		private System.Nullable<int> _CurrencyForFreightID;
		
		private System.Nullable<int> _EscortPOID;
		
		private System.Nullable<int> _FreightPOID;
		
		private System.Nullable<int> _PartnerID;
		
		private System.Nullable<int> _RouteID;
		
		private System.Nullable<int> _TransportUnitTypeID;
		
		private System.Nullable<int> _TruckID;
		
		private System.Nullable<int> _WarehouseID;
		
		private string _ShippingCarrierTitle;
		
		private string _ShippingCommodityTitle;
		
		private string _ShippingCountryTitle;
		
		private System.Nullable<double> _ShippingDuration;
		
		private System.Nullable<double> _ShippingFreightCost;
		
		private string _ShippingFreightPayerTitle;
		
		private string _ShippingRouteDepartureCity;
		
		private System.Nullable<double> _ShippingSecurityCost;
		
		private string _ShippingState;
		
		private string _ShippingState2;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private string _Title;
		
		private System.Nullable<double> _TotalCostsPerKU;
		
		private System.Nullable<double> _TotalQuantityKU;
		
		private string _TrailerCondition;
		
		private string _TrailerConditionComments;
		
		private System.Nullable<int> _TrailerID;
		
		private System.Nullable<bool> _TruckAwaiting;
		
		private System.Nullable<int> _EscortCarID;
		
		private System.Nullable<System.DateTime> _TSEndTime;
		
		private System.Nullable<System.DateTime> _TSStartTime;
		
		private System.Nullable<System.DateTime> _WarehouseEndTime;
		
		private System.Nullable<System.DateTime> _WarehouseStartTime;
		
		private bool _OnlySQL;
		
		private EntitySet<DriversTeam> _DriversTeam;
		
		private EntitySet<LoadDescription> _LoadDescription;
		
		private EntityRef<City> _City;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Currency> _Currency4CostsPerKU;
		
		private EntityRef<Currency> _CurrencyForEscort;
		
		private EntityRef<Currency> _CurrencyForFreight;
		
		private EntityRef<Truck> _Truck;
		
		private EntityRef<EscortPOLibrary> _EscortPOLibrary;
		
		private EntityRef<FreightPOLibrary> _FreightPOLibrary;
		
		private EntityRef<Partner> _Partner;
		
		private EntityRef<Partner> _EscortPartner;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<SealProtocolLibrary> _SealProtocolLibrary;
		
		private EntityRef<SecurityEscortRoute> _SecurityEscortRoute;
		
		private EntityRef<Trailer> _Trailer;
		
		private EntityRef<TransportUnitType> _TransportUnitType;
		
		private EntityRef<Truck> _Shipping_Truck;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdditionalCostsChanging(System.Nullable<double> value);
    partial void OnAdditionalCostsChanged();
    partial void OnArrivalTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnArrivalTimeChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnBusinessDescriptionChanging(string value);
    partial void OnBusinessDescriptionChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnContainerNoChanging(string value);
    partial void OnContainerNoChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnDockNumberChanging(string value);
    partial void OnDockNumberChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnEstimateDeliveryTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEstimateDeliveryTimeChanged();
    partial void OnEuroPalletsQuantityChanging(System.Nullable<double> value);
    partial void OnEuroPalletsQuantityChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInduPalletsQuantityChanging(System.Nullable<double> value);
    partial void OnInduPalletsQuantityChanged();
    partial void OnIsOutboundChanging(System.Nullable<bool> value);
    partial void OnIsOutboundChanged();
    partial void OnLoadingTypeChanging(string value);
    partial void OnLoadingTypeChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnEscortPartnerIDChanging(System.Nullable<int> value);
    partial void OnEscortPartnerIDChanged();
    partial void OnPoLastModificationChanging(System.Nullable<System.DateTime> value);
    partial void OnPoLastModificationChanged();
    partial void OnPoNumberMultilineChanging(string value);
    partial void OnPoNumberMultilineChanged();
    partial void OnReportPeriodChanging(string value);
    partial void OnReportPeriodChanged();
    partial void OnSecurityEscortCatalogIDChanging(System.Nullable<int> value);
    partial void OnSecurityEscortCatalogIDChanged();
    partial void OnSecuritySealProtocolIDChanging(System.Nullable<int> value);
    partial void OnSecuritySealProtocolIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnCurrency4AddCostsIDChanging(System.Nullable<int> value);
    partial void OnCurrency4AddCostsIDChanged();
    partial void OnCurrency4CostsPerKUIDChanging(System.Nullable<int> value);
    partial void OnCurrency4CostsPerKUIDChanged();
    partial void OnCurrencyForEscortIDChanging(System.Nullable<int> value);
    partial void OnCurrencyForEscortIDChanged();
    partial void OnCurrencyForFreightIDChanging(System.Nullable<int> value);
    partial void OnCurrencyForFreightIDChanged();
    partial void OnEscortPOIDChanging(System.Nullable<int> value);
    partial void OnEscortPOIDChanged();
    partial void OnFreightPOIDChanging(System.Nullable<int> value);
    partial void OnFreightPOIDChanged();
    partial void OnPartnerIDChanging(System.Nullable<int> value);
    partial void OnPartnerIDChanged();
    partial void OnRouteIDChanging(System.Nullable<int> value);
    partial void OnRouteIDChanged();
    partial void OnTransportUnitTypeIDChanging(System.Nullable<int> value);
    partial void OnTransportUnitTypeIDChanged();
    partial void OnTruckIDChanging(System.Nullable<int> value);
    partial void OnTruckIDChanged();
    partial void OnWarehouseIDChanging(System.Nullable<int> value);
    partial void OnWarehouseIDChanged();
    partial void OnShippingCarrierTitleChanging(string value);
    partial void OnShippingCarrierTitleChanged();
    partial void OnShippingCommodityTitleChanging(string value);
    partial void OnShippingCommodityTitleChanged();
    partial void OnShippingCountryTitleChanging(string value);
    partial void OnShippingCountryTitleChanged();
    partial void OnShippingDurationChanging(System.Nullable<double> value);
    partial void OnShippingDurationChanged();
    partial void OnShippingFreightCostChanging(System.Nullable<double> value);
    partial void OnShippingFreightCostChanged();
    partial void OnShippingFreightPayerTitleChanging(string value);
    partial void OnShippingFreightPayerTitleChanged();
    partial void OnShippingRouteDepartureCityChanging(string value);
    partial void OnShippingRouteDepartureCityChanged();
    partial void OnShippingSecurityCostChanging(System.Nullable<double> value);
    partial void OnShippingSecurityCostChanged();
    partial void OnShippingStateChanging(string value);
    partial void OnShippingStateChanged();
    partial void OnShippingState2Changing(string value);
    partial void OnShippingState2Changed();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTotalCostsPerKUChanging(System.Nullable<double> value);
    partial void OnTotalCostsPerKUChanged();
    partial void OnTotalQuantityKUChanging(System.Nullable<double> value);
    partial void OnTotalQuantityKUChanged();
    partial void OnTrailerConditionChanging(string value);
    partial void OnTrailerConditionChanged();
    partial void OnTrailerConditionCommentsChanging(string value);
    partial void OnTrailerConditionCommentsChanged();
    partial void OnTrailerIDChanging(System.Nullable<int> value);
    partial void OnTrailerIDChanged();
    partial void OnTruckAwaitingChanging(System.Nullable<bool> value);
    partial void OnTruckAwaitingChanged();
    partial void OnEscortCarIDChanging(System.Nullable<int> value);
    partial void OnEscortCarIDChanged();
    partial void OnTSEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTSEndTimeChanged();
    partial void OnTSStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTSStartTimeChanged();
    partial void OnWarehouseEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnWarehouseEndTimeChanged();
    partial void OnWarehouseStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnWarehouseStartTimeChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Shipping()
		{
			this._DriversTeam = new EntitySet<DriversTeam>(new Action<DriversTeam>(this.attach_DriversTeam), new Action<DriversTeam>(this.detach_DriversTeam));
			this._LoadDescription = new EntitySet<LoadDescription>(new Action<LoadDescription>(this.attach_LoadDescription), new Action<LoadDescription>(this.detach_LoadDescription));
			this._City = default(EntityRef<City>);
			this._Currency = default(EntityRef<Currency>);
			this._Currency4CostsPerKU = default(EntityRef<Currency>);
			this._CurrencyForEscort = default(EntityRef<Currency>);
			this._CurrencyForFreight = default(EntityRef<Currency>);
			this._Truck = default(EntityRef<Truck>);
			this._EscortPOLibrary = default(EntityRef<EscortPOLibrary>);
			this._FreightPOLibrary = default(EntityRef<FreightPOLibrary>);
			this._Partner = default(EntityRef<Partner>);
			this._EscortPartner = default(EntityRef<Partner>);
			this._Route = default(EntityRef<Route>);
			this._SealProtocolLibrary = default(EntityRef<SealProtocolLibrary>);
			this._SecurityEscortRoute = default(EntityRef<SecurityEscortRoute>);
			this._Trailer = default(EntityRef<Trailer>);
			this._TransportUnitType = default(EntityRef<TransportUnitType>);
			this._Shipping_Truck = default(EntityRef<Truck>);
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[Column(Storage="_AdditionalCosts", DbType="Float")]
		public System.Nullable<double> AdditionalCosts
		{
			get
			{
				return this._AdditionalCosts;
			}
			set
			{
				if ((this._AdditionalCosts != value))
				{
					this.OnAdditionalCostsChanging(value);
					this.SendPropertyChanging();
					this._AdditionalCosts = value;
					this.SendPropertyChanged("AdditionalCosts");
					this.OnAdditionalCostsChanged();
				}
			}
		}
		
		[Column(Storage="_ArrivalTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ArrivalTime
		{
			get
			{
				return this._ArrivalTime;
			}
			set
			{
				if ((this._ArrivalTime != value))
				{
					this.OnArrivalTimeChanging(value);
					this.SendPropertyChanging();
					this._ArrivalTime = value;
					this.SendPropertyChanged("ArrivalTime");
					this.OnArrivalTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessDescription", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BusinessDescription
		{
			get
			{
				return this._BusinessDescription;
			}
			set
			{
				if ((this._BusinessDescription != value))
				{
					this.OnBusinessDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BusinessDescription = value;
					this.SendPropertyChanged("BusinessDescription");
					this.OnBusinessDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_ContainerNo", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ContainerNo
		{
			get
			{
				return this._ContainerNo;
			}
			set
			{
				if ((this._ContainerNo != value))
				{
					this.OnContainerNoChanging(value);
					this.SendPropertyChanging();
					this._ContainerNo = value;
					this.SendPropertyChanged("ContainerNo");
					this.OnContainerNoChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_DockNumber", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string DockNumber
		{
			get
			{
				return this._DockNumber;
			}
			set
			{
				if ((this._DockNumber != value))
				{
					this.OnDockNumberChanging(value);
					this.SendPropertyChanging();
					this._DockNumber = value;
					this.SendPropertyChanged("DockNumber");
					this.OnDockNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EstimateDeliveryTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EstimateDeliveryTime
		{
			get
			{
				return this._EstimateDeliveryTime;
			}
			set
			{
				if ((this._EstimateDeliveryTime != value))
				{
					this.OnEstimateDeliveryTimeChanging(value);
					this.SendPropertyChanging();
					this._EstimateDeliveryTime = value;
					this.SendPropertyChanged("EstimateDeliveryTime");
					this.OnEstimateDeliveryTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EuroPalletsQuantity", DbType="Float")]
		public System.Nullable<double> EuroPalletsQuantity
		{
			get
			{
				return this._EuroPalletsQuantity;
			}
			set
			{
				if ((this._EuroPalletsQuantity != value))
				{
					this.OnEuroPalletsQuantityChanging(value);
					this.SendPropertyChanging();
					this._EuroPalletsQuantity = value;
					this.SendPropertyChanged("EuroPalletsQuantity");
					this.OnEuroPalletsQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InduPalletsQuantity", DbType="Float")]
		public System.Nullable<double> InduPalletsQuantity
		{
			get
			{
				return this._InduPalletsQuantity;
			}
			set
			{
				if ((this._InduPalletsQuantity != value))
				{
					this.OnInduPalletsQuantityChanging(value);
					this.SendPropertyChanging();
					this._InduPalletsQuantity = value;
					this.SendPropertyChanged("InduPalletsQuantity");
					this.OnInduPalletsQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_IsOutbound", DbType="Bit")]
		public System.Nullable<bool> IsOutbound
		{
			get
			{
				return this._IsOutbound;
			}
			set
			{
				if ((this._IsOutbound != value))
				{
					this.OnIsOutboundChanging(value);
					this.SendPropertyChanging();
					this._IsOutbound = value;
					this.SendPropertyChanged("IsOutbound");
					this.OnIsOutboundChanged();
				}
			}
		}
		
		[Column(Storage="_LoadingType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string LoadingType
		{
			get
			{
				return this._LoadingType;
			}
			set
			{
				if ((this._LoadingType != value))
				{
					this.OnLoadingTypeChanging(value);
					this.SendPropertyChanging();
					this._LoadingType = value;
					this.SendPropertyChanged("LoadingType");
					this.OnLoadingTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_EscortPartnerID", DbType="Int")]
		public System.Nullable<int> EscortPartnerID
		{
			get
			{
				return this._EscortPartnerID;
			}
			set
			{
				if ((this._EscortPartnerID != value))
				{
					if (this._EscortPartner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEscortPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._EscortPartnerID = value;
					this.SendPropertyChanged("EscortPartnerID");
					this.OnEscortPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_PoLastModification", DbType="DateTime")]
		public System.Nullable<System.DateTime> PoLastModification
		{
			get
			{
				return this._PoLastModification;
			}
			set
			{
				if ((this._PoLastModification != value))
				{
					this.OnPoLastModificationChanging(value);
					this.SendPropertyChanging();
					this._PoLastModification = value;
					this.SendPropertyChanged("PoLastModification");
					this.OnPoLastModificationChanged();
				}
			}
		}
		
		[Column(Storage="_PoNumberMultiline", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PoNumberMultiline
		{
			get
			{
				return this._PoNumberMultiline;
			}
			set
			{
				if ((this._PoNumberMultiline != value))
				{
					this.OnPoNumberMultilineChanging(value);
					this.SendPropertyChanging();
					this._PoNumberMultiline = value;
					this.SendPropertyChanged("PoNumberMultiline");
					this.OnPoNumberMultilineChanged();
				}
			}
		}
		
		[Column(Storage="_ReportPeriod", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ReportPeriod
		{
			get
			{
				return this._ReportPeriod;
			}
			set
			{
				if ((this._ReportPeriod != value))
				{
					this.OnReportPeriodChanging(value);
					this.SendPropertyChanging();
					this._ReportPeriod = value;
					this.SendPropertyChanged("ReportPeriod");
					this.OnReportPeriodChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityEscortCatalogID", DbType="Int")]
		public System.Nullable<int> SecurityEscortCatalogID
		{
			get
			{
				return this._SecurityEscortCatalogID;
			}
			set
			{
				if ((this._SecurityEscortCatalogID != value))
				{
					if (this._SecurityEscortRoute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurityEscortCatalogIDChanging(value);
					this.SendPropertyChanging();
					this._SecurityEscortCatalogID = value;
					this.SendPropertyChanged("SecurityEscortCatalogID");
					this.OnSecurityEscortCatalogIDChanged();
				}
			}
		}
		
		[Column(Storage="_SecuritySealProtocolID", DbType="Int")]
		public System.Nullable<int> SecuritySealProtocolID
		{
			get
			{
				return this._SecuritySealProtocolID;
			}
			set
			{
				if ((this._SecuritySealProtocolID != value))
				{
					if (this._SealProtocolLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecuritySealProtocolIDChanging(value);
					this.SendPropertyChanging();
					this._SecuritySealProtocolID = value;
					this.SendPropertyChanged("SecuritySealProtocolID");
					this.OnSecuritySealProtocolIDChanged();
				}
			}
		}
		
		[Column(Storage="_CityID", DbType="Int")]
		public System.Nullable<int> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[Column(Storage="_Currency4AddCostsID", DbType="Int")]
		public System.Nullable<int> Currency4AddCostsID
		{
			get
			{
				return this._Currency4AddCostsID;
			}
			set
			{
				if ((this._Currency4AddCostsID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrency4AddCostsIDChanging(value);
					this.SendPropertyChanging();
					this._Currency4AddCostsID = value;
					this.SendPropertyChanged("Currency4AddCostsID");
					this.OnCurrency4AddCostsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Currency4CostsPerKUID", DbType="Int")]
		public System.Nullable<int> Currency4CostsPerKUID
		{
			get
			{
				return this._Currency4CostsPerKUID;
			}
			set
			{
				if ((this._Currency4CostsPerKUID != value))
				{
					if (this._Currency4CostsPerKU.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrency4CostsPerKUIDChanging(value);
					this.SendPropertyChanging();
					this._Currency4CostsPerKUID = value;
					this.SendPropertyChanged("Currency4CostsPerKUID");
					this.OnCurrency4CostsPerKUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyForEscortID", DbType="Int")]
		public System.Nullable<int> CurrencyForEscortID
		{
			get
			{
				return this._CurrencyForEscortID;
			}
			set
			{
				if ((this._CurrencyForEscortID != value))
				{
					if (this._CurrencyForEscort.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyForEscortIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyForEscortID = value;
					this.SendPropertyChanged("CurrencyForEscortID");
					this.OnCurrencyForEscortIDChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyForFreightID", DbType="Int")]
		public System.Nullable<int> CurrencyForFreightID
		{
			get
			{
				return this._CurrencyForFreightID;
			}
			set
			{
				if ((this._CurrencyForFreightID != value))
				{
					if (this._CurrencyForFreight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyForFreightIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyForFreightID = value;
					this.SendPropertyChanged("CurrencyForFreightID");
					this.OnCurrencyForFreightIDChanged();
				}
			}
		}
		
		[Column(Storage="_EscortPOID", DbType="Int")]
		public System.Nullable<int> EscortPOID
		{
			get
			{
				return this._EscortPOID;
			}
			set
			{
				if ((this._EscortPOID != value))
				{
					if (this._EscortPOLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEscortPOIDChanging(value);
					this.SendPropertyChanging();
					this._EscortPOID = value;
					this.SendPropertyChanged("EscortPOID");
					this.OnEscortPOIDChanged();
				}
			}
		}
		
		[Column(Storage="_FreightPOID", DbType="Int")]
		public System.Nullable<int> FreightPOID
		{
			get
			{
				return this._FreightPOID;
			}
			set
			{
				if ((this._FreightPOID != value))
				{
					if (this._FreightPOLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFreightPOIDChanging(value);
					this.SendPropertyChanging();
					this._FreightPOID = value;
					this.SendPropertyChanged("FreightPOID");
					this.OnFreightPOIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int")]
		public System.Nullable<int> PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_RouteID", DbType="Int")]
		public System.Nullable<int> RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransportUnitTypeID", DbType="Int")]
		public System.Nullable<int> TransportUnitTypeID
		{
			get
			{
				return this._TransportUnitTypeID;
			}
			set
			{
				if ((this._TransportUnitTypeID != value))
				{
					if (this._TransportUnitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransportUnitTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TransportUnitTypeID = value;
					this.SendPropertyChanged("TransportUnitTypeID");
					this.OnTransportUnitTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TruckID", DbType="Int")]
		public System.Nullable<int> TruckID
		{
			get
			{
				return this._TruckID;
			}
			set
			{
				if ((this._TruckID != value))
				{
					if (this._Shipping_Truck.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTruckIDChanging(value);
					this.SendPropertyChanging();
					this._TruckID = value;
					this.SendPropertyChanged("TruckID");
					this.OnTruckIDChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseID", DbType="Int")]
		public System.Nullable<int> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingCarrierTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShippingCarrierTitle
		{
			get
			{
				return this._ShippingCarrierTitle;
			}
			set
			{
				if ((this._ShippingCarrierTitle != value))
				{
					this.OnShippingCarrierTitleChanging(value);
					this.SendPropertyChanging();
					this._ShippingCarrierTitle = value;
					this.SendPropertyChanged("ShippingCarrierTitle");
					this.OnShippingCarrierTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingCommodityTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShippingCommodityTitle
		{
			get
			{
				return this._ShippingCommodityTitle;
			}
			set
			{
				if ((this._ShippingCommodityTitle != value))
				{
					this.OnShippingCommodityTitleChanging(value);
					this.SendPropertyChanging();
					this._ShippingCommodityTitle = value;
					this.SendPropertyChanged("ShippingCommodityTitle");
					this.OnShippingCommodityTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingCountryTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShippingCountryTitle
		{
			get
			{
				return this._ShippingCountryTitle;
			}
			set
			{
				if ((this._ShippingCountryTitle != value))
				{
					this.OnShippingCountryTitleChanging(value);
					this.SendPropertyChanging();
					this._ShippingCountryTitle = value;
					this.SendPropertyChanged("ShippingCountryTitle");
					this.OnShippingCountryTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingDuration", DbType="Float")]
		public System.Nullable<double> ShippingDuration
		{
			get
			{
				return this._ShippingDuration;
			}
			set
			{
				if ((this._ShippingDuration != value))
				{
					this.OnShippingDurationChanging(value);
					this.SendPropertyChanging();
					this._ShippingDuration = value;
					this.SendPropertyChanged("ShippingDuration");
					this.OnShippingDurationChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingFreightCost", DbType="Float")]
		public System.Nullable<double> ShippingFreightCost
		{
			get
			{
				return this._ShippingFreightCost;
			}
			set
			{
				if ((this._ShippingFreightCost != value))
				{
					this.OnShippingFreightCostChanging(value);
					this.SendPropertyChanging();
					this._ShippingFreightCost = value;
					this.SendPropertyChanged("ShippingFreightCost");
					this.OnShippingFreightCostChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingFreightPayerTitle", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShippingFreightPayerTitle
		{
			get
			{
				return this._ShippingFreightPayerTitle;
			}
			set
			{
				if ((this._ShippingFreightPayerTitle != value))
				{
					this.OnShippingFreightPayerTitleChanging(value);
					this.SendPropertyChanging();
					this._ShippingFreightPayerTitle = value;
					this.SendPropertyChanged("ShippingFreightPayerTitle");
					this.OnShippingFreightPayerTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingRouteDepartureCity", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShippingRouteDepartureCity
		{
			get
			{
				return this._ShippingRouteDepartureCity;
			}
			set
			{
				if ((this._ShippingRouteDepartureCity != value))
				{
					this.OnShippingRouteDepartureCityChanging(value);
					this.SendPropertyChanging();
					this._ShippingRouteDepartureCity = value;
					this.SendPropertyChanged("ShippingRouteDepartureCity");
					this.OnShippingRouteDepartureCityChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingSecurityCost", DbType="Float")]
		public System.Nullable<double> ShippingSecurityCost
		{
			get
			{
				return this._ShippingSecurityCost;
			}
			set
			{
				if ((this._ShippingSecurityCost != value))
				{
					this.OnShippingSecurityCostChanging(value);
					this.SendPropertyChanging();
					this._ShippingSecurityCost = value;
					this.SendPropertyChanged("ShippingSecurityCost");
					this.OnShippingSecurityCostChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingState", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShippingState
		{
			get
			{
				return this._ShippingState;
			}
			set
			{
				if ((this._ShippingState != value))
				{
					this.OnShippingStateChanging(value);
					this.SendPropertyChanging();
					this._ShippingState = value;
					this.SendPropertyChanged("ShippingState");
					this.OnShippingStateChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingState2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShippingState2
		{
			get
			{
				return this._ShippingState2;
			}
			set
			{
				if ((this._ShippingState2 != value))
				{
					this.OnShippingState2Changing(value);
					this.SendPropertyChanging();
					this._ShippingState2 = value;
					this.SendPropertyChanged("ShippingState2");
					this.OnShippingState2Changed();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TotalCostsPerKU", DbType="Float")]
		public System.Nullable<double> TotalCostsPerKU
		{
			get
			{
				return this._TotalCostsPerKU;
			}
			set
			{
				if ((this._TotalCostsPerKU != value))
				{
					this.OnTotalCostsPerKUChanging(value);
					this.SendPropertyChanging();
					this._TotalCostsPerKU = value;
					this.SendPropertyChanged("TotalCostsPerKU");
					this.OnTotalCostsPerKUChanged();
				}
			}
		}
		
		[Column(Storage="_TotalQuantityKU", DbType="Float")]
		public System.Nullable<double> TotalQuantityKU
		{
			get
			{
				return this._TotalQuantityKU;
			}
			set
			{
				if ((this._TotalQuantityKU != value))
				{
					this.OnTotalQuantityKUChanging(value);
					this.SendPropertyChanging();
					this._TotalQuantityKU = value;
					this.SendPropertyChanged("TotalQuantityKU");
					this.OnTotalQuantityKUChanged();
				}
			}
		}
		
		[Column(Storage="_TrailerCondition", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TrailerCondition
		{
			get
			{
				return this._TrailerCondition;
			}
			set
			{
				if ((this._TrailerCondition != value))
				{
					this.OnTrailerConditionChanging(value);
					this.SendPropertyChanging();
					this._TrailerCondition = value;
					this.SendPropertyChanged("TrailerCondition");
					this.OnTrailerConditionChanged();
				}
			}
		}
		
		[Column(Storage="_TrailerConditionComments", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TrailerConditionComments
		{
			get
			{
				return this._TrailerConditionComments;
			}
			set
			{
				if ((this._TrailerConditionComments != value))
				{
					this.OnTrailerConditionCommentsChanging(value);
					this.SendPropertyChanging();
					this._TrailerConditionComments = value;
					this.SendPropertyChanged("TrailerConditionComments");
					this.OnTrailerConditionCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_TrailerID", DbType="Int")]
		public System.Nullable<int> TrailerID
		{
			get
			{
				return this._TrailerID;
			}
			set
			{
				if ((this._TrailerID != value))
				{
					if (this._Trailer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrailerIDChanging(value);
					this.SendPropertyChanging();
					this._TrailerID = value;
					this.SendPropertyChanged("TrailerID");
					this.OnTrailerIDChanged();
				}
			}
		}
		
		[Column(Storage="_TruckAwaiting", DbType="Bit")]
		public System.Nullable<bool> TruckAwaiting
		{
			get
			{
				return this._TruckAwaiting;
			}
			set
			{
				if ((this._TruckAwaiting != value))
				{
					this.OnTruckAwaitingChanging(value);
					this.SendPropertyChanging();
					this._TruckAwaiting = value;
					this.SendPropertyChanged("TruckAwaiting");
					this.OnTruckAwaitingChanged();
				}
			}
		}
		
		[Column(Storage="_EscortCarID", DbType="Int")]
		public System.Nullable<int> EscortCarID
		{
			get
			{
				return this._EscortCarID;
			}
			set
			{
				if ((this._EscortCarID != value))
				{
					if (this._Truck.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEscortCarIDChanging(value);
					this.SendPropertyChanging();
					this._EscortCarID = value;
					this.SendPropertyChanged("EscortCarID");
					this.OnEscortCarIDChanged();
				}
			}
		}
		
		[Column(Storage="_TSEndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> TSEndTime
		{
			get
			{
				return this._TSEndTime;
			}
			set
			{
				if ((this._TSEndTime != value))
				{
					this.OnTSEndTimeChanging(value);
					this.SendPropertyChanging();
					this._TSEndTime = value;
					this.SendPropertyChanged("TSEndTime");
					this.OnTSEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TSStartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> TSStartTime
		{
			get
			{
				return this._TSStartTime;
			}
			set
			{
				if ((this._TSStartTime != value))
				{
					this.OnTSStartTimeChanging(value);
					this.SendPropertyChanging();
					this._TSStartTime = value;
					this.SendPropertyChanged("TSStartTime");
					this.OnTSStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseEndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> WarehouseEndTime
		{
			get
			{
				return this._WarehouseEndTime;
			}
			set
			{
				if ((this._WarehouseEndTime != value))
				{
					this.OnWarehouseEndTimeChanging(value);
					this.SendPropertyChanging();
					this._WarehouseEndTime = value;
					this.SendPropertyChanged("WarehouseEndTime");
					this.OnWarehouseEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseStartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> WarehouseStartTime
		{
			get
			{
				return this._WarehouseStartTime;
			}
			set
			{
				if ((this._WarehouseStartTime != value))
				{
					this.OnWarehouseStartTimeChanging(value);
					this.SendPropertyChanging();
					this._WarehouseStartTime = value;
					this.SendPropertyChanged("WarehouseStartTime");
					this.OnWarehouseStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_DriversTeam_Shipping", Storage="_DriversTeam", ThisKey="ID", OtherKey="ShippingID", DeleteRule="NO ACTION")]
		public EntitySet<DriversTeam> DriversTeam
		{
			get
			{
				return this._DriversTeam;
			}
			set
			{
				this._DriversTeam.Assign(value);
			}
		}
		
		[Association(Name="FK_LoadDescription_Shipping", Storage="_LoadDescription", ThisKey="ID", OtherKey="ShippingID", DeleteRule="NO ACTION")]
		public EntitySet<LoadDescription> LoadDescription
		{
			get
			{
				return this._LoadDescription;
			}
			set
			{
				this._LoadDescription.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_City", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="FK_Shipping_Currency4AddCosts", Storage="_Currency", ThisKey="Currency4AddCostsID", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._Currency4AddCostsID = value.ID;
					}
					else
					{
						this._Currency4AddCostsID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[Association(Name="FK_Shipping_Currency4CostsPerKU", Storage="_Currency4CostsPerKU", ThisKey="Currency4CostsPerKUID", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency4CostsPerKU
		{
			get
			{
				return this._Currency4CostsPerKU.Entity;
			}
			set
			{
				Currency previousValue = this._Currency4CostsPerKU.Entity;
				if (((previousValue != value) 
							|| (this._Currency4CostsPerKU.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency4CostsPerKU.Entity = null;
						previousValue.Shipping_Currency4CostsPerKU.Remove(this);
					}
					this._Currency4CostsPerKU.Entity = value;
					if ((value != null))
					{
						value.Shipping_Currency4CostsPerKU.Add(this);
						this._Currency4CostsPerKUID = value.ID;
					}
					else
					{
						this._Currency4CostsPerKUID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency4CostsPerKU");
				}
			}
		}
		
		[Association(Name="FK_Shipping_CurrencyForEscort", Storage="_CurrencyForEscort", ThisKey="CurrencyForEscortID", OtherKey="ID", IsForeignKey=true)]
		public Currency CurrencyForEscort
		{
			get
			{
				return this._CurrencyForEscort.Entity;
			}
			set
			{
				Currency previousValue = this._CurrencyForEscort.Entity;
				if (((previousValue != value) 
							|| (this._CurrencyForEscort.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrencyForEscort.Entity = null;
						previousValue.Shipping_CurrencyForEscort.Remove(this);
					}
					this._CurrencyForEscort.Entity = value;
					if ((value != null))
					{
						value.Shipping_CurrencyForEscort.Add(this);
						this._CurrencyForEscortID = value.ID;
					}
					else
					{
						this._CurrencyForEscortID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CurrencyForEscort");
				}
			}
		}
		
		[Association(Name="FK_Shipping_CurrencyForFreight", Storage="_CurrencyForFreight", ThisKey="CurrencyForFreightID", OtherKey="ID", IsForeignKey=true)]
		public Currency CurrencyForFreight
		{
			get
			{
				return this._CurrencyForFreight.Entity;
			}
			set
			{
				Currency previousValue = this._CurrencyForFreight.Entity;
				if (((previousValue != value) 
							|| (this._CurrencyForFreight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrencyForFreight.Entity = null;
						previousValue.Shipping_CurrencyForFreight.Remove(this);
					}
					this._CurrencyForFreight.Entity = value;
					if ((value != null))
					{
						value.Shipping_CurrencyForFreight.Add(this);
						this._CurrencyForFreightID = value.ID;
					}
					else
					{
						this._CurrencyForFreightID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CurrencyForFreight");
				}
			}
		}
		
		[Association(Name="FK_Shipping_Escort", Storage="_Truck", ThisKey="EscortCarID", OtherKey="ID", IsForeignKey=true)]
		public Truck Truck
		{
			get
			{
				return this._Truck.Entity;
			}
			set
			{
				Truck previousValue = this._Truck.Entity;
				if (((previousValue != value) 
							|| (this._Truck.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Truck.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._Truck.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._EscortCarID = value.ID;
					}
					else
					{
						this._EscortCarID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Truck");
				}
			}
		}
		
		[Association(Name="FK_Shipping_EscortPOLibrary", Storage="_EscortPOLibrary", ThisKey="EscortPOID", OtherKey="ID", IsForeignKey=true)]
		public EscortPOLibrary EscortPOLibrary
		{
			get
			{
				return this._EscortPOLibrary.Entity;
			}
			set
			{
				EscortPOLibrary previousValue = this._EscortPOLibrary.Entity;
				if (((previousValue != value) 
							|| (this._EscortPOLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EscortPOLibrary.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._EscortPOLibrary.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._EscortPOID = value.ID;
					}
					else
					{
						this._EscortPOID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EscortPOLibrary");
				}
			}
		}
		
		[Association(Name="FK_Shipping_FreightPOLibrary", Storage="_FreightPOLibrary", ThisKey="FreightPOID", OtherKey="ID", IsForeignKey=true)]
		public FreightPOLibrary FreightPOLibrary
		{
			get
			{
				return this._FreightPOLibrary.Entity;
			}
			set
			{
				FreightPOLibrary previousValue = this._FreightPOLibrary.Entity;
				if (((previousValue != value) 
							|| (this._FreightPOLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FreightPOLibrary.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._FreightPOLibrary.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._FreightPOID = value.ID;
					}
					else
					{
						this._FreightPOID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FreightPOLibrary");
				}
			}
		}
		
		[Association(Name="FK_Shipping_Partner", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		[Association(Name="FK_Shipping_PartnerEscort", Storage="_EscortPartner", ThisKey="EscortPartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner EscortPartner
		{
			get
			{
				return this._EscortPartner.Entity;
			}
			set
			{
				Partner previousValue = this._EscortPartner.Entity;
				if (((previousValue != value) 
							|| (this._EscortPartner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EscortPartner.Entity = null;
						previousValue.Shipping_PartnerEscort.Remove(this);
					}
					this._EscortPartner.Entity = value;
					if ((value != null))
					{
						value.Shipping_PartnerEscort.Add(this);
						this._EscortPartnerID = value.ID;
					}
					else
					{
						this._EscortPartnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EscortPartner");
				}
			}
		}
		
		[Association(Name="FK_Shipping_Route", Storage="_Route", ThisKey="RouteID", OtherKey="ID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._RouteID = value.ID;
					}
					else
					{
						this._RouteID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[Association(Name="FK_Shipping_SealProtocolLibrary", Storage="_SealProtocolLibrary", ThisKey="SecuritySealProtocolID", OtherKey="ID", IsForeignKey=true)]
		public SealProtocolLibrary SealProtocolLibrary
		{
			get
			{
				return this._SealProtocolLibrary.Entity;
			}
			set
			{
				SealProtocolLibrary previousValue = this._SealProtocolLibrary.Entity;
				if (((previousValue != value) 
							|| (this._SealProtocolLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SealProtocolLibrary.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._SealProtocolLibrary.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._SecuritySealProtocolID = value.ID;
					}
					else
					{
						this._SecuritySealProtocolID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SealProtocolLibrary");
				}
			}
		}
		
		[Association(Name="FK_Shipping_SecurityEscortRoute", Storage="_SecurityEscortRoute", ThisKey="SecurityEscortCatalogID", OtherKey="ID", IsForeignKey=true)]
		public SecurityEscortRoute SecurityEscortRoute
		{
			get
			{
				return this._SecurityEscortRoute.Entity;
			}
			set
			{
				SecurityEscortRoute previousValue = this._SecurityEscortRoute.Entity;
				if (((previousValue != value) 
							|| (this._SecurityEscortRoute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityEscortRoute.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._SecurityEscortRoute.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._SecurityEscortCatalogID = value.ID;
					}
					else
					{
						this._SecurityEscortCatalogID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecurityEscortRoute");
				}
			}
		}
		
		[Association(Name="FK_Shipping_Trailer", Storage="_Trailer", ThisKey="TrailerID", OtherKey="ID", IsForeignKey=true)]
		public Trailer Trailer
		{
			get
			{
				return this._Trailer.Entity;
			}
			set
			{
				Trailer previousValue = this._Trailer.Entity;
				if (((previousValue != value) 
							|| (this._Trailer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trailer.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._Trailer.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._TrailerID = value.ID;
					}
					else
					{
						this._TrailerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Trailer");
				}
			}
		}
		
		[Association(Name="FK_Shipping_TransportUnitType", Storage="_TransportUnitType", ThisKey="TransportUnitTypeID", OtherKey="ID", IsForeignKey=true)]
		public TransportUnitType TransportUnitType
		{
			get
			{
				return this._TransportUnitType.Entity;
			}
			set
			{
				TransportUnitType previousValue = this._TransportUnitType.Entity;
				if (((previousValue != value) 
							|| (this._TransportUnitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransportUnitType.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._TransportUnitType.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._TransportUnitTypeID = value.ID;
					}
					else
					{
						this._TransportUnitTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransportUnitType");
				}
			}
		}
		
		[Association(Name="FK_Shipping_Truck", Storage="_Shipping_Truck", ThisKey="TruckID", OtherKey="ID", IsForeignKey=true)]
		public Truck Shipping_Truck
		{
			get
			{
				return this._Shipping_Truck.Entity;
			}
			set
			{
				Truck previousValue = this._Shipping_Truck.Entity;
				if (((previousValue != value) 
							|| (this._Shipping_Truck.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shipping_Truck.Entity = null;
						previousValue.Shipping_Truck.Remove(this);
					}
					this._Shipping_Truck.Entity = value;
					if ((value != null))
					{
						value.Shipping_Truck.Add(this);
						this._TruckID = value.ID;
					}
					else
					{
						this._TruckID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Shipping_Truck");
				}
			}
		}
		
		[Association(Name="FK_Shipping_Warehouse", Storage="_Warehouse", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.Shipping.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.Shipping.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DriversTeam(DriversTeam entity)
		{
			this.SendPropertyChanging();
			entity.Shipping = this;
		}
		
		private void detach_DriversTeam(DriversTeam entity)
		{
			this.SendPropertyChanging();
			entity.Shipping = null;
		}
		
		private void attach_LoadDescription(LoadDescription entity)
		{
			this.SendPropertyChanging();
			entity.Shipping = this;
		}
		
		private void detach_LoadDescription(LoadDescription entity)
		{
			this.SendPropertyChanging();
			entity.Shipping = null;
		}
	}
	
	[Table(Name="dbo.ShippingPoint")]
	public partial class ShippingPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Direction;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ShippingPointDescription;
		
		private string _Title;
		
		private System.Nullable<int> _WarehouseID;
		
		private bool _OnlySQL;
		
		private EntitySet<ScheduleTemplate> _ScheduleTemplate;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnDirectionChanging(string value);
    partial void OnDirectionChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnShippingPointDescriptionChanging(string value);
    partial void OnShippingPointDescriptionChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnWarehouseIDChanging(System.Nullable<int> value);
    partial void OnWarehouseIDChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public ShippingPoint()
		{
			this._ScheduleTemplate = new EntitySet<ScheduleTemplate>(new Action<ScheduleTemplate>(this.attach_ScheduleTemplate), new Action<ScheduleTemplate>(this.detach_ScheduleTemplate));
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Direction", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingPointDescription", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string ShippingPointDescription
		{
			get
			{
				return this._ShippingPointDescription;
			}
			set
			{
				if ((this._ShippingPointDescription != value))
				{
					this.OnShippingPointDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShippingPointDescription = value;
					this.SendPropertyChanged("ShippingPointDescription");
					this.OnShippingPointDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseID", DbType="Int")]
		public System.Nullable<int> WarehouseID
		{
			get
			{
				return this._WarehouseID;
			}
			set
			{
				if ((this._WarehouseID != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIDChanging(value);
					this.SendPropertyChanging();
					this._WarehouseID = value;
					this.SendPropertyChanged("WarehouseID");
					this.OnWarehouseIDChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_ScheduleTemplate_ShippingPoint", Storage="_ScheduleTemplate", ThisKey="ID", OtherKey="ShippingPointLookupTitle", DeleteRule="NO ACTION")]
		public EntitySet<ScheduleTemplate> ScheduleTemplate
		{
			get
			{
				return this._ScheduleTemplate;
			}
			set
			{
				this._ScheduleTemplate.Assign(value);
			}
		}
		
		[Association(Name="FK_ShippingPoint_Warehouse", Storage="_Warehouse", ThisKey="WarehouseID", OtherKey="ID", IsForeignKey=true)]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.ShippingPoint.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.ShippingPoint.Add(this);
						this._WarehouseID = value.ID;
					}
					else
					{
						this._WarehouseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScheduleTemplate(ScheduleTemplate entity)
		{
			this.SendPropertyChanging();
			entity.ShippingPoint = this;
		}
		
		private void detach_ScheduleTemplate(ScheduleTemplate entity)
		{
			this.SendPropertyChanging();
			entity.ShippingPoint = null;
		}
	}
	
	[Table(Name="dbo.TimeSlotsTemplate")]
	public partial class TimeSlotsTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private System.Nullable<int> _ScheduleTemplateID;
		
		private string _TimeSlotsTemplateDay;
		
		private string _TimeSlotsTemplateEndHour;
		
		private string _TimeSlotsTemplateEndMinute;
		
		private string _TimeSlotsTemplateStartHour;
		
		private string _TimeSlotsTemplateStartMinute;
		
		private bool _OnlySQL;
		
		private EntityRef<ScheduleTemplate> _ScheduleTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnScheduleTemplateIDChanging(System.Nullable<int> value);
    partial void OnScheduleTemplateIDChanged();
    partial void OnTimeSlotsTemplateDayChanging(string value);
    partial void OnTimeSlotsTemplateDayChanged();
    partial void OnTimeSlotsTemplateEndHourChanging(string value);
    partial void OnTimeSlotsTemplateEndHourChanged();
    partial void OnTimeSlotsTemplateEndMinuteChanging(string value);
    partial void OnTimeSlotsTemplateEndMinuteChanged();
    partial void OnTimeSlotsTemplateStartHourChanging(string value);
    partial void OnTimeSlotsTemplateStartHourChanged();
    partial void OnTimeSlotsTemplateStartMinuteChanging(string value);
    partial void OnTimeSlotsTemplateStartMinuteChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public TimeSlotsTemplate()
		{
			this._ScheduleTemplate = default(EntityRef<ScheduleTemplate>);
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ScheduleTemplateID", DbType="Int")]
		public System.Nullable<int> ScheduleTemplateID
		{
			get
			{
				return this._ScheduleTemplateID;
			}
			set
			{
				if ((this._ScheduleTemplateID != value))
				{
					if (this._ScheduleTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleTemplateID = value;
					this.SendPropertyChanged("ScheduleTemplateID");
					this.OnScheduleTemplateIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeSlotsTemplateDay", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TimeSlotsTemplateDay
		{
			get
			{
				return this._TimeSlotsTemplateDay;
			}
			set
			{
				if ((this._TimeSlotsTemplateDay != value))
				{
					this.OnTimeSlotsTemplateDayChanging(value);
					this.SendPropertyChanging();
					this._TimeSlotsTemplateDay = value;
					this.SendPropertyChanged("TimeSlotsTemplateDay");
					this.OnTimeSlotsTemplateDayChanged();
				}
			}
		}
		
		[Column(Storage="_TimeSlotsTemplateEndHour", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TimeSlotsTemplateEndHour
		{
			get
			{
				return this._TimeSlotsTemplateEndHour;
			}
			set
			{
				if ((this._TimeSlotsTemplateEndHour != value))
				{
					this.OnTimeSlotsTemplateEndHourChanging(value);
					this.SendPropertyChanging();
					this._TimeSlotsTemplateEndHour = value;
					this.SendPropertyChanged("TimeSlotsTemplateEndHour");
					this.OnTimeSlotsTemplateEndHourChanged();
				}
			}
		}
		
		[Column(Storage="_TimeSlotsTemplateEndMinute", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TimeSlotsTemplateEndMinute
		{
			get
			{
				return this._TimeSlotsTemplateEndMinute;
			}
			set
			{
				if ((this._TimeSlotsTemplateEndMinute != value))
				{
					this.OnTimeSlotsTemplateEndMinuteChanging(value);
					this.SendPropertyChanging();
					this._TimeSlotsTemplateEndMinute = value;
					this.SendPropertyChanged("TimeSlotsTemplateEndMinute");
					this.OnTimeSlotsTemplateEndMinuteChanged();
				}
			}
		}
		
		[Column(Storage="_TimeSlotsTemplateStartHour", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TimeSlotsTemplateStartHour
		{
			get
			{
				return this._TimeSlotsTemplateStartHour;
			}
			set
			{
				if ((this._TimeSlotsTemplateStartHour != value))
				{
					this.OnTimeSlotsTemplateStartHourChanging(value);
					this.SendPropertyChanging();
					this._TimeSlotsTemplateStartHour = value;
					this.SendPropertyChanged("TimeSlotsTemplateStartHour");
					this.OnTimeSlotsTemplateStartHourChanged();
				}
			}
		}
		
		[Column(Storage="_TimeSlotsTemplateStartMinute", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TimeSlotsTemplateStartMinute
		{
			get
			{
				return this._TimeSlotsTemplateStartMinute;
			}
			set
			{
				if ((this._TimeSlotsTemplateStartMinute != value))
				{
					this.OnTimeSlotsTemplateStartMinuteChanging(value);
					this.SendPropertyChanging();
					this._TimeSlotsTemplateStartMinute = value;
					this.SendPropertyChanged("TimeSlotsTemplateStartMinute");
					this.OnTimeSlotsTemplateStartMinuteChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_TimeSlotsTemplate_ScheduleTemplate", Storage="_ScheduleTemplate", ThisKey="ScheduleTemplateID", OtherKey="ID", IsForeignKey=true)]
		public ScheduleTemplate ScheduleTemplate
		{
			get
			{
				return this._ScheduleTemplate.Entity;
			}
			set
			{
				ScheduleTemplate previousValue = this._ScheduleTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ScheduleTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScheduleTemplate.Entity = null;
						previousValue.TimeSlotsTemplate.Remove(this);
					}
					this._ScheduleTemplate.Entity = value;
					if ((value != null))
					{
						value.TimeSlotsTemplate.Add(this);
						this._ScheduleTemplateID = value.ID;
					}
					else
					{
						this._ScheduleTemplateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ScheduleTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Trailer")]
	public partial class Trailer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AdditionalComments;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private System.Nullable<bool> _ToBeDeleted;
		
		private System.Nullable<int> _PartnerID;
		
		private bool _OnlySQL;
		
		private EntitySet<Shipping> _Shipping;
		
		private EntityRef<Partner> _Partner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdditionalCommentsChanging(string value);
    partial void OnAdditionalCommentsChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnToBeDeletedChanging(System.Nullable<bool> value);
    partial void OnToBeDeletedChanged();
    partial void OnPartnerIDChanging(System.Nullable<int> value);
    partial void OnPartnerIDChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Trailer()
		{
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			this._Partner = default(EntityRef<Partner>);
			OnCreated();
		}
		
		[Column(Storage="_AdditionalComments", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AdditionalComments
		{
			get
			{
				return this._AdditionalComments;
			}
			set
			{
				if ((this._AdditionalComments != value))
				{
					this.OnAdditionalCommentsChanging(value);
					this.SendPropertyChanging();
					this._AdditionalComments = value;
					this.SendPropertyChanged("AdditionalComments");
					this.OnAdditionalCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ToBeDeleted", DbType="Bit")]
		public System.Nullable<bool> ToBeDeleted
		{
			get
			{
				return this._ToBeDeleted;
			}
			set
			{
				if ((this._ToBeDeleted != value))
				{
					this.OnToBeDeletedChanging(value);
					this.SendPropertyChanging();
					this._ToBeDeleted = value;
					this.SendPropertyChanged("ToBeDeleted");
					this.OnToBeDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int")]
		public System.Nullable<int> PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Shipping_Trailer", Storage="_Shipping", ThisKey="ID", OtherKey="TrailerID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		[Association(Name="FK_Trailer_Partner", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.Trailer.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.Trailer.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Trailer = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Trailer = null;
		}
	}
	
	[Table(Name="dbo.TransportUnitType")]
	public partial class TransportUnitType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private bool _OnlySQL;
		
		private EntitySet<Route> _Route;
		
		private EntitySet<Shipping> _Shipping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public TransportUnitType()
		{
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Route_TransportUnitType", Storage="_Route", ThisKey="ID", OtherKey="TransportUnitTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_TransportUnitType", Storage="_Shipping", ThisKey="ID", OtherKey="TransportUnitTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.TransportUnitType = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.TransportUnitType = null;
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.TransportUnitType = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.TransportUnitType = null;
		}
	}
	
	[Table(Name="dbo.Truck")]
	public partial class Truck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AdditionalComments;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private System.Nullable<bool> _ToBeDeleted;
		
		private System.Nullable<int> _PartnerID;
		
		private string _VehicleType;
		
		private bool _OnlySQL;
		
		private EntitySet<Shipping> _Shipping;
		
		private EntitySet<Shipping> _Shipping_Truck;
		
		private EntityRef<Partner> _Partner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdditionalCommentsChanging(string value);
    partial void OnAdditionalCommentsChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnToBeDeletedChanging(System.Nullable<bool> value);
    partial void OnToBeDeletedChanged();
    partial void OnPartnerIDChanging(System.Nullable<int> value);
    partial void OnPartnerIDChanged();
    partial void OnVehicleTypeChanging(string value);
    partial void OnVehicleTypeChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Truck()
		{
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			this._Shipping_Truck = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping_Truck), new Action<Shipping>(this.detach_Shipping_Truck));
			this._Partner = default(EntityRef<Partner>);
			OnCreated();
		}
		
		[Column(Storage="_AdditionalComments", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AdditionalComments
		{
			get
			{
				return this._AdditionalComments;
			}
			set
			{
				if ((this._AdditionalComments != value))
				{
					this.OnAdditionalCommentsChanging(value);
					this.SendPropertyChanging();
					this._AdditionalComments = value;
					this.SendPropertyChanged("AdditionalComments");
					this.OnAdditionalCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ToBeDeleted", DbType="Bit")]
		public System.Nullable<bool> ToBeDeleted
		{
			get
			{
				return this._ToBeDeleted;
			}
			set
			{
				if ((this._ToBeDeleted != value))
				{
					this.OnToBeDeletedChanging(value);
					this.SendPropertyChanging();
					this._ToBeDeleted = value;
					this.SendPropertyChanged("ToBeDeleted");
					this.OnToBeDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int")]
		public System.Nullable<int> PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_VehicleType", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string VehicleType
		{
			get
			{
				return this._VehicleType;
			}
			set
			{
				if ((this._VehicleType != value))
				{
					this.OnVehicleTypeChanging(value);
					this.SendPropertyChanging();
					this._VehicleType = value;
					this.SendPropertyChanged("VehicleType");
					this.OnVehicleTypeChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Shipping_Escort", Storage="_Shipping", ThisKey="ID", OtherKey="EscortCarID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_Truck", Storage="_Shipping_Truck", ThisKey="ID", OtherKey="TruckID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping_Truck
		{
			get
			{
				return this._Shipping_Truck;
			}
			set
			{
				this._Shipping_Truck.Assign(value);
			}
		}
		
		[Association(Name="FK_Truck_Partner", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.Truck.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.Truck.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Truck = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Truck = null;
		}
		
		private void attach_Shipping_Truck(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Shipping_Truck = this;
		}
		
		private void detach_Shipping_Truck(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Shipping_Truck = null;
		}
	}
	
	[Table(Name="dbo.Warehouse")]
	public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author;
		
		private System.Nullable<int> _CommodityID;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _Editor;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _Title;
		
		private string _WarehouseAddress;
		
		private bool _OnlySQL;
		
		private EntitySet<Partner> _Partner;
		
		private EntitySet<Shipping> _Shipping;
		
		private EntitySet<ShippingPoint> _ShippingPoint;
		
		private EntityRef<Commodity> _Commodity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnCommodityIDChanging(System.Nullable<int> value);
    partial void OnCommodityIDChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnEditorChanging(string value);
    partial void OnEditorChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnWarehouseAddressChanging(string value);
    partial void OnWarehouseAddressChanged();
    partial void OnOnlySQLChanging(bool value);
    partial void OnOnlySQLChanged();
    #endregion
		
		public Warehouse()
		{
			this._Partner = new EntitySet<Partner>(new Action<Partner>(this.attach_Partner), new Action<Partner>(this.detach_Partner));
			this._Shipping = new EntitySet<Shipping>(new Action<Shipping>(this.attach_Shipping), new Action<Shipping>(this.detach_Shipping));
			this._ShippingPoint = new EntitySet<ShippingPoint>(new Action<ShippingPoint>(this.attach_ShippingPoint), new Action<ShippingPoint>(this.detach_ShippingPoint));
			this._Commodity = default(EntityRef<Commodity>);
			OnCreated();
		}
		
		[Column(Storage="_Author", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_CommodityID", DbType="Int")]
		public System.Nullable<int> CommodityID
		{
			get
			{
				return this._CommodityID;
			}
			set
			{
				if ((this._CommodityID != value))
				{
					if (this._Commodity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommodityIDChanging(value);
					this.SendPropertyChanging();
					this._CommodityID = value;
					this.SendPropertyChanged("CommodityID");
					this.OnCommodityIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Editor", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseAddress", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string WarehouseAddress
		{
			get
			{
				return this._WarehouseAddress;
			}
			set
			{
				if ((this._WarehouseAddress != value))
				{
					this.OnWarehouseAddressChanging(value);
					this.SendPropertyChanging();
					this._WarehouseAddress = value;
					this.SendPropertyChanged("WarehouseAddress");
					this.OnWarehouseAddressChanged();
				}
			}
		}
		
		[Column(Storage="_OnlySQL", DbType="Bit NOT NULL")]
		public bool OnlySQL
		{
			get
			{
				return this._OnlySQL;
			}
			set
			{
				if ((this._OnlySQL != value))
				{
					this.OnOnlySQLChanging(value);
					this.SendPropertyChanging();
					this._OnlySQL = value;
					this.SendPropertyChanged("OnlySQL");
					this.OnOnlySQLChanged();
				}
			}
		}
		
		[Association(Name="FK_Partner_Warehouse", Storage="_Partner", ThisKey="ID", OtherKey="WarehouseID", DeleteRule="NO ACTION")]
		public EntitySet<Partner> Partner
		{
			get
			{
				return this._Partner;
			}
			set
			{
				this._Partner.Assign(value);
			}
		}
		
		[Association(Name="FK_Shipping_Warehouse", Storage="_Shipping", ThisKey="ID", OtherKey="WarehouseID", DeleteRule="NO ACTION")]
		public EntitySet<Shipping> Shipping
		{
			get
			{
				return this._Shipping;
			}
			set
			{
				this._Shipping.Assign(value);
			}
		}
		
		[Association(Name="FK_ShippingPoint_Warehouse", Storage="_ShippingPoint", ThisKey="ID", OtherKey="WarehouseID", DeleteRule="NO ACTION")]
		public EntitySet<ShippingPoint> ShippingPoint
		{
			get
			{
				return this._ShippingPoint;
			}
			set
			{
				this._ShippingPoint.Assign(value);
			}
		}
		
		[Association(Name="FK_Warehouse_Commodity", Storage="_Commodity", ThisKey="CommodityID", OtherKey="ID", IsForeignKey=true)]
		public Commodity Commodity
		{
			get
			{
				return this._Commodity.Entity;
			}
			set
			{
				Commodity previousValue = this._Commodity.Entity;
				if (((previousValue != value) 
							|| (this._Commodity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commodity.Entity = null;
						previousValue.Warehouse.Remove(this);
					}
					this._Commodity.Entity = value;
					if ((value != null))
					{
						value.Warehouse.Add(this);
						this._CommodityID = value.ID;
					}
					else
					{
						this._CommodityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Commodity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Partner(Partner entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_Partner(Partner entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
		
		private void attach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_Shipping(Shipping entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
		
		private void attach_ShippingPoint(ShippingPoint entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_ShippingPoint(ShippingPoint entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
	}
}
#pragma warning restore 1591

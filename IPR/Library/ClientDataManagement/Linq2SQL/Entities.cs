#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CAS.SmartFactory.IPR.Client.DataManagement.Linq2SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class IPRDEV : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivitiesLogs(ActivitiesLogs instance);
    partial void UpdateActivitiesLogs(ActivitiesLogs instance);
    partial void DeleteActivitiesLogs(ActivitiesLogs instance);
    partial void InsertArchivingLogs(ArchivingLogs instance);
    partial void UpdateArchivingLogs(ArchivingLogs instance);
    partial void DeleteArchivingLogs(ArchivingLogs instance);
    partial void InsertArchivingOperationLogs(ArchivingOperationLogs instance);
    partial void UpdateArchivingOperationLogs(ArchivingOperationLogs instance);
    partial void DeleteArchivingOperationLogs(ArchivingOperationLogs instance);
    partial void InsertBalanceBatch(BalanceBatch instance);
    partial void UpdateBalanceBatch(BalanceBatch instance);
    partial void DeleteBalanceBatch(BalanceBatch instance);
    partial void InsertBalanceIPR(BalanceIPR instance);
    partial void UpdateBalanceIPR(BalanceIPR instance);
    partial void DeleteBalanceIPR(BalanceIPR instance);
    partial void InsertBatch(Batch instance);
    partial void UpdateBatch(Batch instance);
    partial void DeleteBatch(Batch instance);
    partial void InsertBatchLibrary(BatchLibrary instance);
    partial void UpdateBatchLibrary(BatchLibrary instance);
    partial void DeleteBatchLibrary(BatchLibrary instance);
    partial void InsertClearence(Clearence instance);
    partial void UpdateClearence(Clearence instance);
    partial void DeleteClearence(Clearence instance);
    partial void InsertConsent(Consent instance);
    partial void UpdateConsent(Consent instance);
    partial void DeleteConsent(Consent instance);
    partial void InsertCustomsUnion(CustomsUnion instance);
    partial void UpdateCustomsUnion(CustomsUnion instance);
    partial void DeleteCustomsUnion(CustomsUnion instance);
    partial void InsertCutfillerCoefficient(CutfillerCoefficient instance);
    partial void UpdateCutfillerCoefficient(CutfillerCoefficient instance);
    partial void DeleteCutfillerCoefficient(CutfillerCoefficient instance);
    partial void InsertDisposal(Disposal instance);
    partial void UpdateDisposal(Disposal instance);
    partial void DeleteDisposal(Disposal instance);
    partial void InsertDust(Dust instance);
    partial void UpdateDust(Dust instance);
    partial void DeleteDust(Dust instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertInvoiceContent(InvoiceContent instance);
    partial void UpdateInvoiceContent(InvoiceContent instance);
    partial void DeleteInvoiceContent(InvoiceContent instance);
    partial void InsertInvoiceLibrary(InvoiceLibrary instance);
    partial void UpdateInvoiceLibrary(InvoiceLibrary instance);
    partial void DeleteInvoiceLibrary(InvoiceLibrary instance);
    partial void InsertIPR(IPR instance);
    partial void UpdateIPR(IPR instance);
    partial void DeleteIPR(IPR instance);
    partial void InsertIPRLibrary(IPRLibrary instance);
    partial void UpdateIPRLibrary(IPRLibrary instance);
    partial void DeleteIPRLibrary(IPRLibrary instance);
    partial void InsertJSOXCustomsSummary(JSOXCustomsSummary instance);
    partial void UpdateJSOXCustomsSummary(JSOXCustomsSummary instance);
    partial void DeleteJSOXCustomsSummary(JSOXCustomsSummary instance);
    partial void InsertJSOXLibrary(JSOXLibrary instance);
    partial void UpdateJSOXLibrary(JSOXLibrary instance);
    partial void DeleteJSOXLibrary(JSOXLibrary instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertPCNCode(PCNCode instance);
    partial void UpdatePCNCode(PCNCode instance);
    partial void DeletePCNCode(PCNCode instance);
    partial void InsertSADConsignment(SADConsignment instance);
    partial void UpdateSADConsignment(SADConsignment instance);
    partial void DeleteSADConsignment(SADConsignment instance);
    partial void InsertSADDocument(SADDocument instance);
    partial void UpdateSADDocument(SADDocument instance);
    partial void DeleteSADDocument(SADDocument instance);
    partial void InsertSADDocumentLibrary(SADDocumentLibrary instance);
    partial void UpdateSADDocumentLibrary(SADDocumentLibrary instance);
    partial void DeleteSADDocumentLibrary(SADDocumentLibrary instance);
    partial void InsertSADDuties(SADDuties instance);
    partial void UpdateSADDuties(SADDuties instance);
    partial void DeleteSADDuties(SADDuties instance);
    partial void InsertSADGood(SADGood instance);
    partial void UpdateSADGood(SADGood instance);
    partial void DeleteSADGood(SADGood instance);
    partial void InsertSADPackage(SADPackage instance);
    partial void UpdateSADPackage(SADPackage instance);
    partial void DeleteSADPackage(SADPackage instance);
    partial void InsertSADQuantity(SADQuantity instance);
    partial void UpdateSADQuantity(SADQuantity instance);
    partial void DeleteSADQuantity(SADQuantity instance);
    partial void InsertSADRequiredDocuments(SADRequiredDocuments instance);
    partial void UpdateSADRequiredDocuments(SADRequiredDocuments instance);
    partial void DeleteSADRequiredDocuments(SADRequiredDocuments instance);
    partial void InsertSettings(Settings instance);
    partial void UpdateSettings(Settings instance);
    partial void DeleteSettings(Settings instance);
    partial void InsertSHMenthol(SHMenthol instance);
    partial void UpdateSHMenthol(SHMenthol instance);
    partial void DeleteSHMenthol(SHMenthol instance);
    partial void InsertSKU(SKU instance);
    partial void UpdateSKU(SKU instance);
    partial void DeleteSKU(SKU instance);
    partial void InsertSKULibrary(SKULibrary instance);
    partial void UpdateSKULibrary(SKULibrary instance);
    partial void DeleteSKULibrary(SKULibrary instance);
    partial void InsertSPFormat(SPFormat instance);
    partial void UpdateSPFormat(SPFormat instance);
    partial void DeleteSPFormat(SPFormat instance);
    partial void InsertStockEntry(StockEntry instance);
    partial void UpdateStockEntry(StockEntry instance);
    partial void DeleteStockEntry(StockEntry instance);
    partial void InsertStockLibrary(StockLibrary instance);
    partial void UpdateStockLibrary(StockLibrary instance);
    partial void DeleteStockLibrary(StockLibrary instance);
    partial void InsertUsage(Usage instance);
    partial void UpdateUsage(Usage instance);
    partial void DeleteUsage(Usage instance);
    partial void InsertWarehouse(Warehouse instance);
    partial void UpdateWarehouse(Warehouse instance);
    partial void DeleteWarehouse(Warehouse instance);
    partial void InsertWaste(Waste instance);
    partial void UpdateWaste(Waste instance);
    partial void DeleteWaste(Waste instance);
    #endregion
		
		public IPRDEV(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IPRDEV(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IPRDEV(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IPRDEV(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ActivitiesLogs> ActivitiesLogs
		{
			get
			{
				return this.GetTable<ActivitiesLogs>();
			}
		}
		
		public System.Data.Linq.Table<ArchivingLogs> ArchivingLogs
		{
			get
			{
				return this.GetTable<ArchivingLogs>();
			}
		}
		
		public System.Data.Linq.Table<ArchivingOperationLogs> ArchivingOperationLogs
		{
			get
			{
				return this.GetTable<ArchivingOperationLogs>();
			}
		}
		
		public System.Data.Linq.Table<BalanceBatch> BalanceBatch
		{
			get
			{
				return this.GetTable<BalanceBatch>();
			}
		}
		
		public System.Data.Linq.Table<BalanceIPR> BalanceIPR
		{
			get
			{
				return this.GetTable<BalanceIPR>();
			}
		}
		
		public System.Data.Linq.Table<Batch> Batch
		{
			get
			{
				return this.GetTable<Batch>();
			}
		}
		
		public System.Data.Linq.Table<BatchLibrary> BatchLibrary
		{
			get
			{
				return this.GetTable<BatchLibrary>();
			}
		}
		
		public System.Data.Linq.Table<Clearence> Clearence
		{
			get
			{
				return this.GetTable<Clearence>();
			}
		}
		
		public System.Data.Linq.Table<Consent> Consent
		{
			get
			{
				return this.GetTable<Consent>();
			}
		}
		
		public System.Data.Linq.Table<CustomsUnion> CustomsUnion
		{
			get
			{
				return this.GetTable<CustomsUnion>();
			}
		}
		
		public System.Data.Linq.Table<CutfillerCoefficient> CutfillerCoefficient
		{
			get
			{
				return this.GetTable<CutfillerCoefficient>();
			}
		}
		
		public System.Data.Linq.Table<Disposal> Disposal
		{
			get
			{
				return this.GetTable<Disposal>();
			}
		}
		
		public System.Data.Linq.Table<Dust> Dust
		{
			get
			{
				return this.GetTable<Dust>();
			}
		}
		
		public System.Data.Linq.Table<History> History
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceContent> InvoiceContent
		{
			get
			{
				return this.GetTable<InvoiceContent>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceLibrary> InvoiceLibrary
		{
			get
			{
				return this.GetTable<InvoiceLibrary>();
			}
		}
		
		public System.Data.Linq.Table<IPR> IPR
		{
			get
			{
				return this.GetTable<IPR>();
			}
		}
		
		public System.Data.Linq.Table<IPRLibrary> IPRLibrary
		{
			get
			{
				return this.GetTable<IPRLibrary>();
			}
		}
		
		public System.Data.Linq.Table<JSOXCustomsSummary> JSOXCustomsSummary
		{
			get
			{
				return this.GetTable<JSOXCustomsSummary>();
			}
		}
		
		public System.Data.Linq.Table<JSOXLibrary> JSOXLibrary
		{
			get
			{
				return this.GetTable<JSOXLibrary>();
			}
		}
		
		public System.Data.Linq.Table<Material> Material
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<PCNCode> PCNCode
		{
			get
			{
				return this.GetTable<PCNCode>();
			}
		}
		
		public System.Data.Linq.Table<SADConsignment> SADConsignment
		{
			get
			{
				return this.GetTable<SADConsignment>();
			}
		}
		
		public System.Data.Linq.Table<SADDocument> SADDocument
		{
			get
			{
				return this.GetTable<SADDocument>();
			}
		}
		
		public System.Data.Linq.Table<SADDocumentLibrary> SADDocumentLibrary
		{
			get
			{
				return this.GetTable<SADDocumentLibrary>();
			}
		}
		
		public System.Data.Linq.Table<SADDuties> SADDuties
		{
			get
			{
				return this.GetTable<SADDuties>();
			}
		}
		
		public System.Data.Linq.Table<SADGood> SADGood
		{
			get
			{
				return this.GetTable<SADGood>();
			}
		}
		
		public System.Data.Linq.Table<SADPackage> SADPackage
		{
			get
			{
				return this.GetTable<SADPackage>();
			}
		}
		
		public System.Data.Linq.Table<SADQuantity> SADQuantity
		{
			get
			{
				return this.GetTable<SADQuantity>();
			}
		}
		
		public System.Data.Linq.Table<SADRequiredDocuments> SADRequiredDocuments
		{
			get
			{
				return this.GetTable<SADRequiredDocuments>();
			}
		}
		
		public System.Data.Linq.Table<Settings> Settings
		{
			get
			{
				return this.GetTable<Settings>();
			}
		}
		
		public System.Data.Linq.Table<SHMenthol> SHMenthol
		{
			get
			{
				return this.GetTable<SHMenthol>();
			}
		}
		
		public System.Data.Linq.Table<SKU> SKU
		{
			get
			{
				return this.GetTable<SKU>();
			}
		}
		
		public System.Data.Linq.Table<SKULibrary> SKULibrary
		{
			get
			{
				return this.GetTable<SKULibrary>();
			}
		}
		
		public System.Data.Linq.Table<SPFormat> SPFormat
		{
			get
			{
				return this.GetTable<SPFormat>();
			}
		}
		
		public System.Data.Linq.Table<StockEntry> StockEntry
		{
			get
			{
				return this.GetTable<StockEntry>();
			}
		}
		
		public System.Data.Linq.Table<StockLibrary> StockLibrary
		{
			get
			{
				return this.GetTable<StockLibrary>();
			}
		}
		
		public System.Data.Linq.Table<Usage> Usage
		{
			get
			{
				return this.GetTable<Usage>();
			}
		}
		
		public System.Data.Linq.Table<Warehouse> Warehouse
		{
			get
			{
				return this.GetTable<Warehouse>();
			}
		}
		
		public System.Data.Linq.Table<Waste> Waste
		{
			get
			{
				return this.GetTable<Waste>();
			}
		}
	}
	
	[Table(Name="dbo.ActivitiesLogs")]
	public partial class ActivitiesLogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Operation;
		
		private System.DateTime _Date;
		
		private string _UserName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public ActivitiesLogs()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Operation", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ArchivingLogs")]
	public partial class ArchivingLogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ListName;
		
		private int _ItemID;
		
		private System.DateTime _Date;
		
		private string _UserName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnListNameChanging(string value);
    partial void OnListNameChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public ArchivingLogs()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ListName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ListName
		{
			get
			{
				return this._ListName;
			}
			set
			{
				if ((this._ListName != value))
				{
					this.OnListNameChanging(value);
					this.SendPropertyChanging();
					this._ListName = value;
					this.SendPropertyChanged("ListName");
					this.OnListNameChanged();
				}
			}
		}
		
		[Column(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ArchivingOperationLogs")]
	public partial class ArchivingOperationLogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Operation;
		
		private System.DateTime _Date;
		
		private string _UserName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public ArchivingOperationLogs()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Operation", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BalanceBatch")]
	public partial class BalanceBatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<double> _Balance;
		
		private System.Nullable<int> _Balance2JSOXLibraryIndex;
		
		private string _Batch;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _DocumentNo;
		
		private System.Nullable<double> _DustCSNotStarted;
		
		private System.Nullable<double> _DustCSStarted;
		
		private int _ID;
		
		private System.Nullable<double> _IPRBook;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Nullable<double> _OveruseCSNotStarted;
		
		private System.Nullable<double> _OveruseCSStarted;
		
		private System.Nullable<double> _PureTobaccoCSNotStarted;
		
		private System.Nullable<double> _PureTobaccoCSStarted;
		
		private System.Nullable<double> _SHMentholCSNotStarted;
		
		private System.Nullable<double> _SHMentholCSStarted;
		
		private System.Nullable<double> _SHWasteOveruseCSNotStarted;
		
		private string _SKU;
		
		private string _Title;
		
		private System.Nullable<double> _TobaccoAvailable;
		
		private System.Nullable<double> _TobaccoCSFinished;
		
		private System.Nullable<double> _TobaccoEnteredIntoIPR;
		
		private System.Nullable<double> _TobaccoInCigarettesProduction;
		
		private System.Nullable<double> _TobaccoInCigarettesWarehouse;
		
		private System.Nullable<double> _TobaccoInCutfillerWarehouse;
		
		private System.Nullable<double> _TobaccoInFGCSNotStarted;
		
		private System.Nullable<double> _TobaccoInFGCSStarted;
		
		private System.Nullable<double> _TobaccoInWarehouse;
		
		private System.Nullable<double> _TobaccoStarted;
		
		private System.Nullable<double> _TobaccoToBeUsedInTheProduction;
		
		private System.Nullable<double> _TobaccoUsedInTheProduction;
		
		private System.Nullable<double> _WasteCSNotStarted;
		
		private System.Nullable<double> _WasteCSStarted;
		
		private EntityRef<JSOXLibrary> _JSOXLibrary;
		
		private EntitySet<BalanceIPR> _BalanceIPR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBalanceChanging(System.Nullable<double> value);
    partial void OnBalanceChanged();
    partial void OnBalance2JSOXLibraryIndexChanging(System.Nullable<int> value);
    partial void OnBalance2JSOXLibraryIndexChanged();
    partial void OnBatchChanging(string value);
    partial void OnBatchChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDocumentNoChanging(string value);
    partial void OnDocumentNoChanged();
    partial void OnDustCSNotStartedChanging(System.Nullable<double> value);
    partial void OnDustCSNotStartedChanged();
    partial void OnDustCSStartedChanging(System.Nullable<double> value);
    partial void OnDustCSStartedChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIPRBookChanging(System.Nullable<double> value);
    partial void OnIPRBookChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnOveruseCSNotStartedChanging(System.Nullable<double> value);
    partial void OnOveruseCSNotStartedChanged();
    partial void OnOveruseCSStartedChanging(System.Nullable<double> value);
    partial void OnOveruseCSStartedChanged();
    partial void OnPureTobaccoCSNotStartedChanging(System.Nullable<double> value);
    partial void OnPureTobaccoCSNotStartedChanged();
    partial void OnPureTobaccoCSStartedChanging(System.Nullable<double> value);
    partial void OnPureTobaccoCSStartedChanged();
    partial void OnSHMentholCSNotStartedChanging(System.Nullable<double> value);
    partial void OnSHMentholCSNotStartedChanged();
    partial void OnSHMentholCSStartedChanging(System.Nullable<double> value);
    partial void OnSHMentholCSStartedChanged();
    partial void OnSHWasteOveruseCSNotStartedChanging(System.Nullable<double> value);
    partial void OnSHWasteOveruseCSNotStartedChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTobaccoAvailableChanging(System.Nullable<double> value);
    partial void OnTobaccoAvailableChanged();
    partial void OnTobaccoCSFinishedChanging(System.Nullable<double> value);
    partial void OnTobaccoCSFinishedChanged();
    partial void OnTobaccoEnteredIntoIPRChanging(System.Nullable<double> value);
    partial void OnTobaccoEnteredIntoIPRChanged();
    partial void OnTobaccoInCigarettesProductionChanging(System.Nullable<double> value);
    partial void OnTobaccoInCigarettesProductionChanged();
    partial void OnTobaccoInCigarettesWarehouseChanging(System.Nullable<double> value);
    partial void OnTobaccoInCigarettesWarehouseChanged();
    partial void OnTobaccoInCutfillerWarehouseChanging(System.Nullable<double> value);
    partial void OnTobaccoInCutfillerWarehouseChanged();
    partial void OnTobaccoInFGCSNotStartedChanging(System.Nullable<double> value);
    partial void OnTobaccoInFGCSNotStartedChanged();
    partial void OnTobaccoInFGCSStartedChanging(System.Nullable<double> value);
    partial void OnTobaccoInFGCSStartedChanged();
    partial void OnTobaccoInWarehouseChanging(System.Nullable<double> value);
    partial void OnTobaccoInWarehouseChanged();
    partial void OnTobaccoStartedChanging(System.Nullable<double> value);
    partial void OnTobaccoStartedChanged();
    partial void OnTobaccoToBeUsedInTheProductionChanging(System.Nullable<double> value);
    partial void OnTobaccoToBeUsedInTheProductionChanged();
    partial void OnTobaccoUsedInTheProductionChanging(System.Nullable<double> value);
    partial void OnTobaccoUsedInTheProductionChanged();
    partial void OnWasteCSNotStartedChanging(System.Nullable<double> value);
    partial void OnWasteCSNotStartedChanged();
    partial void OnWasteCSStartedChanging(System.Nullable<double> value);
    partial void OnWasteCSStartedChanged();
    #endregion
		
		public BalanceBatch()
		{
			this._JSOXLibrary = default(EntityRef<JSOXLibrary>);
			this._BalanceIPR = new EntitySet<BalanceIPR>(new Action<BalanceIPR>(this.attach_BalanceIPR), new Action<BalanceIPR>(this.detach_BalanceIPR));
			OnCreated();
		}
		
		[Column(Storage="_Balance", DbType="Float")]
		public System.Nullable<double> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_Balance2JSOXLibraryIndex", DbType="Int")]
		public System.Nullable<int> Balance2JSOXLibraryIndex
		{
			get
			{
				return this._Balance2JSOXLibraryIndex;
			}
			set
			{
				if ((this._Balance2JSOXLibraryIndex != value))
				{
					if (this._JSOXLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBalance2JSOXLibraryIndexChanging(value);
					this.SendPropertyChanging();
					this._Balance2JSOXLibraryIndex = value;
					this.SendPropertyChanged("Balance2JSOXLibraryIndex");
					this.OnBalance2JSOXLibraryIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Batch", DbType="NVarChar(255)")]
		public string Batch
		{
			get
			{
				return this._Batch;
			}
			set
			{
				if ((this._Batch != value))
				{
					this.OnBatchChanging(value);
					this.SendPropertyChanging();
					this._Batch = value;
					this.SendPropertyChanged("Batch");
					this.OnBatchChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentNo", DbType="NVarChar(255)")]
		public string DocumentNo
		{
			get
			{
				return this._DocumentNo;
			}
			set
			{
				if ((this._DocumentNo != value))
				{
					this.OnDocumentNoChanging(value);
					this.SendPropertyChanging();
					this._DocumentNo = value;
					this.SendPropertyChanged("DocumentNo");
					this.OnDocumentNoChanged();
				}
			}
		}
		
		[Column(Storage="_DustCSNotStarted", DbType="Float")]
		public System.Nullable<double> DustCSNotStarted
		{
			get
			{
				return this._DustCSNotStarted;
			}
			set
			{
				if ((this._DustCSNotStarted != value))
				{
					this.OnDustCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._DustCSNotStarted = value;
					this.SendPropertyChanged("DustCSNotStarted");
					this.OnDustCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_DustCSStarted", DbType="Float")]
		public System.Nullable<double> DustCSStarted
		{
			get
			{
				return this._DustCSStarted;
			}
			set
			{
				if ((this._DustCSStarted != value))
				{
					this.OnDustCSStartedChanging(value);
					this.SendPropertyChanging();
					this._DustCSStarted = value;
					this.SendPropertyChanged("DustCSStarted");
					this.OnDustCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IPRBook", DbType="Float")]
		public System.Nullable<double> IPRBook
		{
			get
			{
				return this._IPRBook;
			}
			set
			{
				if ((this._IPRBook != value))
				{
					this.OnIPRBookChanging(value);
					this.SendPropertyChanging();
					this._IPRBook = value;
					this.SendPropertyChanged("IPRBook");
					this.OnIPRBookChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_OveruseCSNotStarted", DbType="Float")]
		public System.Nullable<double> OveruseCSNotStarted
		{
			get
			{
				return this._OveruseCSNotStarted;
			}
			set
			{
				if ((this._OveruseCSNotStarted != value))
				{
					this.OnOveruseCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._OveruseCSNotStarted = value;
					this.SendPropertyChanged("OveruseCSNotStarted");
					this.OnOveruseCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_OveruseCSStarted", DbType="Float")]
		public System.Nullable<double> OveruseCSStarted
		{
			get
			{
				return this._OveruseCSStarted;
			}
			set
			{
				if ((this._OveruseCSStarted != value))
				{
					this.OnOveruseCSStartedChanging(value);
					this.SendPropertyChanging();
					this._OveruseCSStarted = value;
					this.SendPropertyChanged("OveruseCSStarted");
					this.OnOveruseCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_PureTobaccoCSNotStarted", DbType="Float")]
		public System.Nullable<double> PureTobaccoCSNotStarted
		{
			get
			{
				return this._PureTobaccoCSNotStarted;
			}
			set
			{
				if ((this._PureTobaccoCSNotStarted != value))
				{
					this.OnPureTobaccoCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._PureTobaccoCSNotStarted = value;
					this.SendPropertyChanged("PureTobaccoCSNotStarted");
					this.OnPureTobaccoCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_PureTobaccoCSStarted", DbType="Float")]
		public System.Nullable<double> PureTobaccoCSStarted
		{
			get
			{
				return this._PureTobaccoCSStarted;
			}
			set
			{
				if ((this._PureTobaccoCSStarted != value))
				{
					this.OnPureTobaccoCSStartedChanging(value);
					this.SendPropertyChanging();
					this._PureTobaccoCSStarted = value;
					this.SendPropertyChanged("PureTobaccoCSStarted");
					this.OnPureTobaccoCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_SHMentholCSNotStarted", DbType="Float")]
		public System.Nullable<double> SHMentholCSNotStarted
		{
			get
			{
				return this._SHMentholCSNotStarted;
			}
			set
			{
				if ((this._SHMentholCSNotStarted != value))
				{
					this.OnSHMentholCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._SHMentholCSNotStarted = value;
					this.SendPropertyChanged("SHMentholCSNotStarted");
					this.OnSHMentholCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_SHMentholCSStarted", DbType="Float")]
		public System.Nullable<double> SHMentholCSStarted
		{
			get
			{
				return this._SHMentholCSStarted;
			}
			set
			{
				if ((this._SHMentholCSStarted != value))
				{
					this.OnSHMentholCSStartedChanging(value);
					this.SendPropertyChanging();
					this._SHMentholCSStarted = value;
					this.SendPropertyChanged("SHMentholCSStarted");
					this.OnSHMentholCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_SHWasteOveruseCSNotStarted", DbType="Float")]
		public System.Nullable<double> SHWasteOveruseCSNotStarted
		{
			get
			{
				return this._SHWasteOveruseCSNotStarted;
			}
			set
			{
				if ((this._SHWasteOveruseCSNotStarted != value))
				{
					this.OnSHWasteOveruseCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._SHWasteOveruseCSNotStarted = value;
					this.SendPropertyChanged("SHWasteOveruseCSNotStarted");
					this.OnSHWasteOveruseCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(255)")]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoAvailable", DbType="Float")]
		public System.Nullable<double> TobaccoAvailable
		{
			get
			{
				return this._TobaccoAvailable;
			}
			set
			{
				if ((this._TobaccoAvailable != value))
				{
					this.OnTobaccoAvailableChanging(value);
					this.SendPropertyChanging();
					this._TobaccoAvailable = value;
					this.SendPropertyChanged("TobaccoAvailable");
					this.OnTobaccoAvailableChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoCSFinished", DbType="Float")]
		public System.Nullable<double> TobaccoCSFinished
		{
			get
			{
				return this._TobaccoCSFinished;
			}
			set
			{
				if ((this._TobaccoCSFinished != value))
				{
					this.OnTobaccoCSFinishedChanging(value);
					this.SendPropertyChanging();
					this._TobaccoCSFinished = value;
					this.SendPropertyChanged("TobaccoCSFinished");
					this.OnTobaccoCSFinishedChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoEnteredIntoIPR", DbType="Float")]
		public System.Nullable<double> TobaccoEnteredIntoIPR
		{
			get
			{
				return this._TobaccoEnteredIntoIPR;
			}
			set
			{
				if ((this._TobaccoEnteredIntoIPR != value))
				{
					this.OnTobaccoEnteredIntoIPRChanging(value);
					this.SendPropertyChanging();
					this._TobaccoEnteredIntoIPR = value;
					this.SendPropertyChanged("TobaccoEnteredIntoIPR");
					this.OnTobaccoEnteredIntoIPRChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoInCigarettesProduction", DbType="Float")]
		public System.Nullable<double> TobaccoInCigarettesProduction
		{
			get
			{
				return this._TobaccoInCigarettesProduction;
			}
			set
			{
				if ((this._TobaccoInCigarettesProduction != value))
				{
					this.OnTobaccoInCigarettesProductionChanging(value);
					this.SendPropertyChanging();
					this._TobaccoInCigarettesProduction = value;
					this.SendPropertyChanged("TobaccoInCigarettesProduction");
					this.OnTobaccoInCigarettesProductionChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoInCigarettesWarehouse", DbType="Float")]
		public System.Nullable<double> TobaccoInCigarettesWarehouse
		{
			get
			{
				return this._TobaccoInCigarettesWarehouse;
			}
			set
			{
				if ((this._TobaccoInCigarettesWarehouse != value))
				{
					this.OnTobaccoInCigarettesWarehouseChanging(value);
					this.SendPropertyChanging();
					this._TobaccoInCigarettesWarehouse = value;
					this.SendPropertyChanged("TobaccoInCigarettesWarehouse");
					this.OnTobaccoInCigarettesWarehouseChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoInCutfillerWarehouse", DbType="Float")]
		public System.Nullable<double> TobaccoInCutfillerWarehouse
		{
			get
			{
				return this._TobaccoInCutfillerWarehouse;
			}
			set
			{
				if ((this._TobaccoInCutfillerWarehouse != value))
				{
					this.OnTobaccoInCutfillerWarehouseChanging(value);
					this.SendPropertyChanging();
					this._TobaccoInCutfillerWarehouse = value;
					this.SendPropertyChanged("TobaccoInCutfillerWarehouse");
					this.OnTobaccoInCutfillerWarehouseChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoInFGCSNotStarted", DbType="Float")]
		public System.Nullable<double> TobaccoInFGCSNotStarted
		{
			get
			{
				return this._TobaccoInFGCSNotStarted;
			}
			set
			{
				if ((this._TobaccoInFGCSNotStarted != value))
				{
					this.OnTobaccoInFGCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._TobaccoInFGCSNotStarted = value;
					this.SendPropertyChanged("TobaccoInFGCSNotStarted");
					this.OnTobaccoInFGCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoInFGCSStarted", DbType="Float")]
		public System.Nullable<double> TobaccoInFGCSStarted
		{
			get
			{
				return this._TobaccoInFGCSStarted;
			}
			set
			{
				if ((this._TobaccoInFGCSStarted != value))
				{
					this.OnTobaccoInFGCSStartedChanging(value);
					this.SendPropertyChanging();
					this._TobaccoInFGCSStarted = value;
					this.SendPropertyChanged("TobaccoInFGCSStarted");
					this.OnTobaccoInFGCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoInWarehouse", DbType="Float")]
		public System.Nullable<double> TobaccoInWarehouse
		{
			get
			{
				return this._TobaccoInWarehouse;
			}
			set
			{
				if ((this._TobaccoInWarehouse != value))
				{
					this.OnTobaccoInWarehouseChanging(value);
					this.SendPropertyChanging();
					this._TobaccoInWarehouse = value;
					this.SendPropertyChanged("TobaccoInWarehouse");
					this.OnTobaccoInWarehouseChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoStarted", DbType="Float")]
		public System.Nullable<double> TobaccoStarted
		{
			get
			{
				return this._TobaccoStarted;
			}
			set
			{
				if ((this._TobaccoStarted != value))
				{
					this.OnTobaccoStartedChanging(value);
					this.SendPropertyChanging();
					this._TobaccoStarted = value;
					this.SendPropertyChanged("TobaccoStarted");
					this.OnTobaccoStartedChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoToBeUsedInTheProduction", DbType="Float")]
		public System.Nullable<double> TobaccoToBeUsedInTheProduction
		{
			get
			{
				return this._TobaccoToBeUsedInTheProduction;
			}
			set
			{
				if ((this._TobaccoToBeUsedInTheProduction != value))
				{
					this.OnTobaccoToBeUsedInTheProductionChanging(value);
					this.SendPropertyChanging();
					this._TobaccoToBeUsedInTheProduction = value;
					this.SendPropertyChanged("TobaccoToBeUsedInTheProduction");
					this.OnTobaccoToBeUsedInTheProductionChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoUsedInTheProduction", DbType="Float")]
		public System.Nullable<double> TobaccoUsedInTheProduction
		{
			get
			{
				return this._TobaccoUsedInTheProduction;
			}
			set
			{
				if ((this._TobaccoUsedInTheProduction != value))
				{
					this.OnTobaccoUsedInTheProductionChanging(value);
					this.SendPropertyChanging();
					this._TobaccoUsedInTheProduction = value;
					this.SendPropertyChanged("TobaccoUsedInTheProduction");
					this.OnTobaccoUsedInTheProductionChanged();
				}
			}
		}
		
		[Column(Storage="_WasteCSNotStarted", DbType="Float")]
		public System.Nullable<double> WasteCSNotStarted
		{
			get
			{
				return this._WasteCSNotStarted;
			}
			set
			{
				if ((this._WasteCSNotStarted != value))
				{
					this.OnWasteCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._WasteCSNotStarted = value;
					this.SendPropertyChanged("WasteCSNotStarted");
					this.OnWasteCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_WasteCSStarted", DbType="Float")]
		public System.Nullable<double> WasteCSStarted
		{
			get
			{
				return this._WasteCSStarted;
			}
			set
			{
				if ((this._WasteCSStarted != value))
				{
					this.OnWasteCSStartedChanging(value);
					this.SendPropertyChanging();
					this._WasteCSStarted = value;
					this.SendPropertyChanged("WasteCSStarted");
					this.OnWasteCSStartedChanged();
				}
			}
		}
		
		[Association(Name="FK_BalanceBatch_JSOXLibrary", Storage="_JSOXLibrary", ThisKey="Balance2JSOXLibraryIndex", OtherKey="ID", IsForeignKey=true)]
		public JSOXLibrary JSOXLibrary
		{
			get
			{
				return this._JSOXLibrary.Entity;
			}
			set
			{
				JSOXLibrary previousValue = this._JSOXLibrary.Entity;
				if (((previousValue != value) 
							|| (this._JSOXLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JSOXLibrary.Entity = null;
						previousValue.BalanceBatch.Remove(this);
					}
					this._JSOXLibrary.Entity = value;
					if ((value != null))
					{
						value.BalanceBatch.Add(this);
						this._Balance2JSOXLibraryIndex = value.ID;
					}
					else
					{
						this._Balance2JSOXLibraryIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("JSOXLibrary");
				}
			}
		}
		
		[Association(Name="FK_BalanceIPR_BalanceBatch", Storage="_BalanceIPR", ThisKey="ID", OtherKey="BalanceBatchIndex", DeleteRule="NO ACTION")]
		public EntitySet<BalanceIPR> BalanceIPR
		{
			get
			{
				return this._BalanceIPR;
			}
			set
			{
				this._BalanceIPR.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BalanceIPR(BalanceIPR entity)
		{
			this.SendPropertyChanging();
			entity.BalanceBatch = this;
		}
		
		private void detach_BalanceIPR(BalanceIPR entity)
		{
			this.SendPropertyChanging();
			entity.BalanceBatch = null;
		}
	}
	
	[Table(Name="dbo.BalanceIPR")]
	public partial class BalanceIPR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Archival;
		
		private System.Nullable<double> _Balance;
		
		private System.Nullable<int> _BalanceBatchIndex;
		
		private System.Nullable<int> _BalanceIPR2JSOXIndex;
		
		private string _Batch;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CustomsProcedure;
		
		private string _DocumentNo;
		
		private System.Nullable<double> _DustCSNotStarted;
		
		private System.Nullable<double> _DustCSStarted;
		
		private int _ID;
		
		private string _InvoiceNo;
		
		private System.Nullable<double> _IPRBook;
		
		private System.Nullable<int> _IPRIndex;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _OGLIntroduction;
		
		private System.Nullable<double> _OveruseCSNotStarted;
		
		private System.Nullable<double> _OveruseCSStarted;
		
		private System.Nullable<double> _PureTobaccoCSNotStarted;
		
		private System.Nullable<double> _PureTobaccoCSStarted;
		
		private System.Nullable<double> _SHMentholCSNotStarted;
		
		private System.Nullable<double> _SHMentholCSStarted;
		
		private System.Nullable<double> _SHWasteOveruseCSNotStarted;
		
		private string _SKU;
		
		private string _Title;
		
		private System.Nullable<double> _TobaccoAvailable;
		
		private System.Nullable<double> _TobaccoCSFinished;
		
		private System.Nullable<double> _TobaccoEnteredIntoIPR;
		
		private System.Nullable<double> _TobaccoInFGCSNotStarted;
		
		private System.Nullable<double> _TobaccoInFGCSStarted;
		
		private System.Nullable<double> _TobaccoStarted;
		
		private System.Nullable<double> _TobaccoToBeUsedInTheProduction;
		
		private System.Nullable<double> _TobaccoUsedInTheProduction;
		
		private System.Nullable<double> _WasteCSNotStarted;
		
		private System.Nullable<double> _WasteCSStarted;
		
		private EntityRef<BalanceBatch> _BalanceBatch;
		
		private EntityRef<IPR> _IPR;
		
		private EntityRef<JSOXLibrary> _JSOXLibrary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnBalanceChanging(System.Nullable<double> value);
    partial void OnBalanceChanged();
    partial void OnBalanceBatchIndexChanging(System.Nullable<int> value);
    partial void OnBalanceBatchIndexChanged();
    partial void OnBalanceIPR2JSOXIndexChanging(System.Nullable<int> value);
    partial void OnBalanceIPR2JSOXIndexChanged();
    partial void OnBatchChanging(string value);
    partial void OnBatchChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCustomsProcedureChanging(string value);
    partial void OnCustomsProcedureChanged();
    partial void OnDocumentNoChanging(string value);
    partial void OnDocumentNoChanged();
    partial void OnDustCSNotStartedChanging(System.Nullable<double> value);
    partial void OnDustCSNotStartedChanged();
    partial void OnDustCSStartedChanging(System.Nullable<double> value);
    partial void OnDustCSStartedChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnIPRBookChanging(System.Nullable<double> value);
    partial void OnIPRBookChanged();
    partial void OnIPRIndexChanging(System.Nullable<int> value);
    partial void OnIPRIndexChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnOGLIntroductionChanging(string value);
    partial void OnOGLIntroductionChanged();
    partial void OnOveruseCSNotStartedChanging(System.Nullable<double> value);
    partial void OnOveruseCSNotStartedChanged();
    partial void OnOveruseCSStartedChanging(System.Nullable<double> value);
    partial void OnOveruseCSStartedChanged();
    partial void OnPureTobaccoCSNotStartedChanging(System.Nullable<double> value);
    partial void OnPureTobaccoCSNotStartedChanged();
    partial void OnPureTobaccoCSStartedChanging(System.Nullable<double> value);
    partial void OnPureTobaccoCSStartedChanged();
    partial void OnSHMentholCSNotStartedChanging(System.Nullable<double> value);
    partial void OnSHMentholCSNotStartedChanged();
    partial void OnSHMentholCSStartedChanging(System.Nullable<double> value);
    partial void OnSHMentholCSStartedChanged();
    partial void OnSHWasteOveruseCSNotStartedChanging(System.Nullable<double> value);
    partial void OnSHWasteOveruseCSNotStartedChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTobaccoAvailableChanging(System.Nullable<double> value);
    partial void OnTobaccoAvailableChanged();
    partial void OnTobaccoCSFinishedChanging(System.Nullable<double> value);
    partial void OnTobaccoCSFinishedChanged();
    partial void OnTobaccoEnteredIntoIPRChanging(System.Nullable<double> value);
    partial void OnTobaccoEnteredIntoIPRChanged();
    partial void OnTobaccoInFGCSNotStartedChanging(System.Nullable<double> value);
    partial void OnTobaccoInFGCSNotStartedChanged();
    partial void OnTobaccoInFGCSStartedChanging(System.Nullable<double> value);
    partial void OnTobaccoInFGCSStartedChanged();
    partial void OnTobaccoStartedChanging(System.Nullable<double> value);
    partial void OnTobaccoStartedChanged();
    partial void OnTobaccoToBeUsedInTheProductionChanging(System.Nullable<double> value);
    partial void OnTobaccoToBeUsedInTheProductionChanged();
    partial void OnTobaccoUsedInTheProductionChanging(System.Nullable<double> value);
    partial void OnTobaccoUsedInTheProductionChanged();
    partial void OnWasteCSNotStartedChanging(System.Nullable<double> value);
    partial void OnWasteCSNotStartedChanged();
    partial void OnWasteCSStartedChanging(System.Nullable<double> value);
    partial void OnWasteCSStartedChanged();
    #endregion
		
		public BalanceIPR()
		{
			this._BalanceBatch = default(EntityRef<BalanceBatch>);
			this._IPR = default(EntityRef<IPR>);
			this._JSOXLibrary = default(EntityRef<JSOXLibrary>);
			OnCreated();
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Storage="_Balance", DbType="Float")]
		public System.Nullable<double> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_BalanceBatchIndex", DbType="Int")]
		public System.Nullable<int> BalanceBatchIndex
		{
			get
			{
				return this._BalanceBatchIndex;
			}
			set
			{
				if ((this._BalanceBatchIndex != value))
				{
					if (this._BalanceBatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBalanceBatchIndexChanging(value);
					this.SendPropertyChanging();
					this._BalanceBatchIndex = value;
					this.SendPropertyChanged("BalanceBatchIndex");
					this.OnBalanceBatchIndexChanged();
				}
			}
		}
		
		[Column(Storage="_BalanceIPR2JSOXIndex", DbType="Int")]
		public System.Nullable<int> BalanceIPR2JSOXIndex
		{
			get
			{
				return this._BalanceIPR2JSOXIndex;
			}
			set
			{
				if ((this._BalanceIPR2JSOXIndex != value))
				{
					if (this._JSOXLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBalanceIPR2JSOXIndexChanging(value);
					this.SendPropertyChanging();
					this._BalanceIPR2JSOXIndex = value;
					this.SendPropertyChanged("BalanceIPR2JSOXIndex");
					this.OnBalanceIPR2JSOXIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Batch", DbType="NVarChar(255)")]
		public string Batch
		{
			get
			{
				return this._Batch;
			}
			set
			{
				if ((this._Batch != value))
				{
					this.OnBatchChanging(value);
					this.SendPropertyChanging();
					this._Batch = value;
					this.SendPropertyChanged("Batch");
					this.OnBatchChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CustomsProcedure", DbType="NVarChar(255)")]
		public string CustomsProcedure
		{
			get
			{
				return this._CustomsProcedure;
			}
			set
			{
				if ((this._CustomsProcedure != value))
				{
					this.OnCustomsProcedureChanging(value);
					this.SendPropertyChanging();
					this._CustomsProcedure = value;
					this.SendPropertyChanged("CustomsProcedure");
					this.OnCustomsProcedureChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentNo", DbType="NVarChar(255)")]
		public string DocumentNo
		{
			get
			{
				return this._DocumentNo;
			}
			set
			{
				if ((this._DocumentNo != value))
				{
					this.OnDocumentNoChanging(value);
					this.SendPropertyChanging();
					this._DocumentNo = value;
					this.SendPropertyChanged("DocumentNo");
					this.OnDocumentNoChanged();
				}
			}
		}
		
		[Column(Storage="_DustCSNotStarted", DbType="Float")]
		public System.Nullable<double> DustCSNotStarted
		{
			get
			{
				return this._DustCSNotStarted;
			}
			set
			{
				if ((this._DustCSNotStarted != value))
				{
					this.OnDustCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._DustCSNotStarted = value;
					this.SendPropertyChanged("DustCSNotStarted");
					this.OnDustCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_DustCSStarted", DbType="Float")]
		public System.Nullable<double> DustCSStarted
		{
			get
			{
				return this._DustCSStarted;
			}
			set
			{
				if ((this._DustCSStarted != value))
				{
					this.OnDustCSStartedChanging(value);
					this.SendPropertyChanging();
					this._DustCSStarted = value;
					this.SendPropertyChanged("DustCSStarted");
					this.OnDustCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="NVarChar(255)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_IPRBook", DbType="Float")]
		public System.Nullable<double> IPRBook
		{
			get
			{
				return this._IPRBook;
			}
			set
			{
				if ((this._IPRBook != value))
				{
					this.OnIPRBookChanging(value);
					this.SendPropertyChanging();
					this._IPRBook = value;
					this.SendPropertyChanged("IPRBook");
					this.OnIPRBookChanged();
				}
			}
		}
		
		[Column(Storage="_IPRIndex", DbType="Int")]
		public System.Nullable<int> IPRIndex
		{
			get
			{
				return this._IPRIndex;
			}
			set
			{
				if ((this._IPRIndex != value))
				{
					if (this._IPR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIPRIndexChanging(value);
					this.SendPropertyChanging();
					this._IPRIndex = value;
					this.SendPropertyChanged("IPRIndex");
					this.OnIPRIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_OGLIntroduction", DbType="NVarChar(255)")]
		public string OGLIntroduction
		{
			get
			{
				return this._OGLIntroduction;
			}
			set
			{
				if ((this._OGLIntroduction != value))
				{
					this.OnOGLIntroductionChanging(value);
					this.SendPropertyChanging();
					this._OGLIntroduction = value;
					this.SendPropertyChanged("OGLIntroduction");
					this.OnOGLIntroductionChanged();
				}
			}
		}
		
		[Column(Storage="_OveruseCSNotStarted", DbType="Float")]
		public System.Nullable<double> OveruseCSNotStarted
		{
			get
			{
				return this._OveruseCSNotStarted;
			}
			set
			{
				if ((this._OveruseCSNotStarted != value))
				{
					this.OnOveruseCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._OveruseCSNotStarted = value;
					this.SendPropertyChanged("OveruseCSNotStarted");
					this.OnOveruseCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_OveruseCSStarted", DbType="Float")]
		public System.Nullable<double> OveruseCSStarted
		{
			get
			{
				return this._OveruseCSStarted;
			}
			set
			{
				if ((this._OveruseCSStarted != value))
				{
					this.OnOveruseCSStartedChanging(value);
					this.SendPropertyChanging();
					this._OveruseCSStarted = value;
					this.SendPropertyChanged("OveruseCSStarted");
					this.OnOveruseCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_PureTobaccoCSNotStarted", DbType="Float")]
		public System.Nullable<double> PureTobaccoCSNotStarted
		{
			get
			{
				return this._PureTobaccoCSNotStarted;
			}
			set
			{
				if ((this._PureTobaccoCSNotStarted != value))
				{
					this.OnPureTobaccoCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._PureTobaccoCSNotStarted = value;
					this.SendPropertyChanged("PureTobaccoCSNotStarted");
					this.OnPureTobaccoCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_PureTobaccoCSStarted", DbType="Float")]
		public System.Nullable<double> PureTobaccoCSStarted
		{
			get
			{
				return this._PureTobaccoCSStarted;
			}
			set
			{
				if ((this._PureTobaccoCSStarted != value))
				{
					this.OnPureTobaccoCSStartedChanging(value);
					this.SendPropertyChanging();
					this._PureTobaccoCSStarted = value;
					this.SendPropertyChanged("PureTobaccoCSStarted");
					this.OnPureTobaccoCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_SHMentholCSNotStarted", DbType="Float")]
		public System.Nullable<double> SHMentholCSNotStarted
		{
			get
			{
				return this._SHMentholCSNotStarted;
			}
			set
			{
				if ((this._SHMentholCSNotStarted != value))
				{
					this.OnSHMentholCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._SHMentholCSNotStarted = value;
					this.SendPropertyChanged("SHMentholCSNotStarted");
					this.OnSHMentholCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_SHMentholCSStarted", DbType="Float")]
		public System.Nullable<double> SHMentholCSStarted
		{
			get
			{
				return this._SHMentholCSStarted;
			}
			set
			{
				if ((this._SHMentholCSStarted != value))
				{
					this.OnSHMentholCSStartedChanging(value);
					this.SendPropertyChanging();
					this._SHMentholCSStarted = value;
					this.SendPropertyChanged("SHMentholCSStarted");
					this.OnSHMentholCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_SHWasteOveruseCSNotStarted", DbType="Float")]
		public System.Nullable<double> SHWasteOveruseCSNotStarted
		{
			get
			{
				return this._SHWasteOveruseCSNotStarted;
			}
			set
			{
				if ((this._SHWasteOveruseCSNotStarted != value))
				{
					this.OnSHWasteOveruseCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._SHWasteOveruseCSNotStarted = value;
					this.SendPropertyChanged("SHWasteOveruseCSNotStarted");
					this.OnSHWasteOveruseCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(255)")]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoAvailable", DbType="Float")]
		public System.Nullable<double> TobaccoAvailable
		{
			get
			{
				return this._TobaccoAvailable;
			}
			set
			{
				if ((this._TobaccoAvailable != value))
				{
					this.OnTobaccoAvailableChanging(value);
					this.SendPropertyChanging();
					this._TobaccoAvailable = value;
					this.SendPropertyChanged("TobaccoAvailable");
					this.OnTobaccoAvailableChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoCSFinished", DbType="Float")]
		public System.Nullable<double> TobaccoCSFinished
		{
			get
			{
				return this._TobaccoCSFinished;
			}
			set
			{
				if ((this._TobaccoCSFinished != value))
				{
					this.OnTobaccoCSFinishedChanging(value);
					this.SendPropertyChanging();
					this._TobaccoCSFinished = value;
					this.SendPropertyChanged("TobaccoCSFinished");
					this.OnTobaccoCSFinishedChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoEnteredIntoIPR", DbType="Float")]
		public System.Nullable<double> TobaccoEnteredIntoIPR
		{
			get
			{
				return this._TobaccoEnteredIntoIPR;
			}
			set
			{
				if ((this._TobaccoEnteredIntoIPR != value))
				{
					this.OnTobaccoEnteredIntoIPRChanging(value);
					this.SendPropertyChanging();
					this._TobaccoEnteredIntoIPR = value;
					this.SendPropertyChanged("TobaccoEnteredIntoIPR");
					this.OnTobaccoEnteredIntoIPRChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoInFGCSNotStarted", DbType="Float")]
		public System.Nullable<double> TobaccoInFGCSNotStarted
		{
			get
			{
				return this._TobaccoInFGCSNotStarted;
			}
			set
			{
				if ((this._TobaccoInFGCSNotStarted != value))
				{
					this.OnTobaccoInFGCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._TobaccoInFGCSNotStarted = value;
					this.SendPropertyChanged("TobaccoInFGCSNotStarted");
					this.OnTobaccoInFGCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoInFGCSStarted", DbType="Float")]
		public System.Nullable<double> TobaccoInFGCSStarted
		{
			get
			{
				return this._TobaccoInFGCSStarted;
			}
			set
			{
				if ((this._TobaccoInFGCSStarted != value))
				{
					this.OnTobaccoInFGCSStartedChanging(value);
					this.SendPropertyChanging();
					this._TobaccoInFGCSStarted = value;
					this.SendPropertyChanged("TobaccoInFGCSStarted");
					this.OnTobaccoInFGCSStartedChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoStarted", DbType="Float")]
		public System.Nullable<double> TobaccoStarted
		{
			get
			{
				return this._TobaccoStarted;
			}
			set
			{
				if ((this._TobaccoStarted != value))
				{
					this.OnTobaccoStartedChanging(value);
					this.SendPropertyChanging();
					this._TobaccoStarted = value;
					this.SendPropertyChanged("TobaccoStarted");
					this.OnTobaccoStartedChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoToBeUsedInTheProduction", DbType="Float")]
		public System.Nullable<double> TobaccoToBeUsedInTheProduction
		{
			get
			{
				return this._TobaccoToBeUsedInTheProduction;
			}
			set
			{
				if ((this._TobaccoToBeUsedInTheProduction != value))
				{
					this.OnTobaccoToBeUsedInTheProductionChanging(value);
					this.SendPropertyChanging();
					this._TobaccoToBeUsedInTheProduction = value;
					this.SendPropertyChanged("TobaccoToBeUsedInTheProduction");
					this.OnTobaccoToBeUsedInTheProductionChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoUsedInTheProduction", DbType="Float")]
		public System.Nullable<double> TobaccoUsedInTheProduction
		{
			get
			{
				return this._TobaccoUsedInTheProduction;
			}
			set
			{
				if ((this._TobaccoUsedInTheProduction != value))
				{
					this.OnTobaccoUsedInTheProductionChanging(value);
					this.SendPropertyChanging();
					this._TobaccoUsedInTheProduction = value;
					this.SendPropertyChanged("TobaccoUsedInTheProduction");
					this.OnTobaccoUsedInTheProductionChanged();
				}
			}
		}
		
		[Column(Storage="_WasteCSNotStarted", DbType="Float")]
		public System.Nullable<double> WasteCSNotStarted
		{
			get
			{
				return this._WasteCSNotStarted;
			}
			set
			{
				if ((this._WasteCSNotStarted != value))
				{
					this.OnWasteCSNotStartedChanging(value);
					this.SendPropertyChanging();
					this._WasteCSNotStarted = value;
					this.SendPropertyChanged("WasteCSNotStarted");
					this.OnWasteCSNotStartedChanged();
				}
			}
		}
		
		[Column(Storage="_WasteCSStarted", DbType="Float")]
		public System.Nullable<double> WasteCSStarted
		{
			get
			{
				return this._WasteCSStarted;
			}
			set
			{
				if ((this._WasteCSStarted != value))
				{
					this.OnWasteCSStartedChanging(value);
					this.SendPropertyChanging();
					this._WasteCSStarted = value;
					this.SendPropertyChanged("WasteCSStarted");
					this.OnWasteCSStartedChanged();
				}
			}
		}
		
		[Association(Name="FK_BalanceIPR_BalanceBatch", Storage="_BalanceBatch", ThisKey="BalanceBatchIndex", OtherKey="ID", IsForeignKey=true)]
		public BalanceBatch BalanceBatch
		{
			get
			{
				return this._BalanceBatch.Entity;
			}
			set
			{
				BalanceBatch previousValue = this._BalanceBatch.Entity;
				if (((previousValue != value) 
							|| (this._BalanceBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BalanceBatch.Entity = null;
						previousValue.BalanceIPR.Remove(this);
					}
					this._BalanceBatch.Entity = value;
					if ((value != null))
					{
						value.BalanceIPR.Add(this);
						this._BalanceBatchIndex = value.ID;
					}
					else
					{
						this._BalanceBatchIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("BalanceBatch");
				}
			}
		}
		
		[Association(Name="FK_BalanceIPR_IPR", Storage="_IPR", ThisKey="IPRIndex", OtherKey="ID", IsForeignKey=true)]
		public IPR IPR
		{
			get
			{
				return this._IPR.Entity;
			}
			set
			{
				IPR previousValue = this._IPR.Entity;
				if (((previousValue != value) 
							|| (this._IPR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IPR.Entity = null;
						previousValue.BalanceIPR.Remove(this);
					}
					this._IPR.Entity = value;
					if ((value != null))
					{
						value.BalanceIPR.Add(this);
						this._IPRIndex = value.ID;
					}
					else
					{
						this._IPRIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("IPR");
				}
			}
		}
		
		[Association(Name="FK_BalanceIPR_JSOXLibrary", Storage="_JSOXLibrary", ThisKey="BalanceIPR2JSOXIndex", OtherKey="ID", IsForeignKey=true)]
		public JSOXLibrary JSOXLibrary
		{
			get
			{
				return this._JSOXLibrary.Entity;
			}
			set
			{
				JSOXLibrary previousValue = this._JSOXLibrary.Entity;
				if (((previousValue != value) 
							|| (this._JSOXLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JSOXLibrary.Entity = null;
						previousValue.BalanceIPR.Remove(this);
					}
					this._JSOXLibrary.Entity = value;
					if ((value != null))
					{
						value.BalanceIPR.Add(this);
						this._BalanceIPR2JSOXIndex = value.ID;
					}
					else
					{
						this._BalanceIPR2JSOXIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("JSOXLibrary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Batch")]
	public partial class Batch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Archival;
		
		private string _Batch1;
		
		private System.Nullable<double> _BatchDustCooeficiency;
		
		private System.Nullable<int> _BatchLibraryIndex;
		
		private System.Nullable<double> _BatchSHCooeficiency;
		
		private string _BatchStatus;
		
		private System.Nullable<double> _BatchWasteCooeficiency;
		
		private System.Nullable<double> _CalculatedOveruse;
		
		private System.Nullable<double> _CFTProductivityNormMax;
		
		private System.Nullable<double> _CFTProductivityNormMin;
		
		private System.Nullable<double> _CFTProductivityRateMax;
		
		private System.Nullable<double> _CFTProductivityRateMin;
		
		private System.Nullable<double> _CFTProductivityVersion;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private System.Nullable<double> _CTFUsageMax;
		
		private System.Nullable<double> _CTFUsageMin;
		
		private System.Nullable<double> _Dust;
		
		private System.Nullable<double> _DustCooeficiencyVersion;
		
		private System.Nullable<double> _FGQuantity;
		
		private System.Nullable<double> _FGQuantityAvailable;
		
		private System.Nullable<double> _FGQuantityBlocked;
		
		private System.Nullable<double> _FGQuantityPrevious;
		
		private int _ID;
		
		private System.Nullable<double> _MaterialQuantity;
		
		private System.Nullable<double> _MaterialQuantityPrevious;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Nullable<double> _Overuse;
		
		private string _ProductType;
		
		private System.Nullable<double> _SHCooeficiencyVersion;
		
		private System.Nullable<double> _SHMenthol;
		
		private string _SKU;
		
		private System.Nullable<int> _SKUIndex;
		
		private string _Title;
		
		private System.Nullable<double> _Tobacco;
		
		private System.Nullable<double> _UsageMax;
		
		private System.Nullable<double> _UsageMin;
		
		private System.Nullable<double> _UsageVersion;
		
		private System.Nullable<double> _Waste;
		
		private System.Nullable<double> _WasteCooeficiencyVersion;
		
		private EntityRef<BatchLibrary> _BatchLibrary;
		
		private EntityRef<SKU> _SKUIndexSKU;
		
		private EntitySet<Disposal> _Disposal;
		
		private EntitySet<InvoiceContent> _InvoiceContent;
		
		private EntitySet<Material> _Material;
		
		private EntitySet<StockEntry> _StockEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnBatch1Changing(string value);
    partial void OnBatch1Changed();
    partial void OnBatchDustCooeficiencyChanging(System.Nullable<double> value);
    partial void OnBatchDustCooeficiencyChanged();
    partial void OnBatchLibraryIndexChanging(System.Nullable<int> value);
    partial void OnBatchLibraryIndexChanged();
    partial void OnBatchSHCooeficiencyChanging(System.Nullable<double> value);
    partial void OnBatchSHCooeficiencyChanged();
    partial void OnBatchStatusChanging(string value);
    partial void OnBatchStatusChanged();
    partial void OnBatchWasteCooeficiencyChanging(System.Nullable<double> value);
    partial void OnBatchWasteCooeficiencyChanged();
    partial void OnCalculatedOveruseChanging(System.Nullable<double> value);
    partial void OnCalculatedOveruseChanged();
    partial void OnCFTProductivityNormMaxChanging(System.Nullable<double> value);
    partial void OnCFTProductivityNormMaxChanged();
    partial void OnCFTProductivityNormMinChanging(System.Nullable<double> value);
    partial void OnCFTProductivityNormMinChanged();
    partial void OnCFTProductivityRateMaxChanging(System.Nullable<double> value);
    partial void OnCFTProductivityRateMaxChanged();
    partial void OnCFTProductivityRateMinChanging(System.Nullable<double> value);
    partial void OnCFTProductivityRateMinChanged();
    partial void OnCFTProductivityVersionChanging(System.Nullable<double> value);
    partial void OnCFTProductivityVersionChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCTFUsageMaxChanging(System.Nullable<double> value);
    partial void OnCTFUsageMaxChanged();
    partial void OnCTFUsageMinChanging(System.Nullable<double> value);
    partial void OnCTFUsageMinChanged();
    partial void OnDustChanging(System.Nullable<double> value);
    partial void OnDustChanged();
    partial void OnDustCooeficiencyVersionChanging(System.Nullable<double> value);
    partial void OnDustCooeficiencyVersionChanged();
    partial void OnFGQuantityChanging(System.Nullable<double> value);
    partial void OnFGQuantityChanged();
    partial void OnFGQuantityAvailableChanging(System.Nullable<double> value);
    partial void OnFGQuantityAvailableChanged();
    partial void OnFGQuantityBlockedChanging(System.Nullable<double> value);
    partial void OnFGQuantityBlockedChanged();
    partial void OnFGQuantityPreviousChanging(System.Nullable<double> value);
    partial void OnFGQuantityPreviousChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMaterialQuantityChanging(System.Nullable<double> value);
    partial void OnMaterialQuantityChanged();
    partial void OnMaterialQuantityPreviousChanging(System.Nullable<double> value);
    partial void OnMaterialQuantityPreviousChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnOveruseChanging(System.Nullable<double> value);
    partial void OnOveruseChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    partial void OnSHCooeficiencyVersionChanging(System.Nullable<double> value);
    partial void OnSHCooeficiencyVersionChanged();
    partial void OnSHMentholChanging(System.Nullable<double> value);
    partial void OnSHMentholChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnSKUIndexChanging(System.Nullable<int> value);
    partial void OnSKUIndexChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTobaccoChanging(System.Nullable<double> value);
    partial void OnTobaccoChanged();
    partial void OnUsageMaxChanging(System.Nullable<double> value);
    partial void OnUsageMaxChanged();
    partial void OnUsageMinChanging(System.Nullable<double> value);
    partial void OnUsageMinChanged();
    partial void OnUsageVersionChanging(System.Nullable<double> value);
    partial void OnUsageVersionChanged();
    partial void OnWasteChanging(System.Nullable<double> value);
    partial void OnWasteChanged();
    partial void OnWasteCooeficiencyVersionChanging(System.Nullable<double> value);
    partial void OnWasteCooeficiencyVersionChanged();
    #endregion
		
		public Batch()
		{
			this._BatchLibrary = default(EntityRef<BatchLibrary>);
			this._SKUIndexSKU = default(EntityRef<SKU>);
			this._Disposal = new EntitySet<Disposal>(new Action<Disposal>(this.attach_Disposal), new Action<Disposal>(this.detach_Disposal));
			this._InvoiceContent = new EntitySet<InvoiceContent>(new Action<InvoiceContent>(this.attach_InvoiceContent), new Action<InvoiceContent>(this.detach_InvoiceContent));
			this._Material = new EntitySet<Material>(new Action<Material>(this.attach_Material), new Action<Material>(this.detach_Material));
			this._StockEntry = new EntitySet<StockEntry>(new Action<StockEntry>(this.attach_StockEntry), new Action<StockEntry>(this.detach_StockEntry));
			OnCreated();
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Name="Batch", Storage="_Batch1", DbType="NVarChar(255)")]
		public string Batch1
		{
			get
			{
				return this._Batch1;
			}
			set
			{
				if ((this._Batch1 != value))
				{
					this.OnBatch1Changing(value);
					this.SendPropertyChanging();
					this._Batch1 = value;
					this.SendPropertyChanged("Batch1");
					this.OnBatch1Changed();
				}
			}
		}
		
		[Column(Storage="_BatchDustCooeficiency", DbType="Float")]
		public System.Nullable<double> BatchDustCooeficiency
		{
			get
			{
				return this._BatchDustCooeficiency;
			}
			set
			{
				if ((this._BatchDustCooeficiency != value))
				{
					this.OnBatchDustCooeficiencyChanging(value);
					this.SendPropertyChanging();
					this._BatchDustCooeficiency = value;
					this.SendPropertyChanged("BatchDustCooeficiency");
					this.OnBatchDustCooeficiencyChanged();
				}
			}
		}
		
		[Column(Storage="_BatchLibraryIndex", DbType="Int")]
		public System.Nullable<int> BatchLibraryIndex
		{
			get
			{
				return this._BatchLibraryIndex;
			}
			set
			{
				if ((this._BatchLibraryIndex != value))
				{
					if (this._BatchLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchLibraryIndexChanging(value);
					this.SendPropertyChanging();
					this._BatchLibraryIndex = value;
					this.SendPropertyChanged("BatchLibraryIndex");
					this.OnBatchLibraryIndexChanged();
				}
			}
		}
		
		[Column(Storage="_BatchSHCooeficiency", DbType="Float")]
		public System.Nullable<double> BatchSHCooeficiency
		{
			get
			{
				return this._BatchSHCooeficiency;
			}
			set
			{
				if ((this._BatchSHCooeficiency != value))
				{
					this.OnBatchSHCooeficiencyChanging(value);
					this.SendPropertyChanging();
					this._BatchSHCooeficiency = value;
					this.SendPropertyChanged("BatchSHCooeficiency");
					this.OnBatchSHCooeficiencyChanged();
				}
			}
		}
		
		[Column(Storage="_BatchStatus", DbType="NVarChar(255)")]
		public string BatchStatus
		{
			get
			{
				return this._BatchStatus;
			}
			set
			{
				if ((this._BatchStatus != value))
				{
					this.OnBatchStatusChanging(value);
					this.SendPropertyChanging();
					this._BatchStatus = value;
					this.SendPropertyChanged("BatchStatus");
					this.OnBatchStatusChanged();
				}
			}
		}
		
		[Column(Storage="_BatchWasteCooeficiency", DbType="Float")]
		public System.Nullable<double> BatchWasteCooeficiency
		{
			get
			{
				return this._BatchWasteCooeficiency;
			}
			set
			{
				if ((this._BatchWasteCooeficiency != value))
				{
					this.OnBatchWasteCooeficiencyChanging(value);
					this.SendPropertyChanging();
					this._BatchWasteCooeficiency = value;
					this.SendPropertyChanged("BatchWasteCooeficiency");
					this.OnBatchWasteCooeficiencyChanged();
				}
			}
		}
		
		[Column(Storage="_CalculatedOveruse", DbType="Float")]
		public System.Nullable<double> CalculatedOveruse
		{
			get
			{
				return this._CalculatedOveruse;
			}
			set
			{
				if ((this._CalculatedOveruse != value))
				{
					this.OnCalculatedOveruseChanging(value);
					this.SendPropertyChanging();
					this._CalculatedOveruse = value;
					this.SendPropertyChanged("CalculatedOveruse");
					this.OnCalculatedOveruseChanged();
				}
			}
		}
		
		[Column(Storage="_CFTProductivityNormMax", DbType="Float")]
		public System.Nullable<double> CFTProductivityNormMax
		{
			get
			{
				return this._CFTProductivityNormMax;
			}
			set
			{
				if ((this._CFTProductivityNormMax != value))
				{
					this.OnCFTProductivityNormMaxChanging(value);
					this.SendPropertyChanging();
					this._CFTProductivityNormMax = value;
					this.SendPropertyChanged("CFTProductivityNormMax");
					this.OnCFTProductivityNormMaxChanged();
				}
			}
		}
		
		[Column(Storage="_CFTProductivityNormMin", DbType="Float")]
		public System.Nullable<double> CFTProductivityNormMin
		{
			get
			{
				return this._CFTProductivityNormMin;
			}
			set
			{
				if ((this._CFTProductivityNormMin != value))
				{
					this.OnCFTProductivityNormMinChanging(value);
					this.SendPropertyChanging();
					this._CFTProductivityNormMin = value;
					this.SendPropertyChanged("CFTProductivityNormMin");
					this.OnCFTProductivityNormMinChanged();
				}
			}
		}
		
		[Column(Storage="_CFTProductivityRateMax", DbType="Float")]
		public System.Nullable<double> CFTProductivityRateMax
		{
			get
			{
				return this._CFTProductivityRateMax;
			}
			set
			{
				if ((this._CFTProductivityRateMax != value))
				{
					this.OnCFTProductivityRateMaxChanging(value);
					this.SendPropertyChanging();
					this._CFTProductivityRateMax = value;
					this.SendPropertyChanged("CFTProductivityRateMax");
					this.OnCFTProductivityRateMaxChanged();
				}
			}
		}
		
		[Column(Storage="_CFTProductivityRateMin", DbType="Float")]
		public System.Nullable<double> CFTProductivityRateMin
		{
			get
			{
				return this._CFTProductivityRateMin;
			}
			set
			{
				if ((this._CFTProductivityRateMin != value))
				{
					this.OnCFTProductivityRateMinChanging(value);
					this.SendPropertyChanging();
					this._CFTProductivityRateMin = value;
					this.SendPropertyChanged("CFTProductivityRateMin");
					this.OnCFTProductivityRateMinChanged();
				}
			}
		}
		
		[Column(Storage="_CFTProductivityVersion", DbType="Float")]
		public System.Nullable<double> CFTProductivityVersion
		{
			get
			{
				return this._CFTProductivityVersion;
			}
			set
			{
				if ((this._CFTProductivityVersion != value))
				{
					this.OnCFTProductivityVersionChanging(value);
					this.SendPropertyChanging();
					this._CFTProductivityVersion = value;
					this.SendPropertyChanged("CFTProductivityVersion");
					this.OnCFTProductivityVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CTFUsageMax", DbType="Float")]
		public System.Nullable<double> CTFUsageMax
		{
			get
			{
				return this._CTFUsageMax;
			}
			set
			{
				if ((this._CTFUsageMax != value))
				{
					this.OnCTFUsageMaxChanging(value);
					this.SendPropertyChanging();
					this._CTFUsageMax = value;
					this.SendPropertyChanged("CTFUsageMax");
					this.OnCTFUsageMaxChanged();
				}
			}
		}
		
		[Column(Storage="_CTFUsageMin", DbType="Float")]
		public System.Nullable<double> CTFUsageMin
		{
			get
			{
				return this._CTFUsageMin;
			}
			set
			{
				if ((this._CTFUsageMin != value))
				{
					this.OnCTFUsageMinChanging(value);
					this.SendPropertyChanging();
					this._CTFUsageMin = value;
					this.SendPropertyChanged("CTFUsageMin");
					this.OnCTFUsageMinChanged();
				}
			}
		}
		
		[Column(Storage="_Dust", DbType="Float")]
		public System.Nullable<double> Dust
		{
			get
			{
				return this._Dust;
			}
			set
			{
				if ((this._Dust != value))
				{
					this.OnDustChanging(value);
					this.SendPropertyChanging();
					this._Dust = value;
					this.SendPropertyChanged("Dust");
					this.OnDustChanged();
				}
			}
		}
		
		[Column(Storage="_DustCooeficiencyVersion", DbType="Float")]
		public System.Nullable<double> DustCooeficiencyVersion
		{
			get
			{
				return this._DustCooeficiencyVersion;
			}
			set
			{
				if ((this._DustCooeficiencyVersion != value))
				{
					this.OnDustCooeficiencyVersionChanging(value);
					this.SendPropertyChanging();
					this._DustCooeficiencyVersion = value;
					this.SendPropertyChanged("DustCooeficiencyVersion");
					this.OnDustCooeficiencyVersionChanged();
				}
			}
		}
		
		[Column(Storage="_FGQuantity", DbType="Float")]
		public System.Nullable<double> FGQuantity
		{
			get
			{
				return this._FGQuantity;
			}
			set
			{
				if ((this._FGQuantity != value))
				{
					this.OnFGQuantityChanging(value);
					this.SendPropertyChanging();
					this._FGQuantity = value;
					this.SendPropertyChanged("FGQuantity");
					this.OnFGQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_FGQuantityAvailable", DbType="Float")]
		public System.Nullable<double> FGQuantityAvailable
		{
			get
			{
				return this._FGQuantityAvailable;
			}
			set
			{
				if ((this._FGQuantityAvailable != value))
				{
					this.OnFGQuantityAvailableChanging(value);
					this.SendPropertyChanging();
					this._FGQuantityAvailable = value;
					this.SendPropertyChanged("FGQuantityAvailable");
					this.OnFGQuantityAvailableChanged();
				}
			}
		}
		
		[Column(Storage="_FGQuantityBlocked", DbType="Float")]
		public System.Nullable<double> FGQuantityBlocked
		{
			get
			{
				return this._FGQuantityBlocked;
			}
			set
			{
				if ((this._FGQuantityBlocked != value))
				{
					this.OnFGQuantityBlockedChanging(value);
					this.SendPropertyChanging();
					this._FGQuantityBlocked = value;
					this.SendPropertyChanged("FGQuantityBlocked");
					this.OnFGQuantityBlockedChanged();
				}
			}
		}
		
		[Column(Storage="_FGQuantityPrevious", DbType="Float")]
		public System.Nullable<double> FGQuantityPrevious
		{
			get
			{
				return this._FGQuantityPrevious;
			}
			set
			{
				if ((this._FGQuantityPrevious != value))
				{
					this.OnFGQuantityPreviousChanging(value);
					this.SendPropertyChanging();
					this._FGQuantityPrevious = value;
					this.SendPropertyChanged("FGQuantityPrevious");
					this.OnFGQuantityPreviousChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialQuantity", DbType="Float")]
		public System.Nullable<double> MaterialQuantity
		{
			get
			{
				return this._MaterialQuantity;
			}
			set
			{
				if ((this._MaterialQuantity != value))
				{
					this.OnMaterialQuantityChanging(value);
					this.SendPropertyChanging();
					this._MaterialQuantity = value;
					this.SendPropertyChanged("MaterialQuantity");
					this.OnMaterialQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialQuantityPrevious", DbType="Float")]
		public System.Nullable<double> MaterialQuantityPrevious
		{
			get
			{
				return this._MaterialQuantityPrevious;
			}
			set
			{
				if ((this._MaterialQuantityPrevious != value))
				{
					this.OnMaterialQuantityPreviousChanging(value);
					this.SendPropertyChanging();
					this._MaterialQuantityPrevious = value;
					this.SendPropertyChanged("MaterialQuantityPrevious");
					this.OnMaterialQuantityPreviousChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Overuse", DbType="Float")]
		public System.Nullable<double> Overuse
		{
			get
			{
				return this._Overuse;
			}
			set
			{
				if ((this._Overuse != value))
				{
					this.OnOveruseChanging(value);
					this.SendPropertyChanging();
					this._Overuse = value;
					this.SendPropertyChanged("Overuse");
					this.OnOveruseChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(255)")]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SHCooeficiencyVersion", DbType="Float")]
		public System.Nullable<double> SHCooeficiencyVersion
		{
			get
			{
				return this._SHCooeficiencyVersion;
			}
			set
			{
				if ((this._SHCooeficiencyVersion != value))
				{
					this.OnSHCooeficiencyVersionChanging(value);
					this.SendPropertyChanging();
					this._SHCooeficiencyVersion = value;
					this.SendPropertyChanged("SHCooeficiencyVersion");
					this.OnSHCooeficiencyVersionChanged();
				}
			}
		}
		
		[Column(Storage="_SHMenthol", DbType="Float")]
		public System.Nullable<double> SHMenthol
		{
			get
			{
				return this._SHMenthol;
			}
			set
			{
				if ((this._SHMenthol != value))
				{
					this.OnSHMentholChanging(value);
					this.SendPropertyChanging();
					this._SHMenthol = value;
					this.SendPropertyChanged("SHMenthol");
					this.OnSHMentholChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(255)")]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_SKUIndex", DbType="Int")]
		public System.Nullable<int> SKUIndex
		{
			get
			{
				return this._SKUIndex;
			}
			set
			{
				if ((this._SKUIndex != value))
				{
					if (this._SKUIndexSKU.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKUIndexChanging(value);
					this.SendPropertyChanging();
					this._SKUIndex = value;
					this.SendPropertyChanged("SKUIndex");
					this.OnSKUIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Tobacco", DbType="Float")]
		public System.Nullable<double> Tobacco
		{
			get
			{
				return this._Tobacco;
			}
			set
			{
				if ((this._Tobacco != value))
				{
					this.OnTobaccoChanging(value);
					this.SendPropertyChanging();
					this._Tobacco = value;
					this.SendPropertyChanged("Tobacco");
					this.OnTobaccoChanged();
				}
			}
		}
		
		[Column(Storage="_UsageMax", DbType="Float")]
		public System.Nullable<double> UsageMax
		{
			get
			{
				return this._UsageMax;
			}
			set
			{
				if ((this._UsageMax != value))
				{
					this.OnUsageMaxChanging(value);
					this.SendPropertyChanging();
					this._UsageMax = value;
					this.SendPropertyChanged("UsageMax");
					this.OnUsageMaxChanged();
				}
			}
		}
		
		[Column(Storage="_UsageMin", DbType="Float")]
		public System.Nullable<double> UsageMin
		{
			get
			{
				return this._UsageMin;
			}
			set
			{
				if ((this._UsageMin != value))
				{
					this.OnUsageMinChanging(value);
					this.SendPropertyChanging();
					this._UsageMin = value;
					this.SendPropertyChanged("UsageMin");
					this.OnUsageMinChanged();
				}
			}
		}
		
		[Column(Storage="_UsageVersion", DbType="Float")]
		public System.Nullable<double> UsageVersion
		{
			get
			{
				return this._UsageVersion;
			}
			set
			{
				if ((this._UsageVersion != value))
				{
					this.OnUsageVersionChanging(value);
					this.SendPropertyChanging();
					this._UsageVersion = value;
					this.SendPropertyChanged("UsageVersion");
					this.OnUsageVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Waste", DbType="Float")]
		public System.Nullable<double> Waste
		{
			get
			{
				return this._Waste;
			}
			set
			{
				if ((this._Waste != value))
				{
					this.OnWasteChanging(value);
					this.SendPropertyChanging();
					this._Waste = value;
					this.SendPropertyChanged("Waste");
					this.OnWasteChanged();
				}
			}
		}
		
		[Column(Storage="_WasteCooeficiencyVersion", DbType="Float")]
		public System.Nullable<double> WasteCooeficiencyVersion
		{
			get
			{
				return this._WasteCooeficiencyVersion;
			}
			set
			{
				if ((this._WasteCooeficiencyVersion != value))
				{
					this.OnWasteCooeficiencyVersionChanging(value);
					this.SendPropertyChanging();
					this._WasteCooeficiencyVersion = value;
					this.SendPropertyChanged("WasteCooeficiencyVersion");
					this.OnWasteCooeficiencyVersionChanged();
				}
			}
		}
		
		[Association(Name="FK_Batch_BatchLibrary", Storage="_BatchLibrary", ThisKey="BatchLibraryIndex", OtherKey="ID", IsForeignKey=true)]
		public BatchLibrary BatchLibrary
		{
			get
			{
				return this._BatchLibrary.Entity;
			}
			set
			{
				BatchLibrary previousValue = this._BatchLibrary.Entity;
				if (((previousValue != value) 
							|| (this._BatchLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BatchLibrary.Entity = null;
						previousValue.Batch.Remove(this);
					}
					this._BatchLibrary.Entity = value;
					if ((value != null))
					{
						value.Batch.Add(this);
						this._BatchLibraryIndex = value.ID;
					}
					else
					{
						this._BatchLibraryIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("BatchLibrary");
				}
			}
		}
		
		[Association(Name="FK_Batch_SKU", Storage="_SKUIndexSKU", ThisKey="SKUIndex", OtherKey="ID", IsForeignKey=true)]
		public SKU SKUIndexSKU
		{
			get
			{
				return this._SKUIndexSKU.Entity;
			}
			set
			{
				SKU previousValue = this._SKUIndexSKU.Entity;
				if (((previousValue != value) 
							|| (this._SKUIndexSKU.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SKUIndexSKU.Entity = null;
						previousValue.Batch.Remove(this);
					}
					this._SKUIndexSKU.Entity = value;
					if ((value != null))
					{
						value.Batch.Add(this);
						this._SKUIndex = value.ID;
					}
					else
					{
						this._SKUIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("SKUIndexSKU");
				}
			}
		}
		
		[Association(Name="FK_Disposal_Batch", Storage="_Disposal", ThisKey="ID", OtherKey="Disposal2BatchIndex", DeleteRule="NO ACTION")]
		public EntitySet<Disposal> Disposal
		{
			get
			{
				return this._Disposal;
			}
			set
			{
				this._Disposal.Assign(value);
			}
		}
		
		[Association(Name="FK_InvoiceContent_Batch", Storage="_InvoiceContent", ThisKey="ID", OtherKey="InvoiceContent2BatchIndex", DeleteRule="NO ACTION")]
		public EntitySet<InvoiceContent> InvoiceContent
		{
			get
			{
				return this._InvoiceContent;
			}
			set
			{
				this._InvoiceContent.Assign(value);
			}
		}
		
		[Association(Name="FK_Material_Batch", Storage="_Material", ThisKey="ID", OtherKey="Material2BatchIndex", DeleteRule="NO ACTION")]
		public EntitySet<Material> Material
		{
			get
			{
				return this._Material;
			}
			set
			{
				this._Material.Assign(value);
			}
		}
		
		[Association(Name="FK_StockEntry_Batch", Storage="_StockEntry", ThisKey="ID", OtherKey="BatchIndex", DeleteRule="NO ACTION")]
		public EntitySet<StockEntry> StockEntry
		{
			get
			{
				return this._StockEntry;
			}
			set
			{
				this._StockEntry.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.Batch = this;
		}
		
		private void detach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.Batch = null;
		}
		
		private void attach_InvoiceContent(InvoiceContent entity)
		{
			this.SendPropertyChanging();
			entity.Batch = this;
		}
		
		private void detach_InvoiceContent(InvoiceContent entity)
		{
			this.SendPropertyChanging();
			entity.Batch = null;
		}
		
		private void attach_Material(Material entity)
		{
			this.SendPropertyChanging();
			entity.Material2BatchIndexBatch = this;
		}
		
		private void detach_Material(Material entity)
		{
			this.SendPropertyChanging();
			entity.Material2BatchIndexBatch = null;
		}
		
		private void attach_StockEntry(StockEntry entity)
		{
			this.SendPropertyChanging();
			entity.BatchIndexBatch = this;
		}
		
		private void detach_StockEntry(StockEntry entity)
		{
			this.SendPropertyChanging();
			entity.BatchIndexBatch = null;
		}
	}
	
	[Table(Name="dbo.BatchLibrary")]
	public partial class BatchLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BatchLibraryComments;
		
		private System.Nullable<bool> _BatchLibraryOK;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _Title;
		
		private EntitySet<Batch> _Batch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBatchLibraryCommentsChanging(string value);
    partial void OnBatchLibraryCommentsChanged();
    partial void OnBatchLibraryOKChanging(System.Nullable<bool> value);
    partial void OnBatchLibraryOKChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public BatchLibrary()
		{
			this._Batch = new EntitySet<Batch>(new Action<Batch>(this.attach_Batch), new Action<Batch>(this.detach_Batch));
			OnCreated();
		}
		
		[Column(Storage="_BatchLibraryComments", DbType="NVarChar(255)")]
		public string BatchLibraryComments
		{
			get
			{
				return this._BatchLibraryComments;
			}
			set
			{
				if ((this._BatchLibraryComments != value))
				{
					this.OnBatchLibraryCommentsChanging(value);
					this.SendPropertyChanging();
					this._BatchLibraryComments = value;
					this.SendPropertyChanged("BatchLibraryComments");
					this.OnBatchLibraryCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_BatchLibraryOK", DbType="Bit")]
		public System.Nullable<bool> BatchLibraryOK
		{
			get
			{
				return this._BatchLibraryOK;
			}
			set
			{
				if ((this._BatchLibraryOK != value))
				{
					this.OnBatchLibraryOKChanging(value);
					this.SendPropertyChanging();
					this._BatchLibraryOK = value;
					this.SendPropertyChanged("BatchLibraryOK");
					this.OnBatchLibraryOKChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_Batch_BatchLibrary", Storage="_Batch", ThisKey="ID", OtherKey="BatchLibraryIndex", DeleteRule="NO ACTION")]
		public EntitySet<Batch> Batch
		{
			get
			{
				return this._Batch;
			}
			set
			{
				this._Batch.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Batch(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchLibrary = this;
		}
		
		private void detach_Batch(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchLibrary = null;
		}
	}
	
	[Table(Name="dbo.Clearence")]
	public partial class Clearence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Archival;
		
		private System.Nullable<int> _Clearence2SadGoodID;
		
		private string _ClearenceProcedure;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _DocumentNo;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ProcedureCode;
		
		private string _ReferenceNumber;
		
		private System.Nullable<int> _SADConsignmentLibraryIndex;
		
		private System.Nullable<bool> _SPStatus;
		
		private string _Title;
		
		private EntityRef<SADConsignment> _SADConsignment;
		
		private EntityRef<SADGood> _SADGood;
		
		private EntitySet<Disposal> _Disposal;
		
		private EntitySet<InvoiceLibrary> _InvoiceLibrary;
		
		private EntitySet<IPR> _IPR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnClearence2SadGoodIDChanging(System.Nullable<int> value);
    partial void OnClearence2SadGoodIDChanged();
    partial void OnClearenceProcedureChanging(string value);
    partial void OnClearenceProcedureChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDocumentNoChanging(string value);
    partial void OnDocumentNoChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnProcedureCodeChanging(string value);
    partial void OnProcedureCodeChanged();
    partial void OnReferenceNumberChanging(string value);
    partial void OnReferenceNumberChanged();
    partial void OnSADConsignmentLibraryIndexChanging(System.Nullable<int> value);
    partial void OnSADConsignmentLibraryIndexChanged();
    partial void OnSPStatusChanging(System.Nullable<bool> value);
    partial void OnSPStatusChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Clearence()
		{
			this._SADConsignment = default(EntityRef<SADConsignment>);
			this._SADGood = default(EntityRef<SADGood>);
			this._Disposal = new EntitySet<Disposal>(new Action<Disposal>(this.attach_Disposal), new Action<Disposal>(this.detach_Disposal));
			this._InvoiceLibrary = new EntitySet<InvoiceLibrary>(new Action<InvoiceLibrary>(this.attach_InvoiceLibrary), new Action<InvoiceLibrary>(this.detach_InvoiceLibrary));
			this._IPR = new EntitySet<IPR>(new Action<IPR>(this.attach_IPR), new Action<IPR>(this.detach_IPR));
			OnCreated();
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Storage="_Clearence2SadGoodID", DbType="Int")]
		public System.Nullable<int> Clearence2SadGoodID
		{
			get
			{
				return this._Clearence2SadGoodID;
			}
			set
			{
				if ((this._Clearence2SadGoodID != value))
				{
					if (this._SADGood.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClearence2SadGoodIDChanging(value);
					this.SendPropertyChanging();
					this._Clearence2SadGoodID = value;
					this.SendPropertyChanged("Clearence2SadGoodID");
					this.OnClearence2SadGoodIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClearenceProcedure", DbType="NVarChar(255)")]
		public string ClearenceProcedure
		{
			get
			{
				return this._ClearenceProcedure;
			}
			set
			{
				if ((this._ClearenceProcedure != value))
				{
					this.OnClearenceProcedureChanging(value);
					this.SendPropertyChanging();
					this._ClearenceProcedure = value;
					this.SendPropertyChanged("ClearenceProcedure");
					this.OnClearenceProcedureChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentNo", DbType="NVarChar(255)")]
		public string DocumentNo
		{
			get
			{
				return this._DocumentNo;
			}
			set
			{
				if ((this._DocumentNo != value))
				{
					this.OnDocumentNoChanging(value);
					this.SendPropertyChanging();
					this._DocumentNo = value;
					this.SendPropertyChanged("DocumentNo");
					this.OnDocumentNoChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ProcedureCode", DbType="NVarChar(255)")]
		public string ProcedureCode
		{
			get
			{
				return this._ProcedureCode;
			}
			set
			{
				if ((this._ProcedureCode != value))
				{
					this.OnProcedureCodeChanging(value);
					this.SendPropertyChanging();
					this._ProcedureCode = value;
					this.SendPropertyChanged("ProcedureCode");
					this.OnProcedureCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ReferenceNumber", DbType="NVarChar(255)")]
		public string ReferenceNumber
		{
			get
			{
				return this._ReferenceNumber;
			}
			set
			{
				if ((this._ReferenceNumber != value))
				{
					this.OnReferenceNumberChanging(value);
					this.SendPropertyChanging();
					this._ReferenceNumber = value;
					this.SendPropertyChanged("ReferenceNumber");
					this.OnReferenceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_SADConsignmentLibraryIndex", DbType="Int")]
		public System.Nullable<int> SADConsignmentLibraryIndex
		{
			get
			{
				return this._SADConsignmentLibraryIndex;
			}
			set
			{
				if ((this._SADConsignmentLibraryIndex != value))
				{
					if (this._SADConsignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSADConsignmentLibraryIndexChanging(value);
					this.SendPropertyChanging();
					this._SADConsignmentLibraryIndex = value;
					this.SendPropertyChanged("SADConsignmentLibraryIndex");
					this.OnSADConsignmentLibraryIndexChanged();
				}
			}
		}
		
		[Column(Storage="_SPStatus", DbType="Bit")]
		public System.Nullable<bool> SPStatus
		{
			get
			{
				return this._SPStatus;
			}
			set
			{
				if ((this._SPStatus != value))
				{
					this.OnSPStatusChanging(value);
					this.SendPropertyChanging();
					this._SPStatus = value;
					this.SendPropertyChanged("SPStatus");
					this.OnSPStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_Clearence_SADConsignment", Storage="_SADConsignment", ThisKey="SADConsignmentLibraryIndex", OtherKey="ID", IsForeignKey=true)]
		public SADConsignment SADConsignment
		{
			get
			{
				return this._SADConsignment.Entity;
			}
			set
			{
				SADConsignment previousValue = this._SADConsignment.Entity;
				if (((previousValue != value) 
							|| (this._SADConsignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SADConsignment.Entity = null;
						previousValue.Clearence.Remove(this);
					}
					this._SADConsignment.Entity = value;
					if ((value != null))
					{
						value.Clearence.Add(this);
						this._SADConsignmentLibraryIndex = value.ID;
					}
					else
					{
						this._SADConsignmentLibraryIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("SADConsignment");
				}
			}
		}
		
		[Association(Name="FK_Clearence_SADGood", Storage="_SADGood", ThisKey="Clearence2SadGoodID", OtherKey="ID", IsForeignKey=true)]
		public SADGood SADGood
		{
			get
			{
				return this._SADGood.Entity;
			}
			set
			{
				SADGood previousValue = this._SADGood.Entity;
				if (((previousValue != value) 
							|| (this._SADGood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SADGood.Entity = null;
						previousValue.Clearence.Remove(this);
					}
					this._SADGood.Entity = value;
					if ((value != null))
					{
						value.Clearence.Add(this);
						this._Clearence2SadGoodID = value.ID;
					}
					else
					{
						this._Clearence2SadGoodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SADGood");
				}
			}
		}
		
		[Association(Name="FK_Disposal_Clearence", Storage="_Disposal", ThisKey="ID", OtherKey="Disposal2ClearenceIndex", DeleteRule="NO ACTION")]
		public EntitySet<Disposal> Disposal
		{
			get
			{
				return this._Disposal;
			}
			set
			{
				this._Disposal.Assign(value);
			}
		}
		
		[Association(Name="FK_InvoiceLibrary_Clearence", Storage="_InvoiceLibrary", ThisKey="ID", OtherKey="ClearenceIndex", DeleteRule="NO ACTION")]
		public EntitySet<InvoiceLibrary> InvoiceLibrary
		{
			get
			{
				return this._InvoiceLibrary;
			}
			set
			{
				this._InvoiceLibrary.Assign(value);
			}
		}
		
		[Association(Name="FK_IPR_Clearence", Storage="_IPR", ThisKey="ID", OtherKey="ClearenceIndex", DeleteRule="NO ACTION")]
		public EntitySet<IPR> IPR
		{
			get
			{
				return this._IPR;
			}
			set
			{
				this._IPR.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.Clearence = this;
		}
		
		private void detach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.Clearence = null;
		}
		
		private void attach_InvoiceLibrary(InvoiceLibrary entity)
		{
			this.SendPropertyChanging();
			entity.Clearence = this;
		}
		
		private void detach_InvoiceLibrary(InvoiceLibrary entity)
		{
			this.SendPropertyChanging();
			entity.Clearence = null;
		}
		
		private void attach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.Clearence = this;
		}
		
		private void detach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.Clearence = null;
		}
	}
	
	[Table(Name="dbo.Consent")]
	public partial class Consent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _ConsentDate;
		
		private System.Nullable<double> _ConsentPeriod;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.Nullable<bool> _IsIPR;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Nullable<double> _ProductivityRateMax;
		
		private System.Nullable<double> _ProductivityRateMin;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _ValidFromDate;
		
		private System.Nullable<System.DateTime> _ValidToDate;
		
		private EntitySet<IPR> _IPR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConsentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConsentDateChanged();
    partial void OnConsentPeriodChanging(System.Nullable<double> value);
    partial void OnConsentPeriodChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIsIPRChanging(System.Nullable<bool> value);
    partial void OnIsIPRChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnProductivityRateMaxChanging(System.Nullable<double> value);
    partial void OnProductivityRateMaxChanged();
    partial void OnProductivityRateMinChanging(System.Nullable<double> value);
    partial void OnProductivityRateMinChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnValidFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValidFromDateChanged();
    partial void OnValidToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValidToDateChanged();
    #endregion
		
		public Consent()
		{
			this._IPR = new EntitySet<IPR>(new Action<IPR>(this.attach_IPR), new Action<IPR>(this.detach_IPR));
			OnCreated();
		}
		
		[Column(Storage="_ConsentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ConsentDate
		{
			get
			{
				return this._ConsentDate;
			}
			set
			{
				if ((this._ConsentDate != value))
				{
					this.OnConsentDateChanging(value);
					this.SendPropertyChanging();
					this._ConsentDate = value;
					this.SendPropertyChanged("ConsentDate");
					this.OnConsentDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConsentPeriod", DbType="Float")]
		public System.Nullable<double> ConsentPeriod
		{
			get
			{
				return this._ConsentPeriod;
			}
			set
			{
				if ((this._ConsentPeriod != value))
				{
					this.OnConsentPeriodChanging(value);
					this.SendPropertyChanging();
					this._ConsentPeriod = value;
					this.SendPropertyChanged("ConsentPeriod");
					this.OnConsentPeriodChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsIPR", DbType="Bit")]
		public System.Nullable<bool> IsIPR
		{
			get
			{
				return this._IsIPR;
			}
			set
			{
				if ((this._IsIPR != value))
				{
					this.OnIsIPRChanging(value);
					this.SendPropertyChanging();
					this._IsIPR = value;
					this.SendPropertyChanged("IsIPR");
					this.OnIsIPRChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ProductivityRateMax", DbType="Float")]
		public System.Nullable<double> ProductivityRateMax
		{
			get
			{
				return this._ProductivityRateMax;
			}
			set
			{
				if ((this._ProductivityRateMax != value))
				{
					this.OnProductivityRateMaxChanging(value);
					this.SendPropertyChanging();
					this._ProductivityRateMax = value;
					this.SendPropertyChanged("ProductivityRateMax");
					this.OnProductivityRateMaxChanged();
				}
			}
		}
		
		[Column(Storage="_ProductivityRateMin", DbType="Float")]
		public System.Nullable<double> ProductivityRateMin
		{
			get
			{
				return this._ProductivityRateMin;
			}
			set
			{
				if ((this._ProductivityRateMin != value))
				{
					this.OnProductivityRateMinChanging(value);
					this.SendPropertyChanging();
					this._ProductivityRateMin = value;
					this.SendPropertyChanged("ProductivityRateMin");
					this.OnProductivityRateMinChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ValidFromDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFromDate
		{
			get
			{
				return this._ValidFromDate;
			}
			set
			{
				if ((this._ValidFromDate != value))
				{
					this.OnValidFromDateChanging(value);
					this.SendPropertyChanging();
					this._ValidFromDate = value;
					this.SendPropertyChanged("ValidFromDate");
					this.OnValidFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_ValidToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidToDate
		{
			get
			{
				return this._ValidToDate;
			}
			set
			{
				if ((this._ValidToDate != value))
				{
					this.OnValidToDateChanging(value);
					this.SendPropertyChanging();
					this._ValidToDate = value;
					this.SendPropertyChanged("ValidToDate");
					this.OnValidToDateChanged();
				}
			}
		}
		
		[Association(Name="FK_IPR_Consent", Storage="_IPR", ThisKey="ID", OtherKey="IPR2ConsentTitle", DeleteRule="NO ACTION")]
		public EntitySet<IPR> IPR
		{
			get
			{
				return this._IPR;
			}
			set
			{
				this._IPR.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.Consent = this;
		}
		
		private void detach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.Consent = null;
		}
	}
	
	[Table(Name="dbo.CustomsUnion")]
	public partial class CustomsUnion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _EUPrimeMarket;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnEUPrimeMarketChanging(string value);
    partial void OnEUPrimeMarketChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public CustomsUnion()
		{
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_EUPrimeMarket", DbType="NVarChar(255)")]
		public string EUPrimeMarket
		{
			get
			{
				return this._EUPrimeMarket;
			}
			set
			{
				if ((this._EUPrimeMarket != value))
				{
					this.OnEUPrimeMarketChanging(value);
					this.SendPropertyChanging();
					this._EUPrimeMarket = value;
					this.SendPropertyChanged("EUPrimeMarket");
					this.OnEUPrimeMarketChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CutfillerCoefficient")]
	public partial class CutfillerCoefficient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<double> _CFTProductivityNormMax;
		
		private System.Nullable<double> _CFTProductivityNormMin;
		
		private System.Nullable<double> _CFTProductivityRateMax;
		
		private System.Nullable<double> _CFTProductivityRateMin;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCFTProductivityNormMaxChanging(System.Nullable<double> value);
    partial void OnCFTProductivityNormMaxChanged();
    partial void OnCFTProductivityNormMinChanging(System.Nullable<double> value);
    partial void OnCFTProductivityNormMinChanged();
    partial void OnCFTProductivityRateMaxChanging(System.Nullable<double> value);
    partial void OnCFTProductivityRateMaxChanged();
    partial void OnCFTProductivityRateMinChanging(System.Nullable<double> value);
    partial void OnCFTProductivityRateMinChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public CutfillerCoefficient()
		{
			OnCreated();
		}
		
		[Column(Storage="_CFTProductivityNormMax", DbType="Float")]
		public System.Nullable<double> CFTProductivityNormMax
		{
			get
			{
				return this._CFTProductivityNormMax;
			}
			set
			{
				if ((this._CFTProductivityNormMax != value))
				{
					this.OnCFTProductivityNormMaxChanging(value);
					this.SendPropertyChanging();
					this._CFTProductivityNormMax = value;
					this.SendPropertyChanged("CFTProductivityNormMax");
					this.OnCFTProductivityNormMaxChanged();
				}
			}
		}
		
		[Column(Storage="_CFTProductivityNormMin", DbType="Float")]
		public System.Nullable<double> CFTProductivityNormMin
		{
			get
			{
				return this._CFTProductivityNormMin;
			}
			set
			{
				if ((this._CFTProductivityNormMin != value))
				{
					this.OnCFTProductivityNormMinChanging(value);
					this.SendPropertyChanging();
					this._CFTProductivityNormMin = value;
					this.SendPropertyChanged("CFTProductivityNormMin");
					this.OnCFTProductivityNormMinChanged();
				}
			}
		}
		
		[Column(Storage="_CFTProductivityRateMax", DbType="Float")]
		public System.Nullable<double> CFTProductivityRateMax
		{
			get
			{
				return this._CFTProductivityRateMax;
			}
			set
			{
				if ((this._CFTProductivityRateMax != value))
				{
					this.OnCFTProductivityRateMaxChanging(value);
					this.SendPropertyChanging();
					this._CFTProductivityRateMax = value;
					this.SendPropertyChanged("CFTProductivityRateMax");
					this.OnCFTProductivityRateMaxChanged();
				}
			}
		}
		
		[Column(Storage="_CFTProductivityRateMin", DbType="Float")]
		public System.Nullable<double> CFTProductivityRateMin
		{
			get
			{
				return this._CFTProductivityRateMin;
			}
			set
			{
				if ((this._CFTProductivityRateMin != value))
				{
					this.OnCFTProductivityRateMinChanging(value);
					this.SendPropertyChanging();
					this._CFTProductivityRateMin = value;
					this.SendPropertyChanged("CFTProductivityRateMin");
					this.OnCFTProductivityRateMinChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Disposal")]
	public partial class Disposal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Archival;
		
		private string _ClearingType;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CustomsProcedure;
		
		private string _CustomsStatus;
		
		private System.Nullable<int> _Disposal2BatchIndex;
		
		private System.Nullable<int> _Disposal2ClearenceIndex;
		
		private System.Nullable<int> _Disposal2InvoiceContentIndex;
		
		private System.Nullable<int> _Disposal2IPRIndex;
		
		private System.Nullable<int> _Disposal2MaterialIndex;
		
		private System.Nullable<int> _Disposal2PCNID;
		
		private string _DisposalStatus;
		
		private System.Nullable<double> _DutyAndVAT;
		
		private System.Nullable<double> _DutyPerSettledAmount;
		
		private int _ID;
		
		private string _InvoiceNo;
		
		private string _IPRDocumentNo;
		
		private System.Nullable<int> _JSOXCustomsSummaryIndex;
		
		private System.Nullable<double> _JSOXReportID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Nullable<double> _RemainingQuantity;
		
		private string _SadConsignmentNo;
		
		private System.Nullable<System.DateTime> _SADDate;
		
		private string _SADDocumentNo;
		
		private System.Nullable<double> _SettledQuantity;
		
		private System.Nullable<double> _SPNo;
		
		private string _Title;
		
		private System.Nullable<double> _TobaccoValue;
		
		private System.Nullable<double> _VATPerSettledAmount;
		
		private EntityRef<Batch> _Batch;
		
		private EntityRef<Clearence> _Clearence;
		
		private EntityRef<InvoiceContent> _InvoiceContent;
		
		private EntityRef<IPR> _IPR;
		
		private EntityRef<JSOXCustomsSummary> _JSOXCustomsSummary;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<PCNCode> _PCNCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnClearingTypeChanging(string value);
    partial void OnClearingTypeChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCustomsProcedureChanging(string value);
    partial void OnCustomsProcedureChanged();
    partial void OnCustomsStatusChanging(string value);
    partial void OnCustomsStatusChanged();
    partial void OnDisposal2BatchIndexChanging(System.Nullable<int> value);
    partial void OnDisposal2BatchIndexChanged();
    partial void OnDisposal2ClearenceIndexChanging(System.Nullable<int> value);
    partial void OnDisposal2ClearenceIndexChanged();
    partial void OnDisposal2InvoiceContentIndexChanging(System.Nullable<int> value);
    partial void OnDisposal2InvoiceContentIndexChanged();
    partial void OnDisposal2IPRIndexChanging(System.Nullable<int> value);
    partial void OnDisposal2IPRIndexChanged();
    partial void OnDisposal2MaterialIndexChanging(System.Nullable<int> value);
    partial void OnDisposal2MaterialIndexChanged();
    partial void OnDisposal2PCNIDChanging(System.Nullable<int> value);
    partial void OnDisposal2PCNIDChanged();
    partial void OnDisposalStatusChanging(string value);
    partial void OnDisposalStatusChanged();
    partial void OnDutyAndVATChanging(System.Nullable<double> value);
    partial void OnDutyAndVATChanged();
    partial void OnDutyPerSettledAmountChanging(System.Nullable<double> value);
    partial void OnDutyPerSettledAmountChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnIPRDocumentNoChanging(string value);
    partial void OnIPRDocumentNoChanged();
    partial void OnJSOXCustomsSummaryIndexChanging(System.Nullable<int> value);
    partial void OnJSOXCustomsSummaryIndexChanged();
    partial void OnJSOXReportIDChanging(System.Nullable<double> value);
    partial void OnJSOXReportIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnRemainingQuantityChanging(System.Nullable<double> value);
    partial void OnRemainingQuantityChanged();
    partial void OnSadConsignmentNoChanging(string value);
    partial void OnSadConsignmentNoChanged();
    partial void OnSADDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSADDateChanged();
    partial void OnSADDocumentNoChanging(string value);
    partial void OnSADDocumentNoChanged();
    partial void OnSettledQuantityChanging(System.Nullable<double> value);
    partial void OnSettledQuantityChanged();
    partial void OnSPNoChanging(System.Nullable<double> value);
    partial void OnSPNoChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTobaccoValueChanging(System.Nullable<double> value);
    partial void OnTobaccoValueChanged();
    partial void OnVATPerSettledAmountChanging(System.Nullable<double> value);
    partial void OnVATPerSettledAmountChanged();
    #endregion
		
		public Disposal()
		{
			this._Batch = default(EntityRef<Batch>);
			this._Clearence = default(EntityRef<Clearence>);
			this._InvoiceContent = default(EntityRef<InvoiceContent>);
			this._IPR = default(EntityRef<IPR>);
			this._JSOXCustomsSummary = default(EntityRef<JSOXCustomsSummary>);
			this._Material = default(EntityRef<Material>);
			this._PCNCode = default(EntityRef<PCNCode>);
			OnCreated();
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Storage="_ClearingType", DbType="NVarChar(255)")]
		public string ClearingType
		{
			get
			{
				return this._ClearingType;
			}
			set
			{
				if ((this._ClearingType != value))
				{
					this.OnClearingTypeChanging(value);
					this.SendPropertyChanging();
					this._ClearingType = value;
					this.SendPropertyChanged("ClearingType");
					this.OnClearingTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CustomsProcedure", DbType="NVarChar(255)")]
		public string CustomsProcedure
		{
			get
			{
				return this._CustomsProcedure;
			}
			set
			{
				if ((this._CustomsProcedure != value))
				{
					this.OnCustomsProcedureChanging(value);
					this.SendPropertyChanging();
					this._CustomsProcedure = value;
					this.SendPropertyChanged("CustomsProcedure");
					this.OnCustomsProcedureChanged();
				}
			}
		}
		
		[Column(Storage="_CustomsStatus", DbType="NVarChar(255)")]
		public string CustomsStatus
		{
			get
			{
				return this._CustomsStatus;
			}
			set
			{
				if ((this._CustomsStatus != value))
				{
					this.OnCustomsStatusChanging(value);
					this.SendPropertyChanging();
					this._CustomsStatus = value;
					this.SendPropertyChanged("CustomsStatus");
					this.OnCustomsStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Disposal2BatchIndex", DbType="Int")]
		public System.Nullable<int> Disposal2BatchIndex
		{
			get
			{
				return this._Disposal2BatchIndex;
			}
			set
			{
				if ((this._Disposal2BatchIndex != value))
				{
					if (this._Batch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisposal2BatchIndexChanging(value);
					this.SendPropertyChanging();
					this._Disposal2BatchIndex = value;
					this.SendPropertyChanged("Disposal2BatchIndex");
					this.OnDisposal2BatchIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Disposal2ClearenceIndex", DbType="Int")]
		public System.Nullable<int> Disposal2ClearenceIndex
		{
			get
			{
				return this._Disposal2ClearenceIndex;
			}
			set
			{
				if ((this._Disposal2ClearenceIndex != value))
				{
					if (this._Clearence.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisposal2ClearenceIndexChanging(value);
					this.SendPropertyChanging();
					this._Disposal2ClearenceIndex = value;
					this.SendPropertyChanged("Disposal2ClearenceIndex");
					this.OnDisposal2ClearenceIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Disposal2InvoiceContentIndex", DbType="Int")]
		public System.Nullable<int> Disposal2InvoiceContentIndex
		{
			get
			{
				return this._Disposal2InvoiceContentIndex;
			}
			set
			{
				if ((this._Disposal2InvoiceContentIndex != value))
				{
					if (this._InvoiceContent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisposal2InvoiceContentIndexChanging(value);
					this.SendPropertyChanging();
					this._Disposal2InvoiceContentIndex = value;
					this.SendPropertyChanged("Disposal2InvoiceContentIndex");
					this.OnDisposal2InvoiceContentIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Disposal2IPRIndex", DbType="Int")]
		public System.Nullable<int> Disposal2IPRIndex
		{
			get
			{
				return this._Disposal2IPRIndex;
			}
			set
			{
				if ((this._Disposal2IPRIndex != value))
				{
					if (this._IPR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisposal2IPRIndexChanging(value);
					this.SendPropertyChanging();
					this._Disposal2IPRIndex = value;
					this.SendPropertyChanged("Disposal2IPRIndex");
					this.OnDisposal2IPRIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Disposal2MaterialIndex", DbType="Int")]
		public System.Nullable<int> Disposal2MaterialIndex
		{
			get
			{
				return this._Disposal2MaterialIndex;
			}
			set
			{
				if ((this._Disposal2MaterialIndex != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisposal2MaterialIndexChanging(value);
					this.SendPropertyChanging();
					this._Disposal2MaterialIndex = value;
					this.SendPropertyChanged("Disposal2MaterialIndex");
					this.OnDisposal2MaterialIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Disposal2PCNID", DbType="Int")]
		public System.Nullable<int> Disposal2PCNID
		{
			get
			{
				return this._Disposal2PCNID;
			}
			set
			{
				if ((this._Disposal2PCNID != value))
				{
					if (this._PCNCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisposal2PCNIDChanging(value);
					this.SendPropertyChanging();
					this._Disposal2PCNID = value;
					this.SendPropertyChanged("Disposal2PCNID");
					this.OnDisposal2PCNIDChanged();
				}
			}
		}
		
		[Column(Storage="_DisposalStatus", DbType="NVarChar(255)")]
		public string DisposalStatus
		{
			get
			{
				return this._DisposalStatus;
			}
			set
			{
				if ((this._DisposalStatus != value))
				{
					this.OnDisposalStatusChanging(value);
					this.SendPropertyChanging();
					this._DisposalStatus = value;
					this.SendPropertyChanged("DisposalStatus");
					this.OnDisposalStatusChanged();
				}
			}
		}
		
		[Column(Storage="_DutyAndVAT", DbType="Float")]
		public System.Nullable<double> DutyAndVAT
		{
			get
			{
				return this._DutyAndVAT;
			}
			set
			{
				if ((this._DutyAndVAT != value))
				{
					this.OnDutyAndVATChanging(value);
					this.SendPropertyChanging();
					this._DutyAndVAT = value;
					this.SendPropertyChanged("DutyAndVAT");
					this.OnDutyAndVATChanged();
				}
			}
		}
		
		[Column(Storage="_DutyPerSettledAmount", DbType="Float")]
		public System.Nullable<double> DutyPerSettledAmount
		{
			get
			{
				return this._DutyPerSettledAmount;
			}
			set
			{
				if ((this._DutyPerSettledAmount != value))
				{
					this.OnDutyPerSettledAmountChanging(value);
					this.SendPropertyChanging();
					this._DutyPerSettledAmount = value;
					this.SendPropertyChanged("DutyPerSettledAmount");
					this.OnDutyPerSettledAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="NVarChar(255)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_IPRDocumentNo", DbType="NVarChar(255)")]
		public string IPRDocumentNo
		{
			get
			{
				return this._IPRDocumentNo;
			}
			set
			{
				if ((this._IPRDocumentNo != value))
				{
					this.OnIPRDocumentNoChanging(value);
					this.SendPropertyChanging();
					this._IPRDocumentNo = value;
					this.SendPropertyChanged("IPRDocumentNo");
					this.OnIPRDocumentNoChanged();
				}
			}
		}
		
		[Column(Storage="_JSOXCustomsSummaryIndex", DbType="Int")]
		public System.Nullable<int> JSOXCustomsSummaryIndex
		{
			get
			{
				return this._JSOXCustomsSummaryIndex;
			}
			set
			{
				if ((this._JSOXCustomsSummaryIndex != value))
				{
					if (this._JSOXCustomsSummary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJSOXCustomsSummaryIndexChanging(value);
					this.SendPropertyChanging();
					this._JSOXCustomsSummaryIndex = value;
					this.SendPropertyChanged("JSOXCustomsSummaryIndex");
					this.OnJSOXCustomsSummaryIndexChanged();
				}
			}
		}
		
		[Column(Storage="_JSOXReportID", DbType="Float")]
		public System.Nullable<double> JSOXReportID
		{
			get
			{
				return this._JSOXReportID;
			}
			set
			{
				if ((this._JSOXReportID != value))
				{
					this.OnJSOXReportIDChanging(value);
					this.SendPropertyChanging();
					this._JSOXReportID = value;
					this.SendPropertyChanged("JSOXReportID");
					this.OnJSOXReportIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_RemainingQuantity", DbType="Float")]
		public System.Nullable<double> RemainingQuantity
		{
			get
			{
				return this._RemainingQuantity;
			}
			set
			{
				if ((this._RemainingQuantity != value))
				{
					this.OnRemainingQuantityChanging(value);
					this.SendPropertyChanging();
					this._RemainingQuantity = value;
					this.SendPropertyChanged("RemainingQuantity");
					this.OnRemainingQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_SadConsignmentNo", DbType="NVarChar(255)")]
		public string SadConsignmentNo
		{
			get
			{
				return this._SadConsignmentNo;
			}
			set
			{
				if ((this._SadConsignmentNo != value))
				{
					this.OnSadConsignmentNoChanging(value);
					this.SendPropertyChanging();
					this._SadConsignmentNo = value;
					this.SendPropertyChanged("SadConsignmentNo");
					this.OnSadConsignmentNoChanged();
				}
			}
		}
		
		[Column(Storage="_SADDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SADDate
		{
			get
			{
				return this._SADDate;
			}
			set
			{
				if ((this._SADDate != value))
				{
					this.OnSADDateChanging(value);
					this.SendPropertyChanging();
					this._SADDate = value;
					this.SendPropertyChanged("SADDate");
					this.OnSADDateChanged();
				}
			}
		}
		
		[Column(Storage="_SADDocumentNo", DbType="NVarChar(255)")]
		public string SADDocumentNo
		{
			get
			{
				return this._SADDocumentNo;
			}
			set
			{
				if ((this._SADDocumentNo != value))
				{
					this.OnSADDocumentNoChanging(value);
					this.SendPropertyChanging();
					this._SADDocumentNo = value;
					this.SendPropertyChanged("SADDocumentNo");
					this.OnSADDocumentNoChanged();
				}
			}
		}
		
		[Column(Storage="_SettledQuantity", DbType="Float")]
		public System.Nullable<double> SettledQuantity
		{
			get
			{
				return this._SettledQuantity;
			}
			set
			{
				if ((this._SettledQuantity != value))
				{
					this.OnSettledQuantityChanging(value);
					this.SendPropertyChanging();
					this._SettledQuantity = value;
					this.SendPropertyChanged("SettledQuantity");
					this.OnSettledQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_SPNo", DbType="Float")]
		public System.Nullable<double> SPNo
		{
			get
			{
				return this._SPNo;
			}
			set
			{
				if ((this._SPNo != value))
				{
					this.OnSPNoChanging(value);
					this.SendPropertyChanging();
					this._SPNo = value;
					this.SendPropertyChanged("SPNo");
					this.OnSPNoChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoValue", DbType="Float")]
		public System.Nullable<double> TobaccoValue
		{
			get
			{
				return this._TobaccoValue;
			}
			set
			{
				if ((this._TobaccoValue != value))
				{
					this.OnTobaccoValueChanging(value);
					this.SendPropertyChanging();
					this._TobaccoValue = value;
					this.SendPropertyChanged("TobaccoValue");
					this.OnTobaccoValueChanged();
				}
			}
		}
		
		[Column(Storage="_VATPerSettledAmount", DbType="Float")]
		public System.Nullable<double> VATPerSettledAmount
		{
			get
			{
				return this._VATPerSettledAmount;
			}
			set
			{
				if ((this._VATPerSettledAmount != value))
				{
					this.OnVATPerSettledAmountChanging(value);
					this.SendPropertyChanging();
					this._VATPerSettledAmount = value;
					this.SendPropertyChanged("VATPerSettledAmount");
					this.OnVATPerSettledAmountChanged();
				}
			}
		}
		
		[Association(Name="FK_Disposal_Batch", Storage="_Batch", ThisKey="Disposal2BatchIndex", OtherKey="ID", IsForeignKey=true)]
		public Batch Batch
		{
			get
			{
				return this._Batch.Entity;
			}
			set
			{
				Batch previousValue = this._Batch.Entity;
				if (((previousValue != value) 
							|| (this._Batch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch.Entity = null;
						previousValue.Disposal.Remove(this);
					}
					this._Batch.Entity = value;
					if ((value != null))
					{
						value.Disposal.Add(this);
						this._Disposal2BatchIndex = value.ID;
					}
					else
					{
						this._Disposal2BatchIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("Batch");
				}
			}
		}
		
		[Association(Name="FK_Disposal_Clearence", Storage="_Clearence", ThisKey="Disposal2ClearenceIndex", OtherKey="ID", IsForeignKey=true)]
		public Clearence Clearence
		{
			get
			{
				return this._Clearence.Entity;
			}
			set
			{
				Clearence previousValue = this._Clearence.Entity;
				if (((previousValue != value) 
							|| (this._Clearence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clearence.Entity = null;
						previousValue.Disposal.Remove(this);
					}
					this._Clearence.Entity = value;
					if ((value != null))
					{
						value.Disposal.Add(this);
						this._Disposal2ClearenceIndex = value.ID;
					}
					else
					{
						this._Disposal2ClearenceIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("Clearence");
				}
			}
		}
		
		[Association(Name="FK_Disposal_InvoiceContent", Storage="_InvoiceContent", ThisKey="Disposal2InvoiceContentIndex", OtherKey="ID", IsForeignKey=true)]
		public InvoiceContent InvoiceContent
		{
			get
			{
				return this._InvoiceContent.Entity;
			}
			set
			{
				InvoiceContent previousValue = this._InvoiceContent.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceContent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceContent.Entity = null;
						previousValue.Disposal.Remove(this);
					}
					this._InvoiceContent.Entity = value;
					if ((value != null))
					{
						value.Disposal.Add(this);
						this._Disposal2InvoiceContentIndex = value.ID;
					}
					else
					{
						this._Disposal2InvoiceContentIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("InvoiceContent");
				}
			}
		}
		
		[Association(Name="FK_Disposal_IPR", Storage="_IPR", ThisKey="Disposal2IPRIndex", OtherKey="ID", IsForeignKey=true)]
		public IPR IPR
		{
			get
			{
				return this._IPR.Entity;
			}
			set
			{
				IPR previousValue = this._IPR.Entity;
				if (((previousValue != value) 
							|| (this._IPR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IPR.Entity = null;
						previousValue.Disposal.Remove(this);
					}
					this._IPR.Entity = value;
					if ((value != null))
					{
						value.Disposal.Add(this);
						this._Disposal2IPRIndex = value.ID;
					}
					else
					{
						this._Disposal2IPRIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("IPR");
				}
			}
		}
		
		[Association(Name="FK_Disposal_JSOXCustomsSummary", Storage="_JSOXCustomsSummary", ThisKey="JSOXCustomsSummaryIndex", OtherKey="ID", IsForeignKey=true)]
		public JSOXCustomsSummary JSOXCustomsSummary
		{
			get
			{
				return this._JSOXCustomsSummary.Entity;
			}
			set
			{
				JSOXCustomsSummary previousValue = this._JSOXCustomsSummary.Entity;
				if (((previousValue != value) 
							|| (this._JSOXCustomsSummary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JSOXCustomsSummary.Entity = null;
						previousValue.Disposal.Remove(this);
					}
					this._JSOXCustomsSummary.Entity = value;
					if ((value != null))
					{
						value.Disposal.Add(this);
						this._JSOXCustomsSummaryIndex = value.ID;
					}
					else
					{
						this._JSOXCustomsSummaryIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("JSOXCustomsSummary");
				}
			}
		}
		
		[Association(Name="FK_Disposal_Material", Storage="_Material", ThisKey="Disposal2MaterialIndex", OtherKey="ID", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Disposal.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Disposal.Add(this);
						this._Disposal2MaterialIndex = value.ID;
					}
					else
					{
						this._Disposal2MaterialIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[Association(Name="FK_Disposal_PCNCode", Storage="_PCNCode", ThisKey="Disposal2PCNID", OtherKey="ID", IsForeignKey=true)]
		public PCNCode PCNCode
		{
			get
			{
				return this._PCNCode.Entity;
			}
			set
			{
				PCNCode previousValue = this._PCNCode.Entity;
				if (((previousValue != value) 
							|| (this._PCNCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PCNCode.Entity = null;
						previousValue.Disposal_PCNCode.Remove(this);
					}
					this._PCNCode.Entity = value;
					if ((value != null))
					{
						value.Disposal_PCNCode.Add(this);
						this._Disposal2PCNID = value.ID;
					}
					else
					{
						this._Disposal2PCNID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PCNCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Dust")]
	public partial class Dust : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private double _DustRatio;
		
		private int _ID;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private string _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDustRatioChanging(double value);
    partial void OnDustRatioChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    #endregion
		
		public Dust()
		{
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_DustRatio", DbType="Float NOT NULL")]
		public double DustRatio
		{
			get
			{
				return this._DustRatio;
			}
			set
			{
				if ((this._DustRatio != value))
				{
					this.OnDustRatioChanging(value);
					this.SendPropertyChanging();
					this._DustRatio = value;
					this.SendPropertyChanged("DustRatio");
					this.OnDustRatioChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ListName;
		
		private int _ItemID;
		
		private string _FieldName;
		
		private string _FieldValue;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnListNameChanging(string value);
    partial void OnListNameChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnFieldValueChanging(string value);
    partial void OnFieldValueChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public History()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ListName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ListName
		{
			get
			{
				return this._ListName;
			}
			set
			{
				if ((this._ListName != value))
				{
					this.OnListNameChanging(value);
					this.SendPropertyChanging();
					this._ListName = value;
					this.SendPropertyChanged("ListName");
					this.OnListNameChanged();
				}
			}
		}
		
		[Column(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_FieldValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FieldValue
		{
			get
			{
				return this._FieldValue;
			}
			set
			{
				if ((this._FieldValue != value))
				{
					this.OnFieldValueChanging(value);
					this.SendPropertyChanging();
					this._FieldValue = value;
					this.SendPropertyChanged("FieldValue");
					this.OnFieldValueChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InvoiceContent")]
	public partial class InvoiceContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Archival;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.Nullable<int> _InvoiceContent2BatchIndex;
		
		private string _InvoiceContentStatus;
		
		private System.Nullable<int> _InvoiceIndex;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ProductType;
		
		private System.Nullable<double> _Quantity;
		
		private string _SKUDescription;
		
		private string _Title;
		
		private string _Units;
		
		private EntitySet<Disposal> _Disposal;
		
		private EntityRef<Batch> _Batch;
		
		private EntityRef<InvoiceLibrary> _InvoiceLibrary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceContent2BatchIndexChanging(System.Nullable<int> value);
    partial void OnInvoiceContent2BatchIndexChanged();
    partial void OnInvoiceContentStatusChanging(string value);
    partial void OnInvoiceContentStatusChanged();
    partial void OnInvoiceIndexChanging(System.Nullable<int> value);
    partial void OnInvoiceIndexChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    partial void OnQuantityChanging(System.Nullable<double> value);
    partial void OnQuantityChanged();
    partial void OnSKUDescriptionChanging(string value);
    partial void OnSKUDescriptionChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUnitsChanging(string value);
    partial void OnUnitsChanged();
    #endregion
		
		public InvoiceContent()
		{
			this._Disposal = new EntitySet<Disposal>(new Action<Disposal>(this.attach_Disposal), new Action<Disposal>(this.detach_Disposal));
			this._Batch = default(EntityRef<Batch>);
			this._InvoiceLibrary = default(EntityRef<InvoiceLibrary>);
			OnCreated();
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceContent2BatchIndex", DbType="Int")]
		public System.Nullable<int> InvoiceContent2BatchIndex
		{
			get
			{
				return this._InvoiceContent2BatchIndex;
			}
			set
			{
				if ((this._InvoiceContent2BatchIndex != value))
				{
					if (this._Batch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceContent2BatchIndexChanging(value);
					this.SendPropertyChanging();
					this._InvoiceContent2BatchIndex = value;
					this.SendPropertyChanged("InvoiceContent2BatchIndex");
					this.OnInvoiceContent2BatchIndexChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceContentStatus", DbType="NVarChar(255)")]
		public string InvoiceContentStatus
		{
			get
			{
				return this._InvoiceContentStatus;
			}
			set
			{
				if ((this._InvoiceContentStatus != value))
				{
					this.OnInvoiceContentStatusChanging(value);
					this.SendPropertyChanging();
					this._InvoiceContentStatus = value;
					this.SendPropertyChanged("InvoiceContentStatus");
					this.OnInvoiceContentStatusChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceIndex", DbType="Int")]
		public System.Nullable<int> InvoiceIndex
		{
			get
			{
				return this._InvoiceIndex;
			}
			set
			{
				if ((this._InvoiceIndex != value))
				{
					if (this._InvoiceLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIndexChanging(value);
					this.SendPropertyChanging();
					this._InvoiceIndex = value;
					this.SendPropertyChanged("InvoiceIndex");
					this.OnInvoiceIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(255)")]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Float")]
		public System.Nullable<double> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_SKUDescription", DbType="NVarChar(255)")]
		public string SKUDescription
		{
			get
			{
				return this._SKUDescription;
			}
			set
			{
				if ((this._SKUDescription != value))
				{
					this.OnSKUDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SKUDescription = value;
					this.SendPropertyChanged("SKUDescription");
					this.OnSKUDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Units", DbType="NVarChar(255)")]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[Association(Name="FK_Disposal_InvoiceContent", Storage="_Disposal", ThisKey="ID", OtherKey="Disposal2InvoiceContentIndex", DeleteRule="NO ACTION")]
		public EntitySet<Disposal> Disposal
		{
			get
			{
				return this._Disposal;
			}
			set
			{
				this._Disposal.Assign(value);
			}
		}
		
		[Association(Name="FK_InvoiceContent_Batch", Storage="_Batch", ThisKey="InvoiceContent2BatchIndex", OtherKey="ID", IsForeignKey=true)]
		public Batch Batch
		{
			get
			{
				return this._Batch.Entity;
			}
			set
			{
				Batch previousValue = this._Batch.Entity;
				if (((previousValue != value) 
							|| (this._Batch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch.Entity = null;
						previousValue.InvoiceContent.Remove(this);
					}
					this._Batch.Entity = value;
					if ((value != null))
					{
						value.InvoiceContent.Add(this);
						this._InvoiceContent2BatchIndex = value.ID;
					}
					else
					{
						this._InvoiceContent2BatchIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("Batch");
				}
			}
		}
		
		[Association(Name="FK_InvoiceContent_InvoiceLibrary", Storage="_InvoiceLibrary", ThisKey="InvoiceIndex", OtherKey="ID", IsForeignKey=true)]
		public InvoiceLibrary InvoiceLibrary
		{
			get
			{
				return this._InvoiceLibrary.Entity;
			}
			set
			{
				InvoiceLibrary previousValue = this._InvoiceLibrary.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceLibrary.Entity = null;
						previousValue.InvoiceContent.Remove(this);
					}
					this._InvoiceLibrary.Entity = value;
					if ((value != null))
					{
						value.InvoiceContent.Add(this);
						this._InvoiceIndex = value.ID;
					}
					else
					{
						this._InvoiceIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("InvoiceLibrary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContent = this;
		}
		
		private void detach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceContent = null;
		}
	}
	
	[Table(Name="dbo.InvoiceLibrary")]
	public partial class InvoiceLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BillDoc;
		
		private System.Nullable<int> _ClearenceIndex;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _InvoiceCreationDate;
		
		private System.Nullable<bool> _InvoiceLibraryReadOnly;
		
		private System.Nullable<bool> _InvoiceLibraryStatus;
		
		private System.Nullable<bool> _IsExport;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _Title;
		
		private EntitySet<InvoiceContent> _InvoiceContent;
		
		private EntityRef<Clearence> _Clearence;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillDocChanging(string value);
    partial void OnBillDocChanged();
    partial void OnClearenceIndexChanging(System.Nullable<int> value);
    partial void OnClearenceIndexChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInvoiceCreationDateChanged();
    partial void OnInvoiceLibraryReadOnlyChanging(System.Nullable<bool> value);
    partial void OnInvoiceLibraryReadOnlyChanged();
    partial void OnInvoiceLibraryStatusChanging(System.Nullable<bool> value);
    partial void OnInvoiceLibraryStatusChanged();
    partial void OnIsExportChanging(System.Nullable<bool> value);
    partial void OnIsExportChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public InvoiceLibrary()
		{
			this._InvoiceContent = new EntitySet<InvoiceContent>(new Action<InvoiceContent>(this.attach_InvoiceContent), new Action<InvoiceContent>(this.detach_InvoiceContent));
			this._Clearence = default(EntityRef<Clearence>);
			OnCreated();
		}
		
		[Column(Storage="_BillDoc", DbType="NVarChar(255)")]
		public string BillDoc
		{
			get
			{
				return this._BillDoc;
			}
			set
			{
				if ((this._BillDoc != value))
				{
					this.OnBillDocChanging(value);
					this.SendPropertyChanging();
					this._BillDoc = value;
					this.SendPropertyChanged("BillDoc");
					this.OnBillDocChanged();
				}
			}
		}
		
		[Column(Storage="_ClearenceIndex", DbType="Int")]
		public System.Nullable<int> ClearenceIndex
		{
			get
			{
				return this._ClearenceIndex;
			}
			set
			{
				if ((this._ClearenceIndex != value))
				{
					if (this._Clearence.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClearenceIndexChanging(value);
					this.SendPropertyChanging();
					this._ClearenceIndex = value;
					this.SendPropertyChanged("ClearenceIndex");
					this.OnClearenceIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceCreationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InvoiceCreationDate
		{
			get
			{
				return this._InvoiceCreationDate;
			}
			set
			{
				if ((this._InvoiceCreationDate != value))
				{
					this.OnInvoiceCreationDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceCreationDate = value;
					this.SendPropertyChanged("InvoiceCreationDate");
					this.OnInvoiceCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceLibraryReadOnly", DbType="Bit")]
		public System.Nullable<bool> InvoiceLibraryReadOnly
		{
			get
			{
				return this._InvoiceLibraryReadOnly;
			}
			set
			{
				if ((this._InvoiceLibraryReadOnly != value))
				{
					this.OnInvoiceLibraryReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._InvoiceLibraryReadOnly = value;
					this.SendPropertyChanged("InvoiceLibraryReadOnly");
					this.OnInvoiceLibraryReadOnlyChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceLibraryStatus", DbType="Bit")]
		public System.Nullable<bool> InvoiceLibraryStatus
		{
			get
			{
				return this._InvoiceLibraryStatus;
			}
			set
			{
				if ((this._InvoiceLibraryStatus != value))
				{
					this.OnInvoiceLibraryStatusChanging(value);
					this.SendPropertyChanging();
					this._InvoiceLibraryStatus = value;
					this.SendPropertyChanged("InvoiceLibraryStatus");
					this.OnInvoiceLibraryStatusChanged();
				}
			}
		}
		
		[Column(Storage="_IsExport", DbType="Bit")]
		public System.Nullable<bool> IsExport
		{
			get
			{
				return this._IsExport;
			}
			set
			{
				if ((this._IsExport != value))
				{
					this.OnIsExportChanging(value);
					this.SendPropertyChanging();
					this._IsExport = value;
					this.SendPropertyChanged("IsExport");
					this.OnIsExportChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_InvoiceContent_InvoiceLibrary", Storage="_InvoiceContent", ThisKey="ID", OtherKey="InvoiceIndex", DeleteRule="NO ACTION")]
		public EntitySet<InvoiceContent> InvoiceContent
		{
			get
			{
				return this._InvoiceContent;
			}
			set
			{
				this._InvoiceContent.Assign(value);
			}
		}
		
		[Association(Name="FK_InvoiceLibrary_Clearence", Storage="_Clearence", ThisKey="ClearenceIndex", OtherKey="ID", IsForeignKey=true)]
		public Clearence Clearence
		{
			get
			{
				return this._Clearence.Entity;
			}
			set
			{
				Clearence previousValue = this._Clearence.Entity;
				if (((previousValue != value) 
							|| (this._Clearence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clearence.Entity = null;
						previousValue.InvoiceLibrary.Remove(this);
					}
					this._Clearence.Entity = value;
					if ((value != null))
					{
						value.InvoiceLibrary.Add(this);
						this._ClearenceIndex = value.ID;
					}
					else
					{
						this._ClearenceIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("Clearence");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceContent(InvoiceContent entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceLibrary = this;
		}
		
		private void detach_InvoiceContent(InvoiceContent entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceLibrary = null;
		}
	}
	
	[Table(Name="dbo.IPR")]
	public partial class IPR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private double _AccountBalance;
		
		private bool _AccountClosed;
		
		private System.Nullable<bool> _Archival;
		
		private string _Batch;
		
		private System.Nullable<double> _Cartons;
		
		private System.Nullable<int> _ClearenceIndex;
		
		private System.Nullable<System.DateTime> _ClosingDate;
		
		private System.Nullable<double> _ConsentPeriod;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _Currency;
		
		private System.Nullable<System.DateTime> _CustomsDebtDate;
		
		private string _DocumentNo;
		
		private System.Nullable<double> _Duty;
		
		private string _DutyName;
		
		private string _Grade;
		
		private System.Nullable<double> _GrossMass;
		
		private int _ID;
		
		private string _InvoiceNo;
		
		private System.Nullable<int> _IPR2ConsentTitle;
		
		private System.Nullable<int> _IPR2JSOXIndex;
		
		private System.Nullable<int> _IPR2PCNPCN;
		
		private string _IPRClosi;
		
		private System.Nullable<double> _IPRDutyPerUnit;
		
		private System.Nullable<int> _IPRLibraryIndex;
		
		private System.Nullable<double> _IPRUnitPrice;
		
		private System.Nullable<double> _IPRVATPerUnit;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Nullable<double> _NetMass;
		
		private System.Nullable<System.DateTime> _OGLValidTo;
		
		private System.Nullable<double> _ProductivityRateMax;
		
		private System.Nullable<double> _ProductivityRateMin;
		
		private string _SKU;
		
		private string _Title;
		
		private string _TobaccoName;
		
		private System.Nullable<double> _TobaccoNotAllocated;
		
		private System.Nullable<System.DateTime> _ValidFromDate;
		
		private System.Nullable<System.DateTime> _ValidToDate;
		
		private System.Nullable<double> _Value;
		
		private System.Nullable<double> _VAT;
		
		private string _VATName;
		
		private EntitySet<BalanceIPR> _BalanceIPR;
		
		private EntitySet<Disposal> _Disposal;
		
		private EntityRef<Clearence> _Clearence;
		
		private EntityRef<Consent> _Consent;
		
		private EntityRef<IPRLibrary> _IPRLibrary;
		
		private EntityRef<JSOXLibrary> _JSOXLibrary;
		
		private EntityRef<PCNCode> _PCNCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountBalanceChanging(double value);
    partial void OnAccountBalanceChanged();
    partial void OnAccountClosedChanging(bool value);
    partial void OnAccountClosedChanged();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnBatchChanging(string value);
    partial void OnBatchChanged();
    partial void OnCartonsChanging(System.Nullable<double> value);
    partial void OnCartonsChanged();
    partial void OnClearenceIndexChanging(System.Nullable<int> value);
    partial void OnClearenceIndexChanged();
    partial void OnClosingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosingDateChanged();
    partial void OnConsentPeriodChanging(System.Nullable<double> value);
    partial void OnConsentPeriodChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnCustomsDebtDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCustomsDebtDateChanged();
    partial void OnDocumentNoChanging(string value);
    partial void OnDocumentNoChanged();
    partial void OnDutyChanging(System.Nullable<double> value);
    partial void OnDutyChanged();
    partial void OnDutyNameChanging(string value);
    partial void OnDutyNameChanged();
    partial void OnGradeChanging(string value);
    partial void OnGradeChanged();
    partial void OnGrossMassChanging(System.Nullable<double> value);
    partial void OnGrossMassChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnIPR2ConsentTitleChanging(System.Nullable<int> value);
    partial void OnIPR2ConsentTitleChanged();
    partial void OnIPR2JSOXIndexChanging(System.Nullable<int> value);
    partial void OnIPR2JSOXIndexChanged();
    partial void OnIPR2PCNPCNChanging(System.Nullable<int> value);
    partial void OnIPR2PCNPCNChanged();
    partial void OnIPRClosiChanging(string value);
    partial void OnIPRClosiChanged();
    partial void OnIPRDutyPerUnitChanging(System.Nullable<double> value);
    partial void OnIPRDutyPerUnitChanged();
    partial void OnIPRLibraryIndexChanging(System.Nullable<int> value);
    partial void OnIPRLibraryIndexChanged();
    partial void OnIPRUnitPriceChanging(System.Nullable<double> value);
    partial void OnIPRUnitPriceChanged();
    partial void OnIPRVATPerUnitChanging(System.Nullable<double> value);
    partial void OnIPRVATPerUnitChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnNetMassChanging(System.Nullable<double> value);
    partial void OnNetMassChanged();
    partial void OnOGLValidToChanging(System.Nullable<System.DateTime> value);
    partial void OnOGLValidToChanged();
    partial void OnProductivityRateMaxChanging(System.Nullable<double> value);
    partial void OnProductivityRateMaxChanged();
    partial void OnProductivityRateMinChanging(System.Nullable<double> value);
    partial void OnProductivityRateMinChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTobaccoNameChanging(string value);
    partial void OnTobaccoNameChanged();
    partial void OnTobaccoNotAllocatedChanging(System.Nullable<double> value);
    partial void OnTobaccoNotAllocatedChanged();
    partial void OnValidFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValidFromDateChanged();
    partial void OnValidToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValidToDateChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    partial void OnVATChanging(System.Nullable<double> value);
    partial void OnVATChanged();
    partial void OnVATNameChanging(string value);
    partial void OnVATNameChanged();
    #endregion
		
		public IPR()
		{
			this._BalanceIPR = new EntitySet<BalanceIPR>(new Action<BalanceIPR>(this.attach_BalanceIPR), new Action<BalanceIPR>(this.detach_BalanceIPR));
			this._Disposal = new EntitySet<Disposal>(new Action<Disposal>(this.attach_Disposal), new Action<Disposal>(this.detach_Disposal));
			this._Clearence = default(EntityRef<Clearence>);
			this._Consent = default(EntityRef<Consent>);
			this._IPRLibrary = default(EntityRef<IPRLibrary>);
			this._JSOXLibrary = default(EntityRef<JSOXLibrary>);
			this._PCNCode = default(EntityRef<PCNCode>);
			OnCreated();
		}
		
		[Column(Storage="_AccountBalance", DbType="Float NOT NULL")]
		public double AccountBalance
		{
			get
			{
				return this._AccountBalance;
			}
			set
			{
				if ((this._AccountBalance != value))
				{
					this.OnAccountBalanceChanging(value);
					this.SendPropertyChanging();
					this._AccountBalance = value;
					this.SendPropertyChanged("AccountBalance");
					this.OnAccountBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_AccountClosed", DbType="Bit NOT NULL")]
		public bool AccountClosed
		{
			get
			{
				return this._AccountClosed;
			}
			set
			{
				if ((this._AccountClosed != value))
				{
					this.OnAccountClosedChanging(value);
					this.SendPropertyChanging();
					this._AccountClosed = value;
					this.SendPropertyChanged("AccountClosed");
					this.OnAccountClosedChanged();
				}
			}
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Storage="_Batch", DbType="NVarChar(255)")]
		public string Batch
		{
			get
			{
				return this._Batch;
			}
			set
			{
				if ((this._Batch != value))
				{
					this.OnBatchChanging(value);
					this.SendPropertyChanging();
					this._Batch = value;
					this.SendPropertyChanged("Batch");
					this.OnBatchChanged();
				}
			}
		}
		
		[Column(Storage="_Cartons", DbType="Float")]
		public System.Nullable<double> Cartons
		{
			get
			{
				return this._Cartons;
			}
			set
			{
				if ((this._Cartons != value))
				{
					this.OnCartonsChanging(value);
					this.SendPropertyChanging();
					this._Cartons = value;
					this.SendPropertyChanged("Cartons");
					this.OnCartonsChanged();
				}
			}
		}
		
		[Column(Storage="_ClearenceIndex", DbType="Int")]
		public System.Nullable<int> ClearenceIndex
		{
			get
			{
				return this._ClearenceIndex;
			}
			set
			{
				if ((this._ClearenceIndex != value))
				{
					if (this._Clearence.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClearenceIndexChanging(value);
					this.SendPropertyChanging();
					this._ClearenceIndex = value;
					this.SendPropertyChanged("ClearenceIndex");
					this.OnClearenceIndexChanged();
				}
			}
		}
		
		[Column(Storage="_ClosingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosingDate
		{
			get
			{
				return this._ClosingDate;
			}
			set
			{
				if ((this._ClosingDate != value))
				{
					this.OnClosingDateChanging(value);
					this.SendPropertyChanging();
					this._ClosingDate = value;
					this.SendPropertyChanged("ClosingDate");
					this.OnClosingDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConsentPeriod", DbType="Float")]
		public System.Nullable<double> ConsentPeriod
		{
			get
			{
				return this._ConsentPeriod;
			}
			set
			{
				if ((this._ConsentPeriod != value))
				{
					this.OnConsentPeriodChanging(value);
					this.SendPropertyChanging();
					this._ConsentPeriod = value;
					this.SendPropertyChanged("ConsentPeriod");
					this.OnConsentPeriodChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="NVarChar(255)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_CustomsDebtDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CustomsDebtDate
		{
			get
			{
				return this._CustomsDebtDate;
			}
			set
			{
				if ((this._CustomsDebtDate != value))
				{
					this.OnCustomsDebtDateChanging(value);
					this.SendPropertyChanging();
					this._CustomsDebtDate = value;
					this.SendPropertyChanged("CustomsDebtDate");
					this.OnCustomsDebtDateChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentNo", DbType="NVarChar(255)")]
		public string DocumentNo
		{
			get
			{
				return this._DocumentNo;
			}
			set
			{
				if ((this._DocumentNo != value))
				{
					this.OnDocumentNoChanging(value);
					this.SendPropertyChanging();
					this._DocumentNo = value;
					this.SendPropertyChanged("DocumentNo");
					this.OnDocumentNoChanged();
				}
			}
		}
		
		[Column(Storage="_Duty", DbType="Float")]
		public System.Nullable<double> Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[Column(Storage="_DutyName", DbType="NVarChar(255)")]
		public string DutyName
		{
			get
			{
				return this._DutyName;
			}
			set
			{
				if ((this._DutyName != value))
				{
					this.OnDutyNameChanging(value);
					this.SendPropertyChanging();
					this._DutyName = value;
					this.SendPropertyChanged("DutyName");
					this.OnDutyNameChanged();
				}
			}
		}
		
		[Column(Storage="_Grade", DbType="NVarChar(255)")]
		public string Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[Column(Storage="_GrossMass", DbType="Float")]
		public System.Nullable<double> GrossMass
		{
			get
			{
				return this._GrossMass;
			}
			set
			{
				if ((this._GrossMass != value))
				{
					this.OnGrossMassChanging(value);
					this.SendPropertyChanging();
					this._GrossMass = value;
					this.SendPropertyChanged("GrossMass");
					this.OnGrossMassChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="NVarChar(255)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_IPR2ConsentTitle", DbType="Int")]
		public System.Nullable<int> IPR2ConsentTitle
		{
			get
			{
				return this._IPR2ConsentTitle;
			}
			set
			{
				if ((this._IPR2ConsentTitle != value))
				{
					if (this._Consent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIPR2ConsentTitleChanging(value);
					this.SendPropertyChanging();
					this._IPR2ConsentTitle = value;
					this.SendPropertyChanged("IPR2ConsentTitle");
					this.OnIPR2ConsentTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IPR2JSOXIndex", DbType="Int")]
		public System.Nullable<int> IPR2JSOXIndex
		{
			get
			{
				return this._IPR2JSOXIndex;
			}
			set
			{
				if ((this._IPR2JSOXIndex != value))
				{
					if (this._JSOXLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIPR2JSOXIndexChanging(value);
					this.SendPropertyChanging();
					this._IPR2JSOXIndex = value;
					this.SendPropertyChanged("IPR2JSOXIndex");
					this.OnIPR2JSOXIndexChanged();
				}
			}
		}
		
		[Column(Storage="_IPR2PCNPCN", DbType="Int")]
		public System.Nullable<int> IPR2PCNPCN
		{
			get
			{
				return this._IPR2PCNPCN;
			}
			set
			{
				if ((this._IPR2PCNPCN != value))
				{
					if (this._PCNCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIPR2PCNPCNChanging(value);
					this.SendPropertyChanging();
					this._IPR2PCNPCN = value;
					this.SendPropertyChanged("IPR2PCNPCN");
					this.OnIPR2PCNPCNChanged();
				}
			}
		}
		
		[Column(Storage="_IPRClosi", DbType="NVarChar(255)")]
		public string IPRClosi
		{
			get
			{
				return this._IPRClosi;
			}
			set
			{
				if ((this._IPRClosi != value))
				{
					this.OnIPRClosiChanging(value);
					this.SendPropertyChanging();
					this._IPRClosi = value;
					this.SendPropertyChanged("IPRClosi");
					this.OnIPRClosiChanged();
				}
			}
		}
		
		[Column(Storage="_IPRDutyPerUnit", DbType="Float")]
		public System.Nullable<double> IPRDutyPerUnit
		{
			get
			{
				return this._IPRDutyPerUnit;
			}
			set
			{
				if ((this._IPRDutyPerUnit != value))
				{
					this.OnIPRDutyPerUnitChanging(value);
					this.SendPropertyChanging();
					this._IPRDutyPerUnit = value;
					this.SendPropertyChanged("IPRDutyPerUnit");
					this.OnIPRDutyPerUnitChanged();
				}
			}
		}
		
		[Column(Storage="_IPRLibraryIndex", DbType="Int")]
		public System.Nullable<int> IPRLibraryIndex
		{
			get
			{
				return this._IPRLibraryIndex;
			}
			set
			{
				if ((this._IPRLibraryIndex != value))
				{
					if (this._IPRLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIPRLibraryIndexChanging(value);
					this.SendPropertyChanging();
					this._IPRLibraryIndex = value;
					this.SendPropertyChanged("IPRLibraryIndex");
					this.OnIPRLibraryIndexChanged();
				}
			}
		}
		
		[Column(Storage="_IPRUnitPrice", DbType="Float")]
		public System.Nullable<double> IPRUnitPrice
		{
			get
			{
				return this._IPRUnitPrice;
			}
			set
			{
				if ((this._IPRUnitPrice != value))
				{
					this.OnIPRUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._IPRUnitPrice = value;
					this.SendPropertyChanged("IPRUnitPrice");
					this.OnIPRUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_IPRVATPerUnit", DbType="Float")]
		public System.Nullable<double> IPRVATPerUnit
		{
			get
			{
				return this._IPRVATPerUnit;
			}
			set
			{
				if ((this._IPRVATPerUnit != value))
				{
					this.OnIPRVATPerUnitChanging(value);
					this.SendPropertyChanging();
					this._IPRVATPerUnit = value;
					this.SendPropertyChanged("IPRVATPerUnit");
					this.OnIPRVATPerUnitChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_NetMass", DbType="Float")]
		public System.Nullable<double> NetMass
		{
			get
			{
				return this._NetMass;
			}
			set
			{
				if ((this._NetMass != value))
				{
					this.OnNetMassChanging(value);
					this.SendPropertyChanging();
					this._NetMass = value;
					this.SendPropertyChanged("NetMass");
					this.OnNetMassChanged();
				}
			}
		}
		
		[Column(Storage="_OGLValidTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> OGLValidTo
		{
			get
			{
				return this._OGLValidTo;
			}
			set
			{
				if ((this._OGLValidTo != value))
				{
					this.OnOGLValidToChanging(value);
					this.SendPropertyChanging();
					this._OGLValidTo = value;
					this.SendPropertyChanged("OGLValidTo");
					this.OnOGLValidToChanged();
				}
			}
		}
		
		[Column(Storage="_ProductivityRateMax", DbType="Float")]
		public System.Nullable<double> ProductivityRateMax
		{
			get
			{
				return this._ProductivityRateMax;
			}
			set
			{
				if ((this._ProductivityRateMax != value))
				{
					this.OnProductivityRateMaxChanging(value);
					this.SendPropertyChanging();
					this._ProductivityRateMax = value;
					this.SendPropertyChanged("ProductivityRateMax");
					this.OnProductivityRateMaxChanged();
				}
			}
		}
		
		[Column(Storage="_ProductivityRateMin", DbType="Float")]
		public System.Nullable<double> ProductivityRateMin
		{
			get
			{
				return this._ProductivityRateMin;
			}
			set
			{
				if ((this._ProductivityRateMin != value))
				{
					this.OnProductivityRateMinChanging(value);
					this.SendPropertyChanging();
					this._ProductivityRateMin = value;
					this.SendPropertyChanged("ProductivityRateMin");
					this.OnProductivityRateMinChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(255)")]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoName", DbType="NVarChar(255)")]
		public string TobaccoName
		{
			get
			{
				return this._TobaccoName;
			}
			set
			{
				if ((this._TobaccoName != value))
				{
					this.OnTobaccoNameChanging(value);
					this.SendPropertyChanging();
					this._TobaccoName = value;
					this.SendPropertyChanged("TobaccoName");
					this.OnTobaccoNameChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoNotAllocated", DbType="Float")]
		public System.Nullable<double> TobaccoNotAllocated
		{
			get
			{
				return this._TobaccoNotAllocated;
			}
			set
			{
				if ((this._TobaccoNotAllocated != value))
				{
					this.OnTobaccoNotAllocatedChanging(value);
					this.SendPropertyChanging();
					this._TobaccoNotAllocated = value;
					this.SendPropertyChanged("TobaccoNotAllocated");
					this.OnTobaccoNotAllocatedChanged();
				}
			}
		}
		
		[Column(Storage="_ValidFromDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFromDate
		{
			get
			{
				return this._ValidFromDate;
			}
			set
			{
				if ((this._ValidFromDate != value))
				{
					this.OnValidFromDateChanging(value);
					this.SendPropertyChanging();
					this._ValidFromDate = value;
					this.SendPropertyChanged("ValidFromDate");
					this.OnValidFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_ValidToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidToDate
		{
			get
			{
				return this._ValidToDate;
			}
			set
			{
				if ((this._ValidToDate != value))
				{
					this.OnValidToDateChanging(value);
					this.SendPropertyChanging();
					this._ValidToDate = value;
					this.SendPropertyChanged("ValidToDate");
					this.OnValidToDateChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_VAT", DbType="Float")]
		public System.Nullable<double> VAT
		{
			get
			{
				return this._VAT;
			}
			set
			{
				if ((this._VAT != value))
				{
					this.OnVATChanging(value);
					this.SendPropertyChanging();
					this._VAT = value;
					this.SendPropertyChanged("VAT");
					this.OnVATChanged();
				}
			}
		}
		
		[Column(Storage="_VATName", DbType="NVarChar(255)")]
		public string VATName
		{
			get
			{
				return this._VATName;
			}
			set
			{
				if ((this._VATName != value))
				{
					this.OnVATNameChanging(value);
					this.SendPropertyChanging();
					this._VATName = value;
					this.SendPropertyChanged("VATName");
					this.OnVATNameChanged();
				}
			}
		}
		
		[Association(Name="FK_BalanceIPR_IPR", Storage="_BalanceIPR", ThisKey="ID", OtherKey="IPRIndex", DeleteRule="NO ACTION")]
		public EntitySet<BalanceIPR> BalanceIPR
		{
			get
			{
				return this._BalanceIPR;
			}
			set
			{
				this._BalanceIPR.Assign(value);
			}
		}
		
		[Association(Name="FK_Disposal_IPR", Storage="_Disposal", ThisKey="ID", OtherKey="Disposal2IPRIndex", DeleteRule="NO ACTION")]
		public EntitySet<Disposal> Disposal
		{
			get
			{
				return this._Disposal;
			}
			set
			{
				this._Disposal.Assign(value);
			}
		}
		
		[Association(Name="FK_IPR_Clearence", Storage="_Clearence", ThisKey="ClearenceIndex", OtherKey="ID", IsForeignKey=true)]
		public Clearence Clearence
		{
			get
			{
				return this._Clearence.Entity;
			}
			set
			{
				Clearence previousValue = this._Clearence.Entity;
				if (((previousValue != value) 
							|| (this._Clearence.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clearence.Entity = null;
						previousValue.IPR.Remove(this);
					}
					this._Clearence.Entity = value;
					if ((value != null))
					{
						value.IPR.Add(this);
						this._ClearenceIndex = value.ID;
					}
					else
					{
						this._ClearenceIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("Clearence");
				}
			}
		}
		
		[Association(Name="FK_IPR_Consent", Storage="_Consent", ThisKey="IPR2ConsentTitle", OtherKey="ID", IsForeignKey=true)]
		public Consent Consent
		{
			get
			{
				return this._Consent.Entity;
			}
			set
			{
				Consent previousValue = this._Consent.Entity;
				if (((previousValue != value) 
							|| (this._Consent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Consent.Entity = null;
						previousValue.IPR.Remove(this);
					}
					this._Consent.Entity = value;
					if ((value != null))
					{
						value.IPR.Add(this);
						this._IPR2ConsentTitle = value.ID;
					}
					else
					{
						this._IPR2ConsentTitle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Consent");
				}
			}
		}
		
		[Association(Name="FK_IPR_IPRLibrary", Storage="_IPRLibrary", ThisKey="IPRLibraryIndex", OtherKey="ID", IsForeignKey=true)]
		public IPRLibrary IPRLibrary
		{
			get
			{
				return this._IPRLibrary.Entity;
			}
			set
			{
				IPRLibrary previousValue = this._IPRLibrary.Entity;
				if (((previousValue != value) 
							|| (this._IPRLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IPRLibrary.Entity = null;
						previousValue.IPR.Remove(this);
					}
					this._IPRLibrary.Entity = value;
					if ((value != null))
					{
						value.IPR.Add(this);
						this._IPRLibraryIndex = value.ID;
					}
					else
					{
						this._IPRLibraryIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("IPRLibrary");
				}
			}
		}
		
		[Association(Name="FK_IPR_JSOXLibrary", Storage="_JSOXLibrary", ThisKey="IPR2JSOXIndex", OtherKey="ID", IsForeignKey=true)]
		public JSOXLibrary JSOXLibrary
		{
			get
			{
				return this._JSOXLibrary.Entity;
			}
			set
			{
				JSOXLibrary previousValue = this._JSOXLibrary.Entity;
				if (((previousValue != value) 
							|| (this._JSOXLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JSOXLibrary.Entity = null;
						previousValue.IPR.Remove(this);
					}
					this._JSOXLibrary.Entity = value;
					if ((value != null))
					{
						value.IPR.Add(this);
						this._IPR2JSOXIndex = value.ID;
					}
					else
					{
						this._IPR2JSOXIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("JSOXLibrary");
				}
			}
		}
		
		[Association(Name="FK_IPR_PCNCode", Storage="_PCNCode", ThisKey="IPR2PCNPCN", OtherKey="ID", IsForeignKey=true)]
		public PCNCode PCNCode
		{
			get
			{
				return this._PCNCode.Entity;
			}
			set
			{
				PCNCode previousValue = this._PCNCode.Entity;
				if (((previousValue != value) 
							|| (this._PCNCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PCNCode.Entity = null;
						previousValue.IPR.Remove(this);
					}
					this._PCNCode.Entity = value;
					if ((value != null))
					{
						value.IPR.Add(this);
						this._IPR2PCNPCN = value.ID;
					}
					else
					{
						this._IPR2PCNPCN = default(Nullable<int>);
					}
					this.SendPropertyChanged("PCNCode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BalanceIPR(BalanceIPR entity)
		{
			this.SendPropertyChanging();
			entity.IPR = this;
		}
		
		private void detach_BalanceIPR(BalanceIPR entity)
		{
			this.SendPropertyChanging();
			entity.IPR = null;
		}
		
		private void attach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.IPR = this;
		}
		
		private void detach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.IPR = null;
		}
	}
	
	[Table(Name="dbo.IPRLibrary")]
	public partial class IPRLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _DocumentNo;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _Title;
		
		private EntitySet<IPR> _IPR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDocumentNoChanging(string value);
    partial void OnDocumentNoChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public IPRLibrary()
		{
			this._IPR = new EntitySet<IPR>(new Action<IPR>(this.attach_IPR), new Action<IPR>(this.detach_IPR));
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentNo", DbType="NVarChar(255)")]
		public string DocumentNo
		{
			get
			{
				return this._DocumentNo;
			}
			set
			{
				if ((this._DocumentNo != value))
				{
					this.OnDocumentNoChanging(value);
					this.SendPropertyChanging();
					this._DocumentNo = value;
					this.SendPropertyChanged("DocumentNo");
					this.OnDocumentNoChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_IPR_IPRLibrary", Storage="_IPR", ThisKey="ID", OtherKey="IPRLibraryIndex", DeleteRule="NO ACTION")]
		public EntitySet<IPR> IPR
		{
			get
			{
				return this._IPR;
			}
			set
			{
				this._IPR.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.IPRLibrary = this;
		}
		
		private void detach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.IPRLibrary = null;
		}
	}
	
	[Table(Name="dbo.JSOXCustomsSummary")]
	public partial class JSOXCustomsSummary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CompensationGood;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _CustomsProcedure;
		
		private string _ExportOrFreeCirculationSAD;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _IntroducingSADDate;
		
		private string _IntroducingSADNo;
		
		private string _InvoiceNo;
		
		private System.Nullable<int> _JSOXCustomsSummary2JSOXIndex;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Nullable<double> _RemainingQuantity;
		
		private System.Nullable<System.DateTime> _SADDate;
		
		private string _Title;
		
		private System.Nullable<double> _TotalAmount;
		
		private EntitySet<Disposal> _Disposal;
		
		private EntityRef<JSOXLibrary> _JSOXLibrary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompensationGoodChanging(string value);
    partial void OnCompensationGoodChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCustomsProcedureChanging(string value);
    partial void OnCustomsProcedureChanged();
    partial void OnExportOrFreeCirculationSADChanging(string value);
    partial void OnExportOrFreeCirculationSADChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIntroducingSADDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIntroducingSADDateChanged();
    partial void OnIntroducingSADNoChanging(string value);
    partial void OnIntroducingSADNoChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnJSOXCustomsSummary2JSOXIndexChanging(System.Nullable<int> value);
    partial void OnJSOXCustomsSummary2JSOXIndexChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnRemainingQuantityChanging(System.Nullable<double> value);
    partial void OnRemainingQuantityChanged();
    partial void OnSADDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSADDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTotalAmountChanging(System.Nullable<double> value);
    partial void OnTotalAmountChanged();
    #endregion
		
		public JSOXCustomsSummary()
		{
			this._Disposal = new EntitySet<Disposal>(new Action<Disposal>(this.attach_Disposal), new Action<Disposal>(this.detach_Disposal));
			this._JSOXLibrary = default(EntityRef<JSOXLibrary>);
			OnCreated();
		}
		
		[Column(Storage="_CompensationGood", DbType="NVarChar(255)")]
		public string CompensationGood
		{
			get
			{
				return this._CompensationGood;
			}
			set
			{
				if ((this._CompensationGood != value))
				{
					this.OnCompensationGoodChanging(value);
					this.SendPropertyChanging();
					this._CompensationGood = value;
					this.SendPropertyChanged("CompensationGood");
					this.OnCompensationGoodChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CustomsProcedure", DbType="NVarChar(255)")]
		public string CustomsProcedure
		{
			get
			{
				return this._CustomsProcedure;
			}
			set
			{
				if ((this._CustomsProcedure != value))
				{
					this.OnCustomsProcedureChanging(value);
					this.SendPropertyChanging();
					this._CustomsProcedure = value;
					this.SendPropertyChanged("CustomsProcedure");
					this.OnCustomsProcedureChanged();
				}
			}
		}
		
		[Column(Storage="_ExportOrFreeCirculationSAD", DbType="NVarChar(255)")]
		public string ExportOrFreeCirculationSAD
		{
			get
			{
				return this._ExportOrFreeCirculationSAD;
			}
			set
			{
				if ((this._ExportOrFreeCirculationSAD != value))
				{
					this.OnExportOrFreeCirculationSADChanging(value);
					this.SendPropertyChanging();
					this._ExportOrFreeCirculationSAD = value;
					this.SendPropertyChanged("ExportOrFreeCirculationSAD");
					this.OnExportOrFreeCirculationSADChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IntroducingSADDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IntroducingSADDate
		{
			get
			{
				return this._IntroducingSADDate;
			}
			set
			{
				if ((this._IntroducingSADDate != value))
				{
					this.OnIntroducingSADDateChanging(value);
					this.SendPropertyChanging();
					this._IntroducingSADDate = value;
					this.SendPropertyChanged("IntroducingSADDate");
					this.OnIntroducingSADDateChanged();
				}
			}
		}
		
		[Column(Storage="_IntroducingSADNo", DbType="NVarChar(255)")]
		public string IntroducingSADNo
		{
			get
			{
				return this._IntroducingSADNo;
			}
			set
			{
				if ((this._IntroducingSADNo != value))
				{
					this.OnIntroducingSADNoChanging(value);
					this.SendPropertyChanging();
					this._IntroducingSADNo = value;
					this.SendPropertyChanged("IntroducingSADNo");
					this.OnIntroducingSADNoChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="NVarChar(255)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_JSOXCustomsSummary2JSOXIndex", DbType="Int")]
		public System.Nullable<int> JSOXCustomsSummary2JSOXIndex
		{
			get
			{
				return this._JSOXCustomsSummary2JSOXIndex;
			}
			set
			{
				if ((this._JSOXCustomsSummary2JSOXIndex != value))
				{
					if (this._JSOXLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJSOXCustomsSummary2JSOXIndexChanging(value);
					this.SendPropertyChanging();
					this._JSOXCustomsSummary2JSOXIndex = value;
					this.SendPropertyChanged("JSOXCustomsSummary2JSOXIndex");
					this.OnJSOXCustomsSummary2JSOXIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_RemainingQuantity", DbType="Float")]
		public System.Nullable<double> RemainingQuantity
		{
			get
			{
				return this._RemainingQuantity;
			}
			set
			{
				if ((this._RemainingQuantity != value))
				{
					this.OnRemainingQuantityChanging(value);
					this.SendPropertyChanging();
					this._RemainingQuantity = value;
					this.SendPropertyChanged("RemainingQuantity");
					this.OnRemainingQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_SADDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SADDate
		{
			get
			{
				return this._SADDate;
			}
			set
			{
				if ((this._SADDate != value))
				{
					this.OnSADDateChanging(value);
					this.SendPropertyChanging();
					this._SADDate = value;
					this.SendPropertyChanged("SADDate");
					this.OnSADDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAmount", DbType="Float")]
		public System.Nullable<double> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[Association(Name="FK_Disposal_JSOXCustomsSummary", Storage="_Disposal", ThisKey="ID", OtherKey="JSOXCustomsSummaryIndex", DeleteRule="NO ACTION")]
		public EntitySet<Disposal> Disposal
		{
			get
			{
				return this._Disposal;
			}
			set
			{
				this._Disposal.Assign(value);
			}
		}
		
		[Association(Name="FK_JSOXCustomsSummary_JSOXLibrary", Storage="_JSOXLibrary", ThisKey="JSOXCustomsSummary2JSOXIndex", OtherKey="ID", IsForeignKey=true)]
		public JSOXLibrary JSOXLibrary
		{
			get
			{
				return this._JSOXLibrary.Entity;
			}
			set
			{
				JSOXLibrary previousValue = this._JSOXLibrary.Entity;
				if (((previousValue != value) 
							|| (this._JSOXLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JSOXLibrary.Entity = null;
						previousValue.JSOXCustomsSummary.Remove(this);
					}
					this._JSOXLibrary.Entity = value;
					if ((value != null))
					{
						value.JSOXCustomsSummary.Add(this);
						this._JSOXCustomsSummary2JSOXIndex = value.ID;
					}
					else
					{
						this._JSOXCustomsSummary2JSOXIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("JSOXLibrary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.JSOXCustomsSummary = this;
		}
		
		private void detach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.JSOXCustomsSummary = null;
		}
	}
	
	[Table(Name="dbo.JSOXLibrary")]
	public partial class JSOXLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _BalanceDate;
		
		private double _BalanceQuantity;
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.DateTime _IntroducingDateEnd;
		
		private System.DateTime _IntroducingDateStart;
		
		private double _IntroducingQuantity;
		
		private bool _JSOXLibraryReadOnly;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private System.DateTime _OutboundDateEnd;
		
		private System.DateTime _OutboundDateStart;
		
		private double _OutboundQuantity;
		
		private System.DateTime _PreviousMonthDate;
		
		private double _PreviousMonthQuantity;
		
		private double _ReassumeQuantity;
		
		private System.DateTime _SituationDate;
		
		private double _SituationQuantity;
		
		private string _Title;
		
		private EntitySet<BalanceBatch> _BalanceBatch;
		
		private EntitySet<BalanceIPR> _BalanceIPR;
		
		private EntitySet<IPR> _IPR;
		
		private EntitySet<JSOXCustomsSummary> _JSOXCustomsSummary;
		
		private EntitySet<StockLibrary> _StockLibrary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBalanceDateChanging(System.DateTime value);
    partial void OnBalanceDateChanged();
    partial void OnBalanceQuantityChanging(double value);
    partial void OnBalanceQuantityChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIntroducingDateEndChanging(System.DateTime value);
    partial void OnIntroducingDateEndChanged();
    partial void OnIntroducingDateStartChanging(System.DateTime value);
    partial void OnIntroducingDateStartChanged();
    partial void OnIntroducingQuantityChanging(double value);
    partial void OnIntroducingQuantityChanged();
    partial void OnJSOXLibraryReadOnlyChanging(bool value);
    partial void OnJSOXLibraryReadOnlyChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnOutboundDateEndChanging(System.DateTime value);
    partial void OnOutboundDateEndChanged();
    partial void OnOutboundDateStartChanging(System.DateTime value);
    partial void OnOutboundDateStartChanged();
    partial void OnOutboundQuantityChanging(double value);
    partial void OnOutboundQuantityChanged();
    partial void OnPreviousMonthDateChanging(System.DateTime value);
    partial void OnPreviousMonthDateChanged();
    partial void OnPreviousMonthQuantityChanging(double value);
    partial void OnPreviousMonthQuantityChanged();
    partial void OnReassumeQuantityChanging(double value);
    partial void OnReassumeQuantityChanged();
    partial void OnSituationDateChanging(System.DateTime value);
    partial void OnSituationDateChanged();
    partial void OnSituationQuantityChanging(double value);
    partial void OnSituationQuantityChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public JSOXLibrary()
		{
			this._BalanceBatch = new EntitySet<BalanceBatch>(new Action<BalanceBatch>(this.attach_BalanceBatch), new Action<BalanceBatch>(this.detach_BalanceBatch));
			this._BalanceIPR = new EntitySet<BalanceIPR>(new Action<BalanceIPR>(this.attach_BalanceIPR), new Action<BalanceIPR>(this.detach_BalanceIPR));
			this._IPR = new EntitySet<IPR>(new Action<IPR>(this.attach_IPR), new Action<IPR>(this.detach_IPR));
			this._JSOXCustomsSummary = new EntitySet<JSOXCustomsSummary>(new Action<JSOXCustomsSummary>(this.attach_JSOXCustomsSummary), new Action<JSOXCustomsSummary>(this.detach_JSOXCustomsSummary));
			this._StockLibrary = new EntitySet<StockLibrary>(new Action<StockLibrary>(this.attach_StockLibrary), new Action<StockLibrary>(this.detach_StockLibrary));
			OnCreated();
		}
		
		[Column(Storage="_BalanceDate", DbType="DateTime NOT NULL")]
		public System.DateTime BalanceDate
		{
			get
			{
				return this._BalanceDate;
			}
			set
			{
				if ((this._BalanceDate != value))
				{
					this.OnBalanceDateChanging(value);
					this.SendPropertyChanging();
					this._BalanceDate = value;
					this.SendPropertyChanged("BalanceDate");
					this.OnBalanceDateChanged();
				}
			}
		}
		
		[Column(Storage="_BalanceQuantity", DbType="Float NOT NULL")]
		public double BalanceQuantity
		{
			get
			{
				return this._BalanceQuantity;
			}
			set
			{
				if ((this._BalanceQuantity != value))
				{
					this.OnBalanceQuantityChanging(value);
					this.SendPropertyChanging();
					this._BalanceQuantity = value;
					this.SendPropertyChanged("BalanceQuantity");
					this.OnBalanceQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IntroducingDateEnd", DbType="DateTime NOT NULL")]
		public System.DateTime IntroducingDateEnd
		{
			get
			{
				return this._IntroducingDateEnd;
			}
			set
			{
				if ((this._IntroducingDateEnd != value))
				{
					this.OnIntroducingDateEndChanging(value);
					this.SendPropertyChanging();
					this._IntroducingDateEnd = value;
					this.SendPropertyChanged("IntroducingDateEnd");
					this.OnIntroducingDateEndChanged();
				}
			}
		}
		
		[Column(Storage="_IntroducingDateStart", DbType="DateTime NOT NULL")]
		public System.DateTime IntroducingDateStart
		{
			get
			{
				return this._IntroducingDateStart;
			}
			set
			{
				if ((this._IntroducingDateStart != value))
				{
					this.OnIntroducingDateStartChanging(value);
					this.SendPropertyChanging();
					this._IntroducingDateStart = value;
					this.SendPropertyChanged("IntroducingDateStart");
					this.OnIntroducingDateStartChanged();
				}
			}
		}
		
		[Column(Storage="_IntroducingQuantity", DbType="Float NOT NULL")]
		public double IntroducingQuantity
		{
			get
			{
				return this._IntroducingQuantity;
			}
			set
			{
				if ((this._IntroducingQuantity != value))
				{
					this.OnIntroducingQuantityChanging(value);
					this.SendPropertyChanging();
					this._IntroducingQuantity = value;
					this.SendPropertyChanged("IntroducingQuantity");
					this.OnIntroducingQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_JSOXLibraryReadOnly", DbType="Bit NOT NULL")]
		public bool JSOXLibraryReadOnly
		{
			get
			{
				return this._JSOXLibraryReadOnly;
			}
			set
			{
				if ((this._JSOXLibraryReadOnly != value))
				{
					this.OnJSOXLibraryReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._JSOXLibraryReadOnly = value;
					this.SendPropertyChanged("JSOXLibraryReadOnly");
					this.OnJSOXLibraryReadOnlyChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_OutboundDateEnd", DbType="DateTime NOT NULL")]
		public System.DateTime OutboundDateEnd
		{
			get
			{
				return this._OutboundDateEnd;
			}
			set
			{
				if ((this._OutboundDateEnd != value))
				{
					this.OnOutboundDateEndChanging(value);
					this.SendPropertyChanging();
					this._OutboundDateEnd = value;
					this.SendPropertyChanged("OutboundDateEnd");
					this.OnOutboundDateEndChanged();
				}
			}
		}
		
		[Column(Storage="_OutboundDateStart", DbType="DateTime NOT NULL")]
		public System.DateTime OutboundDateStart
		{
			get
			{
				return this._OutboundDateStart;
			}
			set
			{
				if ((this._OutboundDateStart != value))
				{
					this.OnOutboundDateStartChanging(value);
					this.SendPropertyChanging();
					this._OutboundDateStart = value;
					this.SendPropertyChanged("OutboundDateStart");
					this.OnOutboundDateStartChanged();
				}
			}
		}
		
		[Column(Storage="_OutboundQuantity", DbType="Float NOT NULL")]
		public double OutboundQuantity
		{
			get
			{
				return this._OutboundQuantity;
			}
			set
			{
				if ((this._OutboundQuantity != value))
				{
					this.OnOutboundQuantityChanging(value);
					this.SendPropertyChanging();
					this._OutboundQuantity = value;
					this.SendPropertyChanged("OutboundQuantity");
					this.OnOutboundQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_PreviousMonthDate", DbType="DateTime NOT NULL")]
		public System.DateTime PreviousMonthDate
		{
			get
			{
				return this._PreviousMonthDate;
			}
			set
			{
				if ((this._PreviousMonthDate != value))
				{
					this.OnPreviousMonthDateChanging(value);
					this.SendPropertyChanging();
					this._PreviousMonthDate = value;
					this.SendPropertyChanged("PreviousMonthDate");
					this.OnPreviousMonthDateChanged();
				}
			}
		}
		
		[Column(Storage="_PreviousMonthQuantity", DbType="Float NOT NULL")]
		public double PreviousMonthQuantity
		{
			get
			{
				return this._PreviousMonthQuantity;
			}
			set
			{
				if ((this._PreviousMonthQuantity != value))
				{
					this.OnPreviousMonthQuantityChanging(value);
					this.SendPropertyChanging();
					this._PreviousMonthQuantity = value;
					this.SendPropertyChanged("PreviousMonthQuantity");
					this.OnPreviousMonthQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ReassumeQuantity", DbType="Float NOT NULL")]
		public double ReassumeQuantity
		{
			get
			{
				return this._ReassumeQuantity;
			}
			set
			{
				if ((this._ReassumeQuantity != value))
				{
					this.OnReassumeQuantityChanging(value);
					this.SendPropertyChanging();
					this._ReassumeQuantity = value;
					this.SendPropertyChanged("ReassumeQuantity");
					this.OnReassumeQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_SituationDate", DbType="DateTime NOT NULL")]
		public System.DateTime SituationDate
		{
			get
			{
				return this._SituationDate;
			}
			set
			{
				if ((this._SituationDate != value))
				{
					this.OnSituationDateChanging(value);
					this.SendPropertyChanging();
					this._SituationDate = value;
					this.SendPropertyChanged("SituationDate");
					this.OnSituationDateChanged();
				}
			}
		}
		
		[Column(Storage="_SituationQuantity", DbType="Float NOT NULL")]
		public double SituationQuantity
		{
			get
			{
				return this._SituationQuantity;
			}
			set
			{
				if ((this._SituationQuantity != value))
				{
					this.OnSituationQuantityChanging(value);
					this.SendPropertyChanging();
					this._SituationQuantity = value;
					this.SendPropertyChanged("SituationQuantity");
					this.OnSituationQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_BalanceBatch_JSOXLibrary", Storage="_BalanceBatch", ThisKey="ID", OtherKey="Balance2JSOXLibraryIndex", DeleteRule="NO ACTION")]
		public EntitySet<BalanceBatch> BalanceBatch
		{
			get
			{
				return this._BalanceBatch;
			}
			set
			{
				this._BalanceBatch.Assign(value);
			}
		}
		
		[Association(Name="FK_BalanceIPR_JSOXLibrary", Storage="_BalanceIPR", ThisKey="ID", OtherKey="BalanceIPR2JSOXIndex", DeleteRule="NO ACTION")]
		public EntitySet<BalanceIPR> BalanceIPR
		{
			get
			{
				return this._BalanceIPR;
			}
			set
			{
				this._BalanceIPR.Assign(value);
			}
		}
		
		[Association(Name="FK_IPR_JSOXLibrary", Storage="_IPR", ThisKey="ID", OtherKey="IPR2JSOXIndex", DeleteRule="NO ACTION")]
		public EntitySet<IPR> IPR
		{
			get
			{
				return this._IPR;
			}
			set
			{
				this._IPR.Assign(value);
			}
		}
		
		[Association(Name="FK_JSOXCustomsSummary_JSOXLibrary", Storage="_JSOXCustomsSummary", ThisKey="ID", OtherKey="JSOXCustomsSummary2JSOXIndex", DeleteRule="NO ACTION")]
		public EntitySet<JSOXCustomsSummary> JSOXCustomsSummary
		{
			get
			{
				return this._JSOXCustomsSummary;
			}
			set
			{
				this._JSOXCustomsSummary.Assign(value);
			}
		}
		
		[Association(Name="FK_StockLibrary_JSOXLibrary", Storage="_StockLibrary", ThisKey="ID", OtherKey="Stock2JSOXLibraryIndex", DeleteRule="NO ACTION")]
		public EntitySet<StockLibrary> StockLibrary
		{
			get
			{
				return this._StockLibrary;
			}
			set
			{
				this._StockLibrary.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BalanceBatch(BalanceBatch entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = this;
		}
		
		private void detach_BalanceBatch(BalanceBatch entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = null;
		}
		
		private void attach_BalanceIPR(BalanceIPR entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = this;
		}
		
		private void detach_BalanceIPR(BalanceIPR entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = null;
		}
		
		private void attach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = this;
		}
		
		private void detach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = null;
		}
		
		private void attach_JSOXCustomsSummary(JSOXCustomsSummary entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = this;
		}
		
		private void detach_JSOXCustomsSummary(JSOXCustomsSummary entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = null;
		}
		
		private void attach_StockLibrary(StockLibrary entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = this;
		}
		
		private void detach_StockLibrary(StockLibrary entity)
		{
			this.SendPropertyChanging();
			entity.JSOXLibrary = null;
		}
	}
	
	[Table(Name="dbo.Material")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Archival;
		
		private string _Batch;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private System.Nullable<double> _Dust;
		
		private System.Nullable<double> _FGQuantity;
		
		private int _ID;
		
		private System.Nullable<int> _Material2BatchIndex;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Nullable<double> _Overuse;
		
		private string _ProductID;
		
		private string _ProductType;
		
		private System.Nullable<double> _SHMenthol;
		
		private string _SKU;
		
		private string _SKUDescription;
		
		private string _StorLoc;
		
		private string _Title;
		
		private System.Nullable<double> _Tobacco;
		
		private System.Nullable<double> _TobaccoQuantity;
		
		private string _Units;
		
		private System.Nullable<double> _Waste;
		
		private EntitySet<Disposal> _Disposal;
		
		private EntityRef<Batch> _Material2BatchIndexBatch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnBatchChanging(string value);
    partial void OnBatchChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDustChanging(System.Nullable<double> value);
    partial void OnDustChanged();
    partial void OnFGQuantityChanging(System.Nullable<double> value);
    partial void OnFGQuantityChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMaterial2BatchIndexChanging(System.Nullable<int> value);
    partial void OnMaterial2BatchIndexChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnOveruseChanging(System.Nullable<double> value);
    partial void OnOveruseChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    partial void OnSHMentholChanging(System.Nullable<double> value);
    partial void OnSHMentholChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnSKUDescriptionChanging(string value);
    partial void OnSKUDescriptionChanged();
    partial void OnStorLocChanging(string value);
    partial void OnStorLocChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTobaccoChanging(System.Nullable<double> value);
    partial void OnTobaccoChanged();
    partial void OnTobaccoQuantityChanging(System.Nullable<double> value);
    partial void OnTobaccoQuantityChanged();
    partial void OnUnitsChanging(string value);
    partial void OnUnitsChanged();
    partial void OnWasteChanging(System.Nullable<double> value);
    partial void OnWasteChanged();
    #endregion
		
		public Material()
		{
			this._Disposal = new EntitySet<Disposal>(new Action<Disposal>(this.attach_Disposal), new Action<Disposal>(this.detach_Disposal));
			this._Material2BatchIndexBatch = default(EntityRef<Batch>);
			OnCreated();
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Storage="_Batch", DbType="NVarChar(255)")]
		public string Batch
		{
			get
			{
				return this._Batch;
			}
			set
			{
				if ((this._Batch != value))
				{
					this.OnBatchChanging(value);
					this.SendPropertyChanging();
					this._Batch = value;
					this.SendPropertyChanged("Batch");
					this.OnBatchChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Dust", DbType="Float")]
		public System.Nullable<double> Dust
		{
			get
			{
				return this._Dust;
			}
			set
			{
				if ((this._Dust != value))
				{
					this.OnDustChanging(value);
					this.SendPropertyChanging();
					this._Dust = value;
					this.SendPropertyChanged("Dust");
					this.OnDustChanged();
				}
			}
		}
		
		[Column(Storage="_FGQuantity", DbType="Float")]
		public System.Nullable<double> FGQuantity
		{
			get
			{
				return this._FGQuantity;
			}
			set
			{
				if ((this._FGQuantity != value))
				{
					this.OnFGQuantityChanging(value);
					this.SendPropertyChanging();
					this._FGQuantity = value;
					this.SendPropertyChanged("FGQuantity");
					this.OnFGQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Material2BatchIndex", DbType="Int")]
		public System.Nullable<int> Material2BatchIndex
		{
			get
			{
				return this._Material2BatchIndex;
			}
			set
			{
				if ((this._Material2BatchIndex != value))
				{
					if (this._Material2BatchIndexBatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterial2BatchIndexChanging(value);
					this.SendPropertyChanging();
					this._Material2BatchIndex = value;
					this.SendPropertyChanged("Material2BatchIndex");
					this.OnMaterial2BatchIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Overuse", DbType="Float")]
		public System.Nullable<double> Overuse
		{
			get
			{
				return this._Overuse;
			}
			set
			{
				if ((this._Overuse != value))
				{
					this.OnOveruseChanging(value);
					this.SendPropertyChanging();
					this._Overuse = value;
					this.SendPropertyChanged("Overuse");
					this.OnOveruseChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="NVarChar(255)")]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(255)")]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SHMenthol", DbType="Float")]
		public System.Nullable<double> SHMenthol
		{
			get
			{
				return this._SHMenthol;
			}
			set
			{
				if ((this._SHMenthol != value))
				{
					this.OnSHMentholChanging(value);
					this.SendPropertyChanging();
					this._SHMenthol = value;
					this.SendPropertyChanged("SHMenthol");
					this.OnSHMentholChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(255)")]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_SKUDescription", DbType="NVarChar(255)")]
		public string SKUDescription
		{
			get
			{
				return this._SKUDescription;
			}
			set
			{
				if ((this._SKUDescription != value))
				{
					this.OnSKUDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SKUDescription = value;
					this.SendPropertyChanged("SKUDescription");
					this.OnSKUDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_StorLoc", DbType="NVarChar(255)")]
		public string StorLoc
		{
			get
			{
				return this._StorLoc;
			}
			set
			{
				if ((this._StorLoc != value))
				{
					this.OnStorLocChanging(value);
					this.SendPropertyChanging();
					this._StorLoc = value;
					this.SendPropertyChanged("StorLoc");
					this.OnStorLocChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Tobacco", DbType="Float")]
		public System.Nullable<double> Tobacco
		{
			get
			{
				return this._Tobacco;
			}
			set
			{
				if ((this._Tobacco != value))
				{
					this.OnTobaccoChanging(value);
					this.SendPropertyChanging();
					this._Tobacco = value;
					this.SendPropertyChanged("Tobacco");
					this.OnTobaccoChanged();
				}
			}
		}
		
		[Column(Storage="_TobaccoQuantity", DbType="Float")]
		public System.Nullable<double> TobaccoQuantity
		{
			get
			{
				return this._TobaccoQuantity;
			}
			set
			{
				if ((this._TobaccoQuantity != value))
				{
					this.OnTobaccoQuantityChanging(value);
					this.SendPropertyChanging();
					this._TobaccoQuantity = value;
					this.SendPropertyChanged("TobaccoQuantity");
					this.OnTobaccoQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_Units", DbType="NVarChar(255)")]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[Column(Storage="_Waste", DbType="Float")]
		public System.Nullable<double> Waste
		{
			get
			{
				return this._Waste;
			}
			set
			{
				if ((this._Waste != value))
				{
					this.OnWasteChanging(value);
					this.SendPropertyChanging();
					this._Waste = value;
					this.SendPropertyChanged("Waste");
					this.OnWasteChanged();
				}
			}
		}
		
		[Association(Name="FK_Disposal_Material", Storage="_Disposal", ThisKey="ID", OtherKey="Disposal2MaterialIndex", DeleteRule="NO ACTION")]
		public EntitySet<Disposal> Disposal
		{
			get
			{
				return this._Disposal;
			}
			set
			{
				this._Disposal.Assign(value);
			}
		}
		
		[Association(Name="FK_Material_Batch", Storage="_Material2BatchIndexBatch", ThisKey="Material2BatchIndex", OtherKey="ID", IsForeignKey=true)]
		public Batch Material2BatchIndexBatch
		{
			get
			{
				return this._Material2BatchIndexBatch.Entity;
			}
			set
			{
				Batch previousValue = this._Material2BatchIndexBatch.Entity;
				if (((previousValue != value) 
							|| (this._Material2BatchIndexBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material2BatchIndexBatch.Entity = null;
						previousValue.Material.Remove(this);
					}
					this._Material2BatchIndexBatch.Entity = value;
					if ((value != null))
					{
						value.Material.Add(this);
						this._Material2BatchIndex = value.ID;
					}
					else
					{
						this._Material2BatchIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("Material2BatchIndexBatch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Disposal(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
	}
	
	[Table(Name="dbo.PCNCode")]
	public partial class PCNCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CompensationGood;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private System.Nullable<bool> _Disposal;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _ProductCodeNumber;
		
		private string _Title;
		
		private EntitySet<Disposal> _Disposal_PCNCode;
		
		private EntitySet<IPR> _IPR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompensationGoodChanging(string value);
    partial void OnCompensationGoodChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDisposalChanging(System.Nullable<bool> value);
    partial void OnDisposalChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnProductCodeNumberChanging(string value);
    partial void OnProductCodeNumberChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public PCNCode()
		{
			this._Disposal_PCNCode = new EntitySet<Disposal>(new Action<Disposal>(this.attach_Disposal_PCNCode), new Action<Disposal>(this.detach_Disposal_PCNCode));
			this._IPR = new EntitySet<IPR>(new Action<IPR>(this.attach_IPR), new Action<IPR>(this.detach_IPR));
			OnCreated();
		}
		
		[Column(Storage="_CompensationGood", DbType="NVarChar(255)")]
		public string CompensationGood
		{
			get
			{
				return this._CompensationGood;
			}
			set
			{
				if ((this._CompensationGood != value))
				{
					this.OnCompensationGoodChanging(value);
					this.SendPropertyChanging();
					this._CompensationGood = value;
					this.SendPropertyChanged("CompensationGood");
					this.OnCompensationGoodChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Disposal", DbType="Bit")]
		public System.Nullable<bool> Disposal
		{
			get
			{
				return this._Disposal;
			}
			set
			{
				if ((this._Disposal != value))
				{
					this.OnDisposalChanging(value);
					this.SendPropertyChanging();
					this._Disposal = value;
					this.SendPropertyChanged("Disposal");
					this.OnDisposalChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCodeNumber", DbType="NVarChar(255)")]
		public string ProductCodeNumber
		{
			get
			{
				return this._ProductCodeNumber;
			}
			set
			{
				if ((this._ProductCodeNumber != value))
				{
					this.OnProductCodeNumberChanging(value);
					this.SendPropertyChanging();
					this._ProductCodeNumber = value;
					this.SendPropertyChanged("ProductCodeNumber");
					this.OnProductCodeNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_Disposal_PCNCode", Storage="_Disposal_PCNCode", ThisKey="ID", OtherKey="Disposal2PCNID", DeleteRule="NO ACTION")]
		public EntitySet<Disposal> Disposal_PCNCode
		{
			get
			{
				return this._Disposal_PCNCode;
			}
			set
			{
				this._Disposal_PCNCode.Assign(value);
			}
		}
		
		[Association(Name="FK_IPR_PCNCode", Storage="_IPR", ThisKey="ID", OtherKey="IPR2PCNPCN", DeleteRule="NO ACTION")]
		public EntitySet<IPR> IPR
		{
			get
			{
				return this._IPR;
			}
			set
			{
				this._IPR.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Disposal_PCNCode(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.PCNCode = this;
		}
		
		private void detach_Disposal_PCNCode(Disposal entity)
		{
			this.SendPropertyChanging();
			entity.PCNCode = null;
		}
		
		private void attach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.PCNCode = this;
		}
		
		private void detach_IPR(IPR entity)
		{
			this.SendPropertyChanging();
			entity.PCNCode = null;
		}
	}
	
	[Table(Name="dbo.SADConsignment")]
	public partial class SADConsignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _Title;
		
		private EntitySet<Clearence> _Clearence;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SADConsignment()
		{
			this._Clearence = new EntitySet<Clearence>(new Action<Clearence>(this.attach_Clearence), new Action<Clearence>(this.detach_Clearence));
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_Clearence_SADConsignment", Storage="_Clearence", ThisKey="ID", OtherKey="SADConsignmentLibraryIndex", DeleteRule="NO ACTION")]
		public EntitySet<Clearence> Clearence
		{
			get
			{
				return this._Clearence;
			}
			set
			{
				this._Clearence.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clearence(Clearence entity)
		{
			this.SendPropertyChanging();
			entity.SADConsignment = this;
		}
		
		private void detach_Clearence(Clearence entity)
		{
			this.SendPropertyChanging();
			entity.SADConsignment = null;
		}
	}
	
	[Table(Name="dbo.SADDocument")]
	public partial class SADDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Archival;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _Currency;
		
		private System.Nullable<System.DateTime> _CustomsDebtDate;
		
		private string _DocumentNumber;
		
		private System.Nullable<double> _ExchangeRate;
		
		private System.Nullable<double> _GrossMass;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Nullable<double> _NetMass;
		
		private string _ReferenceNumber;
		
		private System.Nullable<int> _SADDocumenLibrarytIndex;
		
		private string _SystemID;
		
		private string _Title;
		
		private EntityRef<SADDocumentLibrary> _SADDocumentLibrary;
		
		private EntitySet<SADGood> _SADGood;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnCustomsDebtDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCustomsDebtDateChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnExchangeRateChanging(System.Nullable<double> value);
    partial void OnExchangeRateChanged();
    partial void OnGrossMassChanging(System.Nullable<double> value);
    partial void OnGrossMassChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnNetMassChanging(System.Nullable<double> value);
    partial void OnNetMassChanged();
    partial void OnReferenceNumberChanging(string value);
    partial void OnReferenceNumberChanged();
    partial void OnSADDocumenLibrarytIndexChanging(System.Nullable<int> value);
    partial void OnSADDocumenLibrarytIndexChanged();
    partial void OnSystemIDChanging(string value);
    partial void OnSystemIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SADDocument()
		{
			this._SADDocumentLibrary = default(EntityRef<SADDocumentLibrary>);
			this._SADGood = new EntitySet<SADGood>(new Action<SADGood>(this.attach_SADGood), new Action<SADGood>(this.detach_SADGood));
			OnCreated();
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="NVarChar(255)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_CustomsDebtDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CustomsDebtDate
		{
			get
			{
				return this._CustomsDebtDate;
			}
			set
			{
				if ((this._CustomsDebtDate != value))
				{
					this.OnCustomsDebtDateChanging(value);
					this.SendPropertyChanging();
					this._CustomsDebtDate = value;
					this.SendPropertyChanged("CustomsDebtDate");
					this.OnCustomsDebtDateChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentNumber", DbType="NVarChar(255)")]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ExchangeRate", DbType="Float")]
		public System.Nullable<double> ExchangeRate
		{
			get
			{
				return this._ExchangeRate;
			}
			set
			{
				if ((this._ExchangeRate != value))
				{
					this.OnExchangeRateChanging(value);
					this.SendPropertyChanging();
					this._ExchangeRate = value;
					this.SendPropertyChanged("ExchangeRate");
					this.OnExchangeRateChanged();
				}
			}
		}
		
		[Column(Storage="_GrossMass", DbType="Float")]
		public System.Nullable<double> GrossMass
		{
			get
			{
				return this._GrossMass;
			}
			set
			{
				if ((this._GrossMass != value))
				{
					this.OnGrossMassChanging(value);
					this.SendPropertyChanging();
					this._GrossMass = value;
					this.SendPropertyChanged("GrossMass");
					this.OnGrossMassChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_NetMass", DbType="Float")]
		public System.Nullable<double> NetMass
		{
			get
			{
				return this._NetMass;
			}
			set
			{
				if ((this._NetMass != value))
				{
					this.OnNetMassChanging(value);
					this.SendPropertyChanging();
					this._NetMass = value;
					this.SendPropertyChanged("NetMass");
					this.OnNetMassChanged();
				}
			}
		}
		
		[Column(Storage="_ReferenceNumber", DbType="NVarChar(255)")]
		public string ReferenceNumber
		{
			get
			{
				return this._ReferenceNumber;
			}
			set
			{
				if ((this._ReferenceNumber != value))
				{
					this.OnReferenceNumberChanging(value);
					this.SendPropertyChanging();
					this._ReferenceNumber = value;
					this.SendPropertyChanged("ReferenceNumber");
					this.OnReferenceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_SADDocumenLibrarytIndex", DbType="Int")]
		public System.Nullable<int> SADDocumenLibrarytIndex
		{
			get
			{
				return this._SADDocumenLibrarytIndex;
			}
			set
			{
				if ((this._SADDocumenLibrarytIndex != value))
				{
					if (this._SADDocumentLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSADDocumenLibrarytIndexChanging(value);
					this.SendPropertyChanging();
					this._SADDocumenLibrarytIndex = value;
					this.SendPropertyChanged("SADDocumenLibrarytIndex");
					this.OnSADDocumenLibrarytIndexChanged();
				}
			}
		}
		
		[Column(Storage="_SystemID", DbType="NVarChar(255)")]
		public string SystemID
		{
			get
			{
				return this._SystemID;
			}
			set
			{
				if ((this._SystemID != value))
				{
					this.OnSystemIDChanging(value);
					this.SendPropertyChanging();
					this._SystemID = value;
					this.SendPropertyChanged("SystemID");
					this.OnSystemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_SADDocument_SADDocumentLibrary", Storage="_SADDocumentLibrary", ThisKey="SADDocumenLibrarytIndex", OtherKey="ID", IsForeignKey=true)]
		public SADDocumentLibrary SADDocumentLibrary
		{
			get
			{
				return this._SADDocumentLibrary.Entity;
			}
			set
			{
				SADDocumentLibrary previousValue = this._SADDocumentLibrary.Entity;
				if (((previousValue != value) 
							|| (this._SADDocumentLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SADDocumentLibrary.Entity = null;
						previousValue.SADDocument.Remove(this);
					}
					this._SADDocumentLibrary.Entity = value;
					if ((value != null))
					{
						value.SADDocument.Add(this);
						this._SADDocumenLibrarytIndex = value.ID;
					}
					else
					{
						this._SADDocumenLibrarytIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("SADDocumentLibrary");
				}
			}
		}
		
		[Association(Name="FK_SADGood_SADDocument", Storage="_SADGood", ThisKey="ID", OtherKey="SADDocumentIndex", DeleteRule="NO ACTION")]
		public EntitySet<SADGood> SADGood
		{
			get
			{
				return this._SADGood;
			}
			set
			{
				this._SADGood.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SADGood(SADGood entity)
		{
			this.SendPropertyChanging();
			entity.SADDocument = this;
		}
		
		private void detach_SADGood(SADGood entity)
		{
			this.SendPropertyChanging();
			entity.SADDocument = null;
		}
	}
	
	[Table(Name="dbo.SADDocumentLibrary")]
	public partial class SADDocumentLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _SADDocumentLibraryComments;
		
		private System.Nullable<bool> _SADDocumentLibraryOK;
		
		private string _Title;
		
		private EntitySet<SADDocument> _SADDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnSADDocumentLibraryCommentsChanging(string value);
    partial void OnSADDocumentLibraryCommentsChanged();
    partial void OnSADDocumentLibraryOKChanging(System.Nullable<bool> value);
    partial void OnSADDocumentLibraryOKChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SADDocumentLibrary()
		{
			this._SADDocument = new EntitySet<SADDocument>(new Action<SADDocument>(this.attach_SADDocument), new Action<SADDocument>(this.detach_SADDocument));
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_SADDocumentLibraryComments", DbType="NVarChar(255)")]
		public string SADDocumentLibraryComments
		{
			get
			{
				return this._SADDocumentLibraryComments;
			}
			set
			{
				if ((this._SADDocumentLibraryComments != value))
				{
					this.OnSADDocumentLibraryCommentsChanging(value);
					this.SendPropertyChanging();
					this._SADDocumentLibraryComments = value;
					this.SendPropertyChanged("SADDocumentLibraryComments");
					this.OnSADDocumentLibraryCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_SADDocumentLibraryOK", DbType="Bit")]
		public System.Nullable<bool> SADDocumentLibraryOK
		{
			get
			{
				return this._SADDocumentLibraryOK;
			}
			set
			{
				if ((this._SADDocumentLibraryOK != value))
				{
					this.OnSADDocumentLibraryOKChanging(value);
					this.SendPropertyChanging();
					this._SADDocumentLibraryOK = value;
					this.SendPropertyChanged("SADDocumentLibraryOK");
					this.OnSADDocumentLibraryOKChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_SADDocument_SADDocumentLibrary", Storage="_SADDocument", ThisKey="ID", OtherKey="SADDocumenLibrarytIndex", DeleteRule="NO ACTION")]
		public EntitySet<SADDocument> SADDocument
		{
			get
			{
				return this._SADDocument;
			}
			set
			{
				this._SADDocument.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SADDocument(SADDocument entity)
		{
			this.SendPropertyChanging();
			entity.SADDocumentLibrary = this;
		}
		
		private void detach_SADDocument(SADDocument entity)
		{
			this.SendPropertyChanging();
			entity.SADDocumentLibrary = null;
		}
	}
	
	[Table(Name="dbo.SADDuties")]
	public partial class SADDuties : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private double _Amount;
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private string _DutyType;
		
		private int _ID;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private int _SADDuties2SADGoodID;
		
		private string _Title;
		
		private EntityRef<SADGood> _SADGood;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnDutyTypeChanging(string value);
    partial void OnDutyTypeChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnSADDuties2SADGoodIDChanging(int value);
    partial void OnSADDuties2SADGoodIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SADDuties()
		{
			this._SADGood = default(EntityRef<SADGood>);
			OnCreated();
		}
		
		[Column(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_DutyType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DutyType
		{
			get
			{
				return this._DutyType;
			}
			set
			{
				if ((this._DutyType != value))
				{
					this.OnDutyTypeChanging(value);
					this.SendPropertyChanging();
					this._DutyType = value;
					this.SendPropertyChanged("DutyType");
					this.OnDutyTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_SADDuties2SADGoodID", DbType="Int NOT NULL")]
		public int SADDuties2SADGoodID
		{
			get
			{
				return this._SADDuties2SADGoodID;
			}
			set
			{
				if ((this._SADDuties2SADGoodID != value))
				{
					if (this._SADGood.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSADDuties2SADGoodIDChanging(value);
					this.SendPropertyChanging();
					this._SADDuties2SADGoodID = value;
					this.SendPropertyChanged("SADDuties2SADGoodID");
					this.OnSADDuties2SADGoodIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_SADDuties_SADGood", Storage="_SADGood", ThisKey="SADDuties2SADGoodID", OtherKey="ID", IsForeignKey=true)]
		public SADGood SADGood
		{
			get
			{
				return this._SADGood.Entity;
			}
			set
			{
				SADGood previousValue = this._SADGood.Entity;
				if (((previousValue != value) 
							|| (this._SADGood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SADGood.Entity = null;
						previousValue.SADDuties.Remove(this);
					}
					this._SADGood.Entity = value;
					if ((value != null))
					{
						value.SADDuties.Add(this);
						this._SADDuties2SADGoodID = value.ID;
					}
					else
					{
						this._SADDuties2SADGoodID = default(int);
					}
					this.SendPropertyChanged("SADGood");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SADGood")]
	public partial class SADGood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Archival;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _GoodsDescription;
		
		private System.Nullable<double> _GrossMass;
		
		private int _ID;
		
		private System.Nullable<double> _ItemNo;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private System.Nullable<double> _NetMass;
		
		private string _PCNTariffCode;
		
		private System.Nullable<int> _SADDocumentIndex;
		
		private string _SPProcedure;
		
		private string _Title;
		
		private System.Nullable<double> _TotalAmountInvoiced;
		
		private EntitySet<Clearence> _Clearence;
		
		private EntitySet<SADDuties> _SADDuties;
		
		private EntityRef<SADDocument> _SADDocument;
		
		private EntitySet<SADPackage> _SADPackage;
		
		private EntitySet<SADQuantity> _SADQuantity;
		
		private EntitySet<SADRequiredDocuments> _SADRequiredDocuments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnGoodsDescriptionChanging(string value);
    partial void OnGoodsDescriptionChanged();
    partial void OnGrossMassChanging(System.Nullable<double> value);
    partial void OnGrossMassChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemNoChanging(System.Nullable<double> value);
    partial void OnItemNoChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnNetMassChanging(System.Nullable<double> value);
    partial void OnNetMassChanged();
    partial void OnPCNTariffCodeChanging(string value);
    partial void OnPCNTariffCodeChanged();
    partial void OnSADDocumentIndexChanging(System.Nullable<int> value);
    partial void OnSADDocumentIndexChanged();
    partial void OnSPProcedureChanging(string value);
    partial void OnSPProcedureChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTotalAmountInvoicedChanging(System.Nullable<double> value);
    partial void OnTotalAmountInvoicedChanged();
    #endregion
		
		public SADGood()
		{
			this._Clearence = new EntitySet<Clearence>(new Action<Clearence>(this.attach_Clearence), new Action<Clearence>(this.detach_Clearence));
			this._SADDuties = new EntitySet<SADDuties>(new Action<SADDuties>(this.attach_SADDuties), new Action<SADDuties>(this.detach_SADDuties));
			this._SADDocument = default(EntityRef<SADDocument>);
			this._SADPackage = new EntitySet<SADPackage>(new Action<SADPackage>(this.attach_SADPackage), new Action<SADPackage>(this.detach_SADPackage));
			this._SADQuantity = new EntitySet<SADQuantity>(new Action<SADQuantity>(this.attach_SADQuantity), new Action<SADQuantity>(this.detach_SADQuantity));
			this._SADRequiredDocuments = new EntitySet<SADRequiredDocuments>(new Action<SADRequiredDocuments>(this.attach_SADRequiredDocuments), new Action<SADRequiredDocuments>(this.detach_SADRequiredDocuments));
			OnCreated();
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsDescription", DbType="NVarChar(255)")]
		public string GoodsDescription
		{
			get
			{
				return this._GoodsDescription;
			}
			set
			{
				if ((this._GoodsDescription != value))
				{
					this.OnGoodsDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GoodsDescription = value;
					this.SendPropertyChanged("GoodsDescription");
					this.OnGoodsDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_GrossMass", DbType="Float")]
		public System.Nullable<double> GrossMass
		{
			get
			{
				return this._GrossMass;
			}
			set
			{
				if ((this._GrossMass != value))
				{
					this.OnGrossMassChanging(value);
					this.SendPropertyChanging();
					this._GrossMass = value;
					this.SendPropertyChanged("GrossMass");
					this.OnGrossMassChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="Float")]
		public System.Nullable<double> ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_NetMass", DbType="Float")]
		public System.Nullable<double> NetMass
		{
			get
			{
				return this._NetMass;
			}
			set
			{
				if ((this._NetMass != value))
				{
					this.OnNetMassChanging(value);
					this.SendPropertyChanging();
					this._NetMass = value;
					this.SendPropertyChanged("NetMass");
					this.OnNetMassChanged();
				}
			}
		}
		
		[Column(Storage="_PCNTariffCode", DbType="NVarChar(255)")]
		public string PCNTariffCode
		{
			get
			{
				return this._PCNTariffCode;
			}
			set
			{
				if ((this._PCNTariffCode != value))
				{
					this.OnPCNTariffCodeChanging(value);
					this.SendPropertyChanging();
					this._PCNTariffCode = value;
					this.SendPropertyChanged("PCNTariffCode");
					this.OnPCNTariffCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SADDocumentIndex", DbType="Int")]
		public System.Nullable<int> SADDocumentIndex
		{
			get
			{
				return this._SADDocumentIndex;
			}
			set
			{
				if ((this._SADDocumentIndex != value))
				{
					if (this._SADDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSADDocumentIndexChanging(value);
					this.SendPropertyChanging();
					this._SADDocumentIndex = value;
					this.SendPropertyChanged("SADDocumentIndex");
					this.OnSADDocumentIndexChanged();
				}
			}
		}
		
		[Column(Storage="_SPProcedure", DbType="NVarChar(255)")]
		public string SPProcedure
		{
			get
			{
				return this._SPProcedure;
			}
			set
			{
				if ((this._SPProcedure != value))
				{
					this.OnSPProcedureChanging(value);
					this.SendPropertyChanging();
					this._SPProcedure = value;
					this.SendPropertyChanged("SPProcedure");
					this.OnSPProcedureChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAmountInvoiced", DbType="Float")]
		public System.Nullable<double> TotalAmountInvoiced
		{
			get
			{
				return this._TotalAmountInvoiced;
			}
			set
			{
				if ((this._TotalAmountInvoiced != value))
				{
					this.OnTotalAmountInvoicedChanging(value);
					this.SendPropertyChanging();
					this._TotalAmountInvoiced = value;
					this.SendPropertyChanged("TotalAmountInvoiced");
					this.OnTotalAmountInvoicedChanged();
				}
			}
		}
		
		[Association(Name="FK_Clearence_SADGood", Storage="_Clearence", ThisKey="ID", OtherKey="Clearence2SadGoodID", DeleteRule="NO ACTION")]
		public EntitySet<Clearence> Clearence
		{
			get
			{
				return this._Clearence;
			}
			set
			{
				this._Clearence.Assign(value);
			}
		}
		
		[Association(Name="FK_SADDuties_SADGood", Storage="_SADDuties", ThisKey="ID", OtherKey="SADDuties2SADGoodID", DeleteRule="NO ACTION")]
		public EntitySet<SADDuties> SADDuties
		{
			get
			{
				return this._SADDuties;
			}
			set
			{
				this._SADDuties.Assign(value);
			}
		}
		
		[Association(Name="FK_SADGood_SADDocument", Storage="_SADDocument", ThisKey="SADDocumentIndex", OtherKey="ID", IsForeignKey=true)]
		public SADDocument SADDocument
		{
			get
			{
				return this._SADDocument.Entity;
			}
			set
			{
				SADDocument previousValue = this._SADDocument.Entity;
				if (((previousValue != value) 
							|| (this._SADDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SADDocument.Entity = null;
						previousValue.SADGood.Remove(this);
					}
					this._SADDocument.Entity = value;
					if ((value != null))
					{
						value.SADGood.Add(this);
						this._SADDocumentIndex = value.ID;
					}
					else
					{
						this._SADDocumentIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("SADDocument");
				}
			}
		}
		
		[Association(Name="FK_SADPackage_SADGood", Storage="_SADPackage", ThisKey="ID", OtherKey="SADPackage2SADGoodID", DeleteRule="NO ACTION")]
		public EntitySet<SADPackage> SADPackage
		{
			get
			{
				return this._SADPackage;
			}
			set
			{
				this._SADPackage.Assign(value);
			}
		}
		
		[Association(Name="FK_SADQuantity_SADGood", Storage="_SADQuantity", ThisKey="ID", OtherKey="SADQuantity2SADGoodID", DeleteRule="NO ACTION")]
		public EntitySet<SADQuantity> SADQuantity
		{
			get
			{
				return this._SADQuantity;
			}
			set
			{
				this._SADQuantity.Assign(value);
			}
		}
		
		[Association(Name="FK_SADRequiredDocuments_SADGood", Storage="_SADRequiredDocuments", ThisKey="ID", OtherKey="SADRequiredDoc2SADGoodID", DeleteRule="NO ACTION")]
		public EntitySet<SADRequiredDocuments> SADRequiredDocuments
		{
			get
			{
				return this._SADRequiredDocuments;
			}
			set
			{
				this._SADRequiredDocuments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clearence(Clearence entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = this;
		}
		
		private void detach_Clearence(Clearence entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = null;
		}
		
		private void attach_SADDuties(SADDuties entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = this;
		}
		
		private void detach_SADDuties(SADDuties entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = null;
		}
		
		private void attach_SADPackage(SADPackage entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = this;
		}
		
		private void detach_SADPackage(SADPackage entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = null;
		}
		
		private void attach_SADQuantity(SADQuantity entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = this;
		}
		
		private void detach_SADQuantity(SADQuantity entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = null;
		}
		
		private void attach_SADRequiredDocuments(SADRequiredDocuments entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = this;
		}
		
		private void detach_SADRequiredDocuments(SADRequiredDocuments entity)
		{
			this.SendPropertyChanging();
			entity.SADGood = null;
		}
	}
	
	[Table(Name="dbo.SADPackage")]
	public partial class SADPackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private double _ItemNo;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private string _Package;
		
		private int _SADPackage2SADGoodID;
		
		private string _Title;
		
		private EntityRef<SADGood> _SADGood;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemNoChanging(double value);
    partial void OnItemNoChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnPackageChanging(string value);
    partial void OnPackageChanged();
    partial void OnSADPackage2SADGoodIDChanging(int value);
    partial void OnSADPackage2SADGoodIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SADPackage()
		{
			this._SADGood = default(EntityRef<SADGood>);
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="Float NOT NULL")]
		public double ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Package", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Package
		{
			get
			{
				return this._Package;
			}
			set
			{
				if ((this._Package != value))
				{
					this.OnPackageChanging(value);
					this.SendPropertyChanging();
					this._Package = value;
					this.SendPropertyChanged("Package");
					this.OnPackageChanged();
				}
			}
		}
		
		[Column(Storage="_SADPackage2SADGoodID", DbType="Int NOT NULL")]
		public int SADPackage2SADGoodID
		{
			get
			{
				return this._SADPackage2SADGoodID;
			}
			set
			{
				if ((this._SADPackage2SADGoodID != value))
				{
					if (this._SADGood.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSADPackage2SADGoodIDChanging(value);
					this.SendPropertyChanging();
					this._SADPackage2SADGoodID = value;
					this.SendPropertyChanged("SADPackage2SADGoodID");
					this.OnSADPackage2SADGoodIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_SADPackage_SADGood", Storage="_SADGood", ThisKey="SADPackage2SADGoodID", OtherKey="ID", IsForeignKey=true)]
		public SADGood SADGood
		{
			get
			{
				return this._SADGood.Entity;
			}
			set
			{
				SADGood previousValue = this._SADGood.Entity;
				if (((previousValue != value) 
							|| (this._SADGood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SADGood.Entity = null;
						previousValue.SADPackage.Remove(this);
					}
					this._SADGood.Entity = value;
					if ((value != null))
					{
						value.SADPackage.Add(this);
						this._SADPackage2SADGoodID = value.ID;
					}
					else
					{
						this._SADPackage2SADGoodID = default(int);
					}
					this.SendPropertyChanged("SADGood");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SADQuantity")]
	public partial class SADQuantity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private double _ItemNo;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private double _NetMass;
		
		private int _SADQuantity2SADGoodID;
		
		private string _Title;
		
		private string _Units;
		
		private EntityRef<SADGood> _SADGood;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemNoChanging(double value);
    partial void OnItemNoChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnNetMassChanging(double value);
    partial void OnNetMassChanged();
    partial void OnSADQuantity2SADGoodIDChanging(int value);
    partial void OnSADQuantity2SADGoodIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUnitsChanging(string value);
    partial void OnUnitsChanged();
    #endregion
		
		public SADQuantity()
		{
			this._SADGood = default(EntityRef<SADGood>);
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="Float NOT NULL")]
		public double ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_NetMass", DbType="Float NOT NULL")]
		public double NetMass
		{
			get
			{
				return this._NetMass;
			}
			set
			{
				if ((this._NetMass != value))
				{
					this.OnNetMassChanging(value);
					this.SendPropertyChanging();
					this._NetMass = value;
					this.SendPropertyChanged("NetMass");
					this.OnNetMassChanged();
				}
			}
		}
		
		[Column(Storage="_SADQuantity2SADGoodID", DbType="Int NOT NULL")]
		public int SADQuantity2SADGoodID
		{
			get
			{
				return this._SADQuantity2SADGoodID;
			}
			set
			{
				if ((this._SADQuantity2SADGoodID != value))
				{
					if (this._SADGood.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSADQuantity2SADGoodIDChanging(value);
					this.SendPropertyChanging();
					this._SADQuantity2SADGoodID = value;
					this.SendPropertyChanged("SADQuantity2SADGoodID");
					this.OnSADQuantity2SADGoodIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Units", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[Association(Name="FK_SADQuantity_SADGood", Storage="_SADGood", ThisKey="SADQuantity2SADGoodID", OtherKey="ID", IsForeignKey=true)]
		public SADGood SADGood
		{
			get
			{
				return this._SADGood.Entity;
			}
			set
			{
				SADGood previousValue = this._SADGood.Entity;
				if (((previousValue != value) 
							|| (this._SADGood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SADGood.Entity = null;
						previousValue.SADQuantity.Remove(this);
					}
					this._SADGood.Entity = value;
					if ((value != null))
					{
						value.SADQuantity.Add(this);
						this._SADQuantity2SADGoodID = value.ID;
					}
					else
					{
						this._SADQuantity2SADGoodID = default(int);
					}
					this.SendPropertyChanged("SADGood");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SADRequiredDocuments")]
	public partial class SADRequiredDocuments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Code;
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private string _Number;
		
		private int _SADRequiredDoc2SADGoodID;
		
		private string _Title;
		
		private EntityRef<SADGood> _SADGood;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnSADRequiredDoc2SADGoodIDChanging(int value);
    partial void OnSADRequiredDoc2SADGoodIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SADRequiredDocuments()
		{
			this._SADGood = default(EntityRef<SADGood>);
			OnCreated();
		}
		
		[Column(Storage="_Code", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_SADRequiredDoc2SADGoodID", DbType="Int NOT NULL")]
		public int SADRequiredDoc2SADGoodID
		{
			get
			{
				return this._SADRequiredDoc2SADGoodID;
			}
			set
			{
				if ((this._SADRequiredDoc2SADGoodID != value))
				{
					if (this._SADGood.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSADRequiredDoc2SADGoodIDChanging(value);
					this.SendPropertyChanging();
					this._SADRequiredDoc2SADGoodID = value;
					this.SendPropertyChanged("SADRequiredDoc2SADGoodID");
					this.OnSADRequiredDoc2SADGoodIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_SADRequiredDocuments_SADGood", Storage="_SADGood", ThisKey="SADRequiredDoc2SADGoodID", OtherKey="ID", IsForeignKey=true)]
		public SADGood SADGood
		{
			get
			{
				return this._SADGood.Entity;
			}
			set
			{
				SADGood previousValue = this._SADGood.Entity;
				if (((previousValue != value) 
							|| (this._SADGood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SADGood.Entity = null;
						previousValue.SADRequiredDocuments.Remove(this);
					}
					this._SADGood.Entity = value;
					if ((value != null))
					{
						value.SADRequiredDocuments.Add(this);
						this._SADRequiredDoc2SADGoodID = value.ID;
					}
					else
					{
						this._SADRequiredDoc2SADGoodID = default(int);
					}
					this.SendPropertyChanged("SADGood");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Settings")]
	public partial class Settings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private string _KeyValue;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private string _Title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnKeyValueChanging(string value);
    partial void OnKeyValueChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Settings()
		{
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this.OnKeyValueChanging(value);
					this.SendPropertyChanging();
					this._KeyValue = value;
					this.SendPropertyChanged("KeyValue");
					this.OnKeyValueChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SHMenthol")]
	public partial class SHMenthol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private string _ProductType;
		
		private double _SHMentholRatio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    partial void OnSHMentholRatioChanging(double value);
    partial void OnSHMentholRatioChanged();
    #endregion
		
		public SHMenthol()
		{
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SHMentholRatio", DbType="Float NOT NULL")]
		public double SHMentholRatio
		{
			get
			{
				return this._SHMentholRatio;
			}
			set
			{
				if ((this._SHMentholRatio != value))
				{
					this.OnSHMentholRatioChanging(value);
					this.SendPropertyChanging();
					this._SHMentholRatio = value;
					this.SendPropertyChanged("SHMentholRatio");
					this.OnSHMentholRatioChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SKU")]
	public partial class SKU : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _Archival;
		
		private string _BlendPurpose;
		
		private string _Brand;
		
		private string _CigaretteLenght;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _Family;
		
		private string _FilterLenght;
		
		private System.Nullable<int> _FormatIndex;
		
		private int _ID;
		
		private System.Nullable<bool> _IPRMaterial;
		
		private string _Menthol;
		
		private System.Nullable<bool> _MentholMaterial;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _PrimeMarket;
		
		private string _ProductType;
		
		private string _SKU1;
		
		private System.Nullable<int> _SKULibraryIndex;
		
		private string _Title;
		
		private string _Units;
		
		private EntitySet<Batch> _Batch;
		
		private EntityRef<SKULibrary> _SKULibrary;
		
		private EntityRef<SPFormat> _SPFormat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchivalChanging(System.Nullable<bool> value);
    partial void OnArchivalChanged();
    partial void OnBlendPurposeChanging(string value);
    partial void OnBlendPurposeChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnCigaretteLenghtChanging(string value);
    partial void OnCigaretteLenghtChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnFamilyChanging(string value);
    partial void OnFamilyChanged();
    partial void OnFilterLenghtChanging(string value);
    partial void OnFilterLenghtChanged();
    partial void OnFormatIndexChanging(System.Nullable<int> value);
    partial void OnFormatIndexChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIPRMaterialChanging(System.Nullable<bool> value);
    partial void OnIPRMaterialChanged();
    partial void OnMentholChanging(string value);
    partial void OnMentholChanged();
    partial void OnMentholMaterialChanging(System.Nullable<bool> value);
    partial void OnMentholMaterialChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnPrimeMarketChanging(string value);
    partial void OnPrimeMarketChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    partial void OnSKU1Changing(string value);
    partial void OnSKU1Changed();
    partial void OnSKULibraryIndexChanging(System.Nullable<int> value);
    partial void OnSKULibraryIndexChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUnitsChanging(string value);
    partial void OnUnitsChanged();
    #endregion
		
		public SKU()
		{
			this._Batch = new EntitySet<Batch>(new Action<Batch>(this.attach_Batch), new Action<Batch>(this.detach_Batch));
			this._SKULibrary = default(EntityRef<SKULibrary>);
			this._SPFormat = default(EntityRef<SPFormat>);
			OnCreated();
		}
		
		[Column(Storage="_Archival", DbType="Bit")]
		public System.Nullable<bool> Archival
		{
			get
			{
				return this._Archival;
			}
			set
			{
				if ((this._Archival != value))
				{
					this.OnArchivalChanging(value);
					this.SendPropertyChanging();
					this._Archival = value;
					this.SendPropertyChanged("Archival");
					this.OnArchivalChanged();
				}
			}
		}
		
		[Column(Storage="_BlendPurpose", DbType="NVarChar(255)")]
		public string BlendPurpose
		{
			get
			{
				return this._BlendPurpose;
			}
			set
			{
				if ((this._BlendPurpose != value))
				{
					this.OnBlendPurposeChanging(value);
					this.SendPropertyChanging();
					this._BlendPurpose = value;
					this.SendPropertyChanged("BlendPurpose");
					this.OnBlendPurposeChanged();
				}
			}
		}
		
		[Column(Storage="_Brand", DbType="NVarChar(255)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[Column(Storage="_CigaretteLenght", DbType="NVarChar(255)")]
		public string CigaretteLenght
		{
			get
			{
				return this._CigaretteLenght;
			}
			set
			{
				if ((this._CigaretteLenght != value))
				{
					this.OnCigaretteLenghtChanging(value);
					this.SendPropertyChanging();
					this._CigaretteLenght = value;
					this.SendPropertyChanged("CigaretteLenght");
					this.OnCigaretteLenghtChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Family", DbType="NVarChar(255)")]
		public string Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				if ((this._Family != value))
				{
					this.OnFamilyChanging(value);
					this.SendPropertyChanging();
					this._Family = value;
					this.SendPropertyChanged("Family");
					this.OnFamilyChanged();
				}
			}
		}
		
		[Column(Storage="_FilterLenght", DbType="NVarChar(255)")]
		public string FilterLenght
		{
			get
			{
				return this._FilterLenght;
			}
			set
			{
				if ((this._FilterLenght != value))
				{
					this.OnFilterLenghtChanging(value);
					this.SendPropertyChanging();
					this._FilterLenght = value;
					this.SendPropertyChanged("FilterLenght");
					this.OnFilterLenghtChanged();
				}
			}
		}
		
		[Column(Storage="_FormatIndex", DbType="Int")]
		public System.Nullable<int> FormatIndex
		{
			get
			{
				return this._FormatIndex;
			}
			set
			{
				if ((this._FormatIndex != value))
				{
					if (this._SPFormat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormatIndexChanging(value);
					this.SendPropertyChanging();
					this._FormatIndex = value;
					this.SendPropertyChanged("FormatIndex");
					this.OnFormatIndexChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IPRMaterial", DbType="Bit")]
		public System.Nullable<bool> IPRMaterial
		{
			get
			{
				return this._IPRMaterial;
			}
			set
			{
				if ((this._IPRMaterial != value))
				{
					this.OnIPRMaterialChanging(value);
					this.SendPropertyChanging();
					this._IPRMaterial = value;
					this.SendPropertyChanged("IPRMaterial");
					this.OnIPRMaterialChanged();
				}
			}
		}
		
		[Column(Storage="_Menthol", DbType="NVarChar(255)")]
		public string Menthol
		{
			get
			{
				return this._Menthol;
			}
			set
			{
				if ((this._Menthol != value))
				{
					this.OnMentholChanging(value);
					this.SendPropertyChanging();
					this._Menthol = value;
					this.SendPropertyChanged("Menthol");
					this.OnMentholChanged();
				}
			}
		}
		
		[Column(Storage="_MentholMaterial", DbType="Bit")]
		public System.Nullable<bool> MentholMaterial
		{
			get
			{
				return this._MentholMaterial;
			}
			set
			{
				if ((this._MentholMaterial != value))
				{
					this.OnMentholMaterialChanging(value);
					this.SendPropertyChanging();
					this._MentholMaterial = value;
					this.SendPropertyChanged("MentholMaterial");
					this.OnMentholMaterialChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_PrimeMarket", DbType="NVarChar(255)")]
		public string PrimeMarket
		{
			get
			{
				return this._PrimeMarket;
			}
			set
			{
				if ((this._PrimeMarket != value))
				{
					this.OnPrimeMarketChanging(value);
					this.SendPropertyChanging();
					this._PrimeMarket = value;
					this.SendPropertyChanged("PrimeMarket");
					this.OnPrimeMarketChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(255)")]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[Column(Name="SKU", Storage="_SKU1", DbType="NVarChar(255)")]
		public string SKU1
		{
			get
			{
				return this._SKU1;
			}
			set
			{
				if ((this._SKU1 != value))
				{
					this.OnSKU1Changing(value);
					this.SendPropertyChanging();
					this._SKU1 = value;
					this.SendPropertyChanged("SKU1");
					this.OnSKU1Changed();
				}
			}
		}
		
		[Column(Storage="_SKULibraryIndex", DbType="Int")]
		public System.Nullable<int> SKULibraryIndex
		{
			get
			{
				return this._SKULibraryIndex;
			}
			set
			{
				if ((this._SKULibraryIndex != value))
				{
					if (this._SKULibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSKULibraryIndexChanging(value);
					this.SendPropertyChanging();
					this._SKULibraryIndex = value;
					this.SendPropertyChanged("SKULibraryIndex");
					this.OnSKULibraryIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Units", DbType="NVarChar(255)")]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[Association(Name="FK_Batch_SKU", Storage="_Batch", ThisKey="ID", OtherKey="SKUIndex", DeleteRule="NO ACTION")]
		public EntitySet<Batch> Batch
		{
			get
			{
				return this._Batch;
			}
			set
			{
				this._Batch.Assign(value);
			}
		}
		
		[Association(Name="FK_SKU_SKULibrary", Storage="_SKULibrary", ThisKey="SKULibraryIndex", OtherKey="ID", IsForeignKey=true)]
		public SKULibrary SKULibrary
		{
			get
			{
				return this._SKULibrary.Entity;
			}
			set
			{
				SKULibrary previousValue = this._SKULibrary.Entity;
				if (((previousValue != value) 
							|| (this._SKULibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SKULibrary.Entity = null;
						previousValue.SKU.Remove(this);
					}
					this._SKULibrary.Entity = value;
					if ((value != null))
					{
						value.SKU.Add(this);
						this._SKULibraryIndex = value.ID;
					}
					else
					{
						this._SKULibraryIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("SKULibrary");
				}
			}
		}
		
		[Association(Name="FK_SKU_SPFormat", Storage="_SPFormat", ThisKey="FormatIndex", OtherKey="ID", IsForeignKey=true)]
		public SPFormat SPFormat
		{
			get
			{
				return this._SPFormat.Entity;
			}
			set
			{
				SPFormat previousValue = this._SPFormat.Entity;
				if (((previousValue != value) 
							|| (this._SPFormat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPFormat.Entity = null;
						previousValue.SKU.Remove(this);
					}
					this._SPFormat.Entity = value;
					if ((value != null))
					{
						value.SKU.Add(this);
						this._FormatIndex = value.ID;
					}
					else
					{
						this._FormatIndex = default(Nullable<int>);
					}
					this.SendPropertyChanged("SPFormat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Batch(Batch entity)
		{
			this.SendPropertyChanging();
			entity.SKUIndexSKU = this;
		}
		
		private void detach_Batch(Batch entity)
		{
			this.SendPropertyChanging();
			entity.SKUIndexSKU = null;
		}
	}
	
	[Table(Name="dbo.SKULibrary")]
	public partial class SKULibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private string _Title;
		
		private EntitySet<SKU> _SKU;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SKULibrary()
		{
			this._SKU = new EntitySet<SKU>(new Action<SKU>(this.attach_SKU), new Action<SKU>(this.detach_SKU));
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_SKU_SKULibrary", Storage="_SKU", ThisKey="ID", OtherKey="SKULibraryIndex", DeleteRule="NO ACTION")]
		public EntitySet<SKU> SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				this._SKU.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SKU(SKU entity)
		{
			this.SendPropertyChanging();
			entity.SKULibrary = this;
		}
		
		private void detach_SKU(SKU entity)
		{
			this.SendPropertyChanging();
			entity.SKULibrary = null;
		}
	}
	
	[Table(Name="dbo.SPFormat")]
	public partial class SPFormat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CigaretteLenght;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private string _FilterLenght;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private string _Title;
		
		private EntitySet<SKU> _SKU;
		
		private EntitySet<Usage> _Usage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCigaretteLenghtChanging(string value);
    partial void OnCigaretteLenghtChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnFilterLenghtChanging(string value);
    partial void OnFilterLenghtChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public SPFormat()
		{
			this._SKU = new EntitySet<SKU>(new Action<SKU>(this.attach_SKU), new Action<SKU>(this.detach_SKU));
			this._Usage = new EntitySet<Usage>(new Action<Usage>(this.attach_Usage), new Action<Usage>(this.detach_Usage));
			OnCreated();
		}
		
		[Column(Storage="_CigaretteLenght", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CigaretteLenght
		{
			get
			{
				return this._CigaretteLenght;
			}
			set
			{
				if ((this._CigaretteLenght != value))
				{
					this.OnCigaretteLenghtChanging(value);
					this.SendPropertyChanging();
					this._CigaretteLenght = value;
					this.SendPropertyChanged("CigaretteLenght");
					this.OnCigaretteLenghtChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_FilterLenght", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FilterLenght
		{
			get
			{
				return this._FilterLenght;
			}
			set
			{
				if ((this._FilterLenght != value))
				{
					this.OnFilterLenghtChanging(value);
					this.SendPropertyChanging();
					this._FilterLenght = value;
					this.SendPropertyChanged("FilterLenght");
					this.OnFilterLenghtChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_SKU_SPFormat", Storage="_SKU", ThisKey="ID", OtherKey="FormatIndex", DeleteRule="NO ACTION")]
		public EntitySet<SKU> SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				this._SKU.Assign(value);
			}
		}
		
		[Association(Name="FK_Usage_SPFormat", Storage="_Usage", ThisKey="ID", OtherKey="FormatIndex", DeleteRule="NO ACTION")]
		public EntitySet<Usage> Usage
		{
			get
			{
				return this._Usage;
			}
			set
			{
				this._Usage.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SKU(SKU entity)
		{
			this.SendPropertyChanging();
			entity.SPFormat = this;
		}
		
		private void detach_SKU(SKU entity)
		{
			this.SendPropertyChanging();
			entity.SPFormat = null;
		}
		
		private void attach_Usage(Usage entity)
		{
			this.SendPropertyChanging();
			entity.SPFormat = this;
		}
		
		private void detach_Usage(Usage entity)
		{
			this.SendPropertyChanging();
			entity.SPFormat = null;
		}
	}
	
	[Table(Name="dbo.StockEntry")]
	public partial class StockEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Batch;
		
		private int _BatchIndex;
		
		private double _Blocked;
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private double _InQualityInsp;
		
		private bool _IPRType;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private string _ProductType;
		
		private double _Quantity;
		
		private double _RestrictedUse;
		
		private string _SKU;
		
		private int _StockLibraryIndex;
		
		private string _StorLoc;
		
		private string _Title;
		
		private string _Units;
		
		private double _Unrestricted;
		
		private EntityRef<Batch> _BatchIndexBatch;
		
		private EntityRef<StockLibrary> _StockLibrary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBatchChanging(string value);
    partial void OnBatchChanged();
    partial void OnBatchIndexChanging(int value);
    partial void OnBatchIndexChanged();
    partial void OnBlockedChanging(double value);
    partial void OnBlockedChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInQualityInspChanging(double value);
    partial void OnInQualityInspChanged();
    partial void OnIPRTypeChanging(bool value);
    partial void OnIPRTypeChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    partial void OnQuantityChanging(double value);
    partial void OnQuantityChanged();
    partial void OnRestrictedUseChanging(double value);
    partial void OnRestrictedUseChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnStockLibraryIndexChanging(int value);
    partial void OnStockLibraryIndexChanged();
    partial void OnStorLocChanging(string value);
    partial void OnStorLocChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUnitsChanging(string value);
    partial void OnUnitsChanged();
    partial void OnUnrestrictedChanging(double value);
    partial void OnUnrestrictedChanged();
    #endregion
		
		public StockEntry()
		{
			this._BatchIndexBatch = default(EntityRef<Batch>);
			this._StockLibrary = default(EntityRef<StockLibrary>);
			OnCreated();
		}
		
		[Column(Storage="_Batch", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Batch
		{
			get
			{
				return this._Batch;
			}
			set
			{
				if ((this._Batch != value))
				{
					this.OnBatchChanging(value);
					this.SendPropertyChanging();
					this._Batch = value;
					this.SendPropertyChanged("Batch");
					this.OnBatchChanged();
				}
			}
		}
		
		[Column(Storage="_BatchIndex", DbType="Int NOT NULL")]
		public int BatchIndex
		{
			get
			{
				return this._BatchIndex;
			}
			set
			{
				if ((this._BatchIndex != value))
				{
					if (this._BatchIndexBatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchIndexChanging(value);
					this.SendPropertyChanging();
					this._BatchIndex = value;
					this.SendPropertyChanged("BatchIndex");
					this.OnBatchIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Blocked", DbType="Float NOT NULL")]
		public double Blocked
		{
			get
			{
				return this._Blocked;
			}
			set
			{
				if ((this._Blocked != value))
				{
					this.OnBlockedChanging(value);
					this.SendPropertyChanging();
					this._Blocked = value;
					this.SendPropertyChanged("Blocked");
					this.OnBlockedChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_InQualityInsp", DbType="Float NOT NULL")]
		public double InQualityInsp
		{
			get
			{
				return this._InQualityInsp;
			}
			set
			{
				if ((this._InQualityInsp != value))
				{
					this.OnInQualityInspChanging(value);
					this.SendPropertyChanging();
					this._InQualityInsp = value;
					this.SendPropertyChanged("InQualityInsp");
					this.OnInQualityInspChanged();
				}
			}
		}
		
		[Column(Storage="_IPRType", DbType="Bit NOT NULL")]
		public bool IPRType
		{
			get
			{
				return this._IPRType;
			}
			set
			{
				if ((this._IPRType != value))
				{
					this.OnIPRTypeChanging(value);
					this.SendPropertyChanging();
					this._IPRType = value;
					this.SendPropertyChanged("IPRType");
					this.OnIPRTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Float NOT NULL")]
		public double Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_RestrictedUse", DbType="Float NOT NULL")]
		public double RestrictedUse
		{
			get
			{
				return this._RestrictedUse;
			}
			set
			{
				if ((this._RestrictedUse != value))
				{
					this.OnRestrictedUseChanging(value);
					this.SendPropertyChanging();
					this._RestrictedUse = value;
					this.SendPropertyChanged("RestrictedUse");
					this.OnRestrictedUseChanged();
				}
			}
		}
		
		[Column(Storage="_SKU", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[Column(Storage="_StockLibraryIndex", DbType="Int NOT NULL")]
		public int StockLibraryIndex
		{
			get
			{
				return this._StockLibraryIndex;
			}
			set
			{
				if ((this._StockLibraryIndex != value))
				{
					if (this._StockLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockLibraryIndexChanging(value);
					this.SendPropertyChanging();
					this._StockLibraryIndex = value;
					this.SendPropertyChanged("StockLibraryIndex");
					this.OnStockLibraryIndexChanged();
				}
			}
		}
		
		[Column(Storage="_StorLoc", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string StorLoc
		{
			get
			{
				return this._StorLoc;
			}
			set
			{
				if ((this._StorLoc != value))
				{
					this.OnStorLocChanging(value);
					this.SendPropertyChanging();
					this._StorLoc = value;
					this.SendPropertyChanged("StorLoc");
					this.OnStorLocChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Units", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[Column(Storage="_Unrestricted", DbType="Float NOT NULL")]
		public double Unrestricted
		{
			get
			{
				return this._Unrestricted;
			}
			set
			{
				if ((this._Unrestricted != value))
				{
					this.OnUnrestrictedChanging(value);
					this.SendPropertyChanging();
					this._Unrestricted = value;
					this.SendPropertyChanged("Unrestricted");
					this.OnUnrestrictedChanged();
				}
			}
		}
		
		[Association(Name="FK_StockEntry_Batch", Storage="_BatchIndexBatch", ThisKey="BatchIndex", OtherKey="ID", IsForeignKey=true)]
		public Batch BatchIndexBatch
		{
			get
			{
				return this._BatchIndexBatch.Entity;
			}
			set
			{
				Batch previousValue = this._BatchIndexBatch.Entity;
				if (((previousValue != value) 
							|| (this._BatchIndexBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BatchIndexBatch.Entity = null;
						previousValue.StockEntry.Remove(this);
					}
					this._BatchIndexBatch.Entity = value;
					if ((value != null))
					{
						value.StockEntry.Add(this);
						this._BatchIndex = value.ID;
					}
					else
					{
						this._BatchIndex = default(int);
					}
					this.SendPropertyChanged("BatchIndexBatch");
				}
			}
		}
		
		[Association(Name="FK_StockEntry_StockLibrary", Storage="_StockLibrary", ThisKey="StockLibraryIndex", OtherKey="ID", IsForeignKey=true)]
		public StockLibrary StockLibrary
		{
			get
			{
				return this._StockLibrary.Entity;
			}
			set
			{
				StockLibrary previousValue = this._StockLibrary.Entity;
				if (((previousValue != value) 
							|| (this._StockLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockLibrary.Entity = null;
						previousValue.StockEntry.Remove(this);
					}
					this._StockLibrary.Entity = value;
					if ((value != null))
					{
						value.StockEntry.Add(this);
						this._StockLibraryIndex = value.ID;
					}
					else
					{
						this._StockLibraryIndex = default(int);
					}
					this.SendPropertyChanged("StockLibrary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StockLibrary")]
	public partial class StockLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private int _Stock2JSOXLibraryIndex;
		
		private string _Title;
		
		private EntitySet<StockEntry> _StockEntry;
		
		private EntityRef<JSOXLibrary> _JSOXLibrary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnStock2JSOXLibraryIndexChanging(int value);
    partial void OnStock2JSOXLibraryIndexChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public StockLibrary()
		{
			this._StockEntry = new EntitySet<StockEntry>(new Action<StockEntry>(this.attach_StockEntry), new Action<StockEntry>(this.detach_StockEntry));
			this._JSOXLibrary = default(EntityRef<JSOXLibrary>);
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_Stock2JSOXLibraryIndex", DbType="Int NOT NULL")]
		public int Stock2JSOXLibraryIndex
		{
			get
			{
				return this._Stock2JSOXLibraryIndex;
			}
			set
			{
				if ((this._Stock2JSOXLibraryIndex != value))
				{
					if (this._JSOXLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStock2JSOXLibraryIndexChanging(value);
					this.SendPropertyChanging();
					this._Stock2JSOXLibraryIndex = value;
					this.SendPropertyChanged("Stock2JSOXLibraryIndex");
					this.OnStock2JSOXLibraryIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="FK_StockEntry_StockLibrary", Storage="_StockEntry", ThisKey="ID", OtherKey="StockLibraryIndex", DeleteRule="NO ACTION")]
		public EntitySet<StockEntry> StockEntry
		{
			get
			{
				return this._StockEntry;
			}
			set
			{
				this._StockEntry.Assign(value);
			}
		}
		
		[Association(Name="FK_StockLibrary_JSOXLibrary", Storage="_JSOXLibrary", ThisKey="Stock2JSOXLibraryIndex", OtherKey="ID", IsForeignKey=true)]
		public JSOXLibrary JSOXLibrary
		{
			get
			{
				return this._JSOXLibrary.Entity;
			}
			set
			{
				JSOXLibrary previousValue = this._JSOXLibrary.Entity;
				if (((previousValue != value) 
							|| (this._JSOXLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JSOXLibrary.Entity = null;
						previousValue.StockLibrary.Remove(this);
					}
					this._JSOXLibrary.Entity = value;
					if ((value != null))
					{
						value.StockLibrary.Add(this);
						this._Stock2JSOXLibraryIndex = value.ID;
					}
					else
					{
						this._Stock2JSOXLibraryIndex = default(int);
					}
					this.SendPropertyChanged("JSOXLibrary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StockEntry(StockEntry entity)
		{
			this.SendPropertyChanging();
			entity.StockLibrary = this;
		}
		
		private void detach_StockEntry(StockEntry entity)
		{
			this.SendPropertyChanging();
			entity.StockLibrary = null;
		}
	}
	
	[Table(Name="dbo.Usage")]
	public partial class Usage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private double _CTFUsageMax;
		
		private double _CTFUsageMin;
		
		private int _FormatIndex;
		
		private int _ID;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private double _UsageMax;
		
		private double _UsageMin;
		
		private EntityRef<SPFormat> _SPFormat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCTFUsageMaxChanging(double value);
    partial void OnCTFUsageMaxChanged();
    partial void OnCTFUsageMinChanging(double value);
    partial void OnCTFUsageMinChanged();
    partial void OnFormatIndexChanging(int value);
    partial void OnFormatIndexChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnUsageMaxChanging(double value);
    partial void OnUsageMaxChanged();
    partial void OnUsageMinChanging(double value);
    partial void OnUsageMinChanged();
    #endregion
		
		public Usage()
		{
			this._SPFormat = default(EntityRef<SPFormat>);
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CTFUsageMax", DbType="Float NOT NULL")]
		public double CTFUsageMax
		{
			get
			{
				return this._CTFUsageMax;
			}
			set
			{
				if ((this._CTFUsageMax != value))
				{
					this.OnCTFUsageMaxChanging(value);
					this.SendPropertyChanging();
					this._CTFUsageMax = value;
					this.SendPropertyChanged("CTFUsageMax");
					this.OnCTFUsageMaxChanged();
				}
			}
		}
		
		[Column(Storage="_CTFUsageMin", DbType="Float NOT NULL")]
		public double CTFUsageMin
		{
			get
			{
				return this._CTFUsageMin;
			}
			set
			{
				if ((this._CTFUsageMin != value))
				{
					this.OnCTFUsageMinChanging(value);
					this.SendPropertyChanging();
					this._CTFUsageMin = value;
					this.SendPropertyChanged("CTFUsageMin");
					this.OnCTFUsageMinChanged();
				}
			}
		}
		
		[Column(Storage="_FormatIndex", DbType="Int NOT NULL")]
		public int FormatIndex
		{
			get
			{
				return this._FormatIndex;
			}
			set
			{
				if ((this._FormatIndex != value))
				{
					if (this._SPFormat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormatIndexChanging(value);
					this.SendPropertyChanging();
					this._FormatIndex = value;
					this.SendPropertyChanged("FormatIndex");
					this.OnFormatIndexChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_UsageMax", DbType="Float NOT NULL")]
		public double UsageMax
		{
			get
			{
				return this._UsageMax;
			}
			set
			{
				if ((this._UsageMax != value))
				{
					this.OnUsageMaxChanging(value);
					this.SendPropertyChanging();
					this._UsageMax = value;
					this.SendPropertyChanged("UsageMax");
					this.OnUsageMaxChanged();
				}
			}
		}
		
		[Column(Storage="_UsageMin", DbType="Float NOT NULL")]
		public double UsageMin
		{
			get
			{
				return this._UsageMin;
			}
			set
			{
				if ((this._UsageMin != value))
				{
					this.OnUsageMinChanging(value);
					this.SendPropertyChanging();
					this._UsageMin = value;
					this.SendPropertyChanged("UsageMin");
					this.OnUsageMinChanged();
				}
			}
		}
		
		[Association(Name="FK_Usage_SPFormat", Storage="_SPFormat", ThisKey="FormatIndex", OtherKey="ID", IsForeignKey=true)]
		public SPFormat SPFormat
		{
			get
			{
				return this._SPFormat.Entity;
			}
			set
			{
				SPFormat previousValue = this._SPFormat.Entity;
				if (((previousValue != value) 
							|| (this._SPFormat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPFormat.Entity = null;
						previousValue.Usage.Remove(this);
					}
					this._SPFormat.Entity = value;
					if ((value != null))
					{
						value.Usage.Add(this);
						this._FormatIndex = value.ID;
					}
					else
					{
						this._FormatIndex = default(int);
					}
					this.SendPropertyChanged("SPFormat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Warehouse")]
	public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private string _ProductType;
		
		private string _SPProcedure;
		
		private string _Title;
		
		private string _WarehouseName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    partial void OnSPProcedureChanging(string value);
    partial void OnSPProcedureChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnWarehouseNameChanging(string value);
    partial void OnWarehouseNameChanged();
    #endregion
		
		public Warehouse()
		{
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SPProcedure", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SPProcedure
		{
			get
			{
				return this._SPProcedure;
			}
			set
			{
				if ((this._SPProcedure != value))
				{
					this.OnSPProcedureChanging(value);
					this.SendPropertyChanging();
					this._SPProcedure = value;
					this.SendPropertyChanged("SPProcedure");
					this.OnSPProcedureChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_WarehouseName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string WarehouseName
		{
			get
			{
				return this._WarehouseName;
			}
			set
			{
				if ((this._WarehouseName != value))
				{
					this.OnWarehouseNameChanging(value);
					this.SendPropertyChanging();
					this._WarehouseName = value;
					this.SendPropertyChanged("WarehouseName");
					this.OnWarehouseNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Waste")]
	public partial class Waste : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Created;
		
		private string _CreatedBy;
		
		private int _ID;
		
		private System.DateTime _Modified;
		
		private string _ModifiedBy;
		
		private string _ProductType;
		
		private double _WasteRatio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModifiedChanging(System.DateTime value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    partial void OnProductTypeChanging(string value);
    partial void OnProductTypeChanged();
    partial void OnWasteRatioChanging(double value);
    partial void OnWasteRatioChanged();
    #endregion
		
		public Waste()
		{
			OnCreated();
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime NOT NULL")]
		public System.DateTime Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Column(Storage="_ProductType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[Column(Storage="_WasteRatio", DbType="Float NOT NULL")]
		public double WasteRatio
		{
			get
			{
				return this._WasteRatio;
			}
			set
			{
				if ((this._WasteRatio != value))
				{
					this.OnWasteRatioChanging(value);
					this.SendPropertyChanging();
					this._WasteRatio = value;
					this.SendPropertyChanged("WasteRatio");
					this.OnWasteRatioChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
